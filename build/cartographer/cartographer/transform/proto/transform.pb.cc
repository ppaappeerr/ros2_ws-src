// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/transform.proto

#include "cartographer/transform/proto/transform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace transform {
namespace proto {
PROTOBUF_CONSTEXPR Vector2d::Vector2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2dDefaultTypeInternal() {}
  union {
    Vector2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2dDefaultTypeInternal _Vector2d_default_instance_;
PROTOBUF_CONSTEXPR Vector2f::Vector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_CONSTEXPR Vector3d::Vector3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3dDefaultTypeInternal() {}
  union {
    Vector3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3dDefaultTypeInternal _Vector3d_default_instance_;
PROTOBUF_CONSTEXPR Vector3f::Vector3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3fDefaultTypeInternal() {}
  union {
    Vector3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3fDefaultTypeInternal _Vector3f_default_instance_;
PROTOBUF_CONSTEXPR Vector4f::Vector4f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4fDefaultTypeInternal() {}
  union {
    Vector4f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4fDefaultTypeInternal _Vector4f_default_instance_;
PROTOBUF_CONSTEXPR Quaterniond::Quaterniond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaterniondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaterniondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaterniondDefaultTypeInternal() {}
  union {
    Quaterniond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
PROTOBUF_CONSTEXPR Quaternionf::Quaternionf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionfDefaultTypeInternal() {}
  union {
    Quaternionf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
PROTOBUF_CONSTEXPR Rigid2d::Rigid2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Rigid2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rigid2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rigid2dDefaultTypeInternal() {}
  union {
    Rigid2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rigid2dDefaultTypeInternal _Rigid2d_default_instance_;
PROTOBUF_CONSTEXPR Rigid2f::Rigid2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Rigid2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rigid2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rigid2fDefaultTypeInternal() {}
  union {
    Rigid2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rigid2fDefaultTypeInternal _Rigid2f_default_instance_;
PROTOBUF_CONSTEXPR Rigid3d::Rigid3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Rigid3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rigid3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rigid3dDefaultTypeInternal() {}
  union {
    Rigid3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rigid3dDefaultTypeInternal _Rigid3d_default_instance_;
PROTOBUF_CONSTEXPR Rigid3f::Rigid3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Rigid3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rigid3fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rigid3fDefaultTypeInternal() {}
  union {
    Rigid3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rigid3fDefaultTypeInternal _Rigid3f_default_instance_;
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2ftransform_2fproto_2ftransform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _impl_.t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, _impl_.rotation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::transform::proto::Vector2d)},
  { 8, -1, -1, sizeof(::cartographer::transform::proto::Vector2f)},
  { 16, -1, -1, sizeof(::cartographer::transform::proto::Vector3d)},
  { 25, -1, -1, sizeof(::cartographer::transform::proto::Vector3f)},
  { 34, -1, -1, sizeof(::cartographer::transform::proto::Vector4f)},
  { 44, -1, -1, sizeof(::cartographer::transform::proto::Quaterniond)},
  { 54, -1, -1, sizeof(::cartographer::transform::proto::Quaternionf)},
  { 64, -1, -1, sizeof(::cartographer::transform::proto::Rigid2d)},
  { 72, -1, -1, sizeof(::cartographer::transform::proto::Rigid2f)},
  { 80, -1, -1, sizeof(::cartographer::transform::proto::Rigid3d)},
  { 88, -1, -1, sizeof(::cartographer::transform::proto::Rigid3f)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::transform::proto::_Vector2d_default_instance_._instance,
  &::cartographer::transform::proto::_Vector2f_default_instance_._instance,
  &::cartographer::transform::proto::_Vector3d_default_instance_._instance,
  &::cartographer::transform::proto::_Vector3f_default_instance_._instance,
  &::cartographer::transform::proto::_Vector4f_default_instance_._instance,
  &::cartographer::transform::proto::_Quaterniond_default_instance_._instance,
  &::cartographer::transform::proto::_Quaternionf_default_instance_._instance,
  &::cartographer::transform::proto::_Rigid2d_default_instance_._instance,
  &::cartographer::transform::proto::_Rigid2f_default_instance_._instance,
  &::cartographer::transform::proto::_Rigid3d_default_instance_._instance,
  &::cartographer::transform::proto::_Rigid3f_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftransform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,cartographer/transform/proto/transform"
  ".proto\022\034cartographer.transform.proto\" \n\010"
  "Vector2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\" \n\010Vector"
  "2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"+\n\010Vector3d\022\t\n\001"
  "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"+\n\010Vector3"
  "f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010Ve"
  "ctor4f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022"
  "\t\n\001t\030\004 \001(\002\"9\n\013Quaterniond\022\t\n\001x\030\001 \001(\001\022\t\n\001"
  "y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"9\n\013Quatern"
  "ionf\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n"
  "\001w\030\004 \001(\002\"X\n\007Rigid2d\022;\n\013translation\030\001 \001(\013"
  "2&.cartographer.transform.proto.Vector2d"
  "\022\020\n\010rotation\030\002 \001(\001\"X\n\007Rigid2f\022;\n\013transla"
  "tion\030\001 \001(\0132&.cartographer.transform.prot"
  "o.Vector2f\022\020\n\010rotation\030\002 \001(\002\"\203\001\n\007Rigid3d"
  "\022;\n\013translation\030\001 \001(\0132&.cartographer.tra"
  "nsform.proto.Vector3d\022;\n\010rotation\030\002 \001(\0132"
  ").cartographer.transform.proto.Quaternio"
  "nd\"\203\001\n\007Rigid3f\022;\n\013translation\030\001 \001(\0132&.ca"
  "rtographer.transform.proto.Vector3f\022;\n\010r"
  "otation\030\002 \001(\0132).cartographer.transform.p"
  "roto.Quaternionfb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto = {
    false, false, 864, descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftransform_2eproto,
    "cartographer/transform/proto/transform.proto",
    &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_cartographer_2ftransform_2fproto_2ftransform_2eproto::offsets,
    file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto, file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
    file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter() {
  return &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2ftransform_2fproto_2ftransform_2eproto(&descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto);
namespace cartographer {
namespace transform {
namespace proto {

// ===================================================================

class Vector2d::_Internal {
 public:
};

Vector2d::Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Vector2d)
}
Vector2d::Vector2d(const Vector2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector2d)
}

inline void Vector2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2d::GetClassData() const { return &_class_data_; }


void Vector2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2d*>(&to_msg);
  auto& from = static_cast<const Vector2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {
  return true;
}

void Vector2d::InternalSwap(Vector2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2d, _impl_.y_)
      + sizeof(Vector2d::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[0]);
}

// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector2f)
}

inline void Vector2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2f::GetClassData() const { return &_class_data_; }


void Vector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[1]);
}

// ===================================================================

class Vector3d::_Internal {
 public:
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector3d)
}

inline void Vector3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3d::GetClassData() const { return &_class_data_; }


void Vector3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3d*>(&to_msg);
  auto& from = static_cast<const Vector3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, _impl_.z_)
      + sizeof(Vector3d::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[2]);
}

// ===================================================================

class Vector3f::_Internal {
 public:
};

Vector3f::Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector3f)
}

inline void Vector3f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3f::GetClassData() const { return &_class_data_; }


void Vector3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3f*>(&to_msg);
  auto& from = static_cast<const Vector3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector3f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.z_)
      + sizeof(Vector3f::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[3]);
}

// ===================================================================

class Vector4f::_Internal {
 public:
};

Vector4f::Vector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Vector4f)
}
Vector4f::Vector4f(const Vector4f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.t_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.t_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector4f)
}

inline void Vector4f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.t_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4f::~Vector4f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector4f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector4f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.t_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.t_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float t = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector4f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float t = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = this->_internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector4f)
  return target;
}

size_t Vector4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector4f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float t = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = this->_internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4f::GetClassData() const { return &_class_data_; }


void Vector4f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4f*>(&to_msg);
  auto& from = static_cast<const Vector4f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector4f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = from._internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    _this->_internal_set_t(from._internal_t());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4f::CopyFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4f::IsInitialized() const {
  return true;
}

void Vector4f::InternalSwap(Vector4f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4f, _impl_.t_)
      + sizeof(Vector4f::_impl_.t_)
      - PROTOBUF_FIELD_OFFSET(Vector4f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[4]);
}

// ===================================================================

class Quaterniond::_Internal {
 public:
};

Quaterniond::Quaterniond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Quaterniond)
}
Quaterniond::Quaterniond(const Quaterniond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaterniond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Quaterniond)
}

inline void Quaterniond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaterniond::~Quaterniond() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Quaterniond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaterniond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaterniond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaterniond::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Quaterniond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaterniond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaterniond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Quaterniond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Quaterniond)
  return target;
}

size_t Quaterniond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Quaterniond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double w = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaterniond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaterniond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaterniond::GetClassData() const { return &_class_data_; }


void Quaterniond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaterniond*>(&to_msg);
  auto& from = static_cast<const Quaterniond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Quaterniond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = from._internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaterniond::IsInitialized() const {
  return true;
}

void Quaterniond::InternalSwap(Quaterniond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaterniond, _impl_.w_)
      + sizeof(Quaterniond::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaterniond, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaterniond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[5]);
}

// ===================================================================

class Quaternionf::_Internal {
 public:
};

Quaternionf::Quaternionf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Quaternionf)
}
Quaternionf::Quaternionf(const Quaternionf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternionf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Quaternionf)
}

inline void Quaternionf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternionf::~Quaternionf() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Quaternionf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternionf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternionf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternionf::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Quaternionf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternionf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternionf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Quaternionf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Quaternionf)
  return target;
}

size_t Quaternionf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Quaternionf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternionf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternionf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternionf::GetClassData() const { return &_class_data_; }


void Quaternionf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternionf*>(&to_msg);
  auto& from = static_cast<const Quaternionf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Quaternionf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternionf::IsInitialized() const {
  return true;
}

void Quaternionf::InternalSwap(Quaternionf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternionf, _impl_.w_)
      + sizeof(Quaternionf::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternionf, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternionf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[6]);
}

// ===================================================================

class Rigid2d::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector2d& translation(const Rigid2d* msg);
};

const ::cartographer::transform::proto::Vector2d&
Rigid2d::_Internal::translation(const Rigid2d* msg) {
  return *msg->_impl_.translation_;
}
Rigid2d::Rigid2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Rigid2d)
}
Rigid2d::Rigid2d(const Rigid2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rigid2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::cartographer::transform::proto::Vector2d(*from._impl_.translation_);
  }
  _this->_impl_.rotation_ = from._impl_.rotation_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid2d)
}

inline void Rigid2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rigid2d::~Rigid2d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rigid2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
}

void Rigid2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rigid2d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  _impl_.rotation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rigid2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector2d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rigid2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // double rotation = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation = this->_internal_rotation();
  uint64_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid2d)
  return target;
}

size_t Rigid2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // double rotation = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation = this->_internal_rotation();
  uint64_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rigid2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rigid2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rigid2d::GetClassData() const { return &_class_data_; }


void Rigid2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rigid2d*>(&to_msg);
  auto& from = static_cast<const Rigid2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::cartographer::transform::proto::Vector2d::MergeFrom(
        from._internal_translation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation = from._internal_rotation();
  uint64_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rigid2d::CopyFrom(const Rigid2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2d::IsInitialized() const {
  return true;
}

void Rigid2d::InternalSwap(Rigid2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rigid2d, _impl_.rotation_)
      + sizeof(Rigid2d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Rigid2d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rigid2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[7]);
}

// ===================================================================

class Rigid2f::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector2f& translation(const Rigid2f* msg);
};

const ::cartographer::transform::proto::Vector2f&
Rigid2f::_Internal::translation(const Rigid2f* msg) {
  return *msg->_impl_.translation_;
}
Rigid2f::Rigid2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Rigid2f)
}
Rigid2f::Rigid2f(const Rigid2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rigid2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::cartographer::transform::proto::Vector2f(*from._impl_.translation_);
  }
  _this->_impl_.rotation_ = from._impl_.rotation_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid2f)
}

inline void Rigid2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rigid2f::~Rigid2f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rigid2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
}

void Rigid2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rigid2f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  _impl_.rotation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rigid2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector2f translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rigid2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2f translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // float rotation = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid2f)
  return target;
}

size_t Rigid2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2f translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // float rotation = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rigid2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rigid2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rigid2f::GetClassData() const { return &_class_data_; }


void Rigid2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rigid2f*>(&to_msg);
  auto& from = static_cast<const Rigid2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::cartographer::transform::proto::Vector2f::MergeFrom(
        from._internal_translation());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = from._internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rigid2f::CopyFrom(const Rigid2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2f::IsInitialized() const {
  return true;
}

void Rigid2f::InternalSwap(Rigid2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rigid2f, _impl_.rotation_)
      + sizeof(Rigid2f::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Rigid2f, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rigid2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[8]);
}

// ===================================================================

class Rigid3d::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3d& translation(const Rigid3d* msg);
  static const ::cartographer::transform::proto::Quaterniond& rotation(const Rigid3d* msg);
};

const ::cartographer::transform::proto::Vector3d&
Rigid3d::_Internal::translation(const Rigid3d* msg) {
  return *msg->_impl_.translation_;
}
const ::cartographer::transform::proto::Quaterniond&
Rigid3d::_Internal::rotation(const Rigid3d* msg) {
  return *msg->_impl_.rotation_;
}
Rigid3d::Rigid3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Rigid3d)
}
Rigid3d::Rigid3d(const Rigid3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rigid3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::cartographer::transform::proto::Vector3d(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::cartographer::transform::proto::Quaterniond(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid3d)
}

inline void Rigid3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rigid3d::~Rigid3d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rigid3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void Rigid3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rigid3d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rigid3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Quaterniond rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rigid3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .cartographer.transform.proto.Quaterniond rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid3d)
  return target;
}

size_t Rigid3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .cartographer.transform.proto.Quaterniond rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rigid3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rigid3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rigid3d::GetClassData() const { return &_class_data_; }


void Rigid3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rigid3d*>(&to_msg);
  auto& from = static_cast<const Rigid3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::cartographer::transform::proto::Vector3d::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::cartographer::transform::proto::Quaterniond::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rigid3d::CopyFrom(const Rigid3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3d::IsInitialized() const {
  return true;
}

void Rigid3d::InternalSwap(Rigid3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rigid3d, _impl_.rotation_)
      + sizeof(Rigid3d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Rigid3d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rigid3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[9]);
}

// ===================================================================

class Rigid3f::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& translation(const Rigid3f* msg);
  static const ::cartographer::transform::proto::Quaternionf& rotation(const Rigid3f* msg);
};

const ::cartographer::transform::proto::Vector3f&
Rigid3f::_Internal::translation(const Rigid3f* msg) {
  return *msg->_impl_.translation_;
}
const ::cartographer::transform::proto::Quaternionf&
Rigid3f::_Internal::rotation(const Rigid3f* msg) {
  return *msg->_impl_.rotation_;
}
Rigid3f::Rigid3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.Rigid3f)
}
Rigid3f::Rigid3f(const Rigid3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rigid3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::cartographer::transform::proto::Vector3f(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::cartographer::transform::proto::Quaternionf(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid3f)
}

inline void Rigid3f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rigid3f::~Rigid3f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rigid3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void Rigid3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rigid3f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rigid3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Quaternionf rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rigid3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .cartographer.transform.proto.Quaternionf rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid3f)
  return target;
}

size_t Rigid3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .cartographer.transform.proto.Quaternionf rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rigid3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rigid3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rigid3f::GetClassData() const { return &_class_data_; }


void Rigid3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rigid3f*>(&to_msg);
  auto& from = static_cast<const Rigid3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid3f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::cartographer::transform::proto::Vector3f::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::cartographer::transform::proto::Quaternionf::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rigid3f::CopyFrom(const Rigid3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3f::IsInitialized() const {
  return true;
}

void Rigid3f::InternalSwap(Rigid3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rigid3f, _impl_.rotation_)
      + sizeof(Rigid3f::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Rigid3f, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rigid3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftransform_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Vector2d*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Vector2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Vector2d >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Vector2f*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Vector3d*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Vector3f*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Vector3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Vector3f >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Vector4f*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Vector4f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Vector4f >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Quaterniond*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Quaterniond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Quaterniond >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Quaternionf*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Quaternionf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Quaternionf >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Rigid2d*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Rigid2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Rigid2d >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Rigid2f*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Rigid2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Rigid2f >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Rigid3d*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Rigid3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Rigid3d >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::Rigid3f*
Arena::CreateMaybeMessage< ::cartographer::transform::proto::Rigid3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::Rigid3f >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
