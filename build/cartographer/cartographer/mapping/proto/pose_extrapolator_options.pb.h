// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_extrapolator_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/common/proto/ceres_solver_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class ConstantVelocityPoseExtrapolatorOptions;
struct ConstantVelocityPoseExtrapolatorOptionsDefaultTypeInternal;
extern ConstantVelocityPoseExtrapolatorOptionsDefaultTypeInternal _ConstantVelocityPoseExtrapolatorOptions_default_instance_;
class ImuBasedPoseExtrapolatorOptions;
struct ImuBasedPoseExtrapolatorOptionsDefaultTypeInternal;
extern ImuBasedPoseExtrapolatorOptionsDefaultTypeInternal _ImuBasedPoseExtrapolatorOptions_default_instance_;
class PoseExtrapolatorOptions;
struct PoseExtrapolatorOptionsDefaultTypeInternal;
extern PoseExtrapolatorOptionsDefaultTypeInternal _PoseExtrapolatorOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions>(Arena*);
template<> ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions>(Arena*);
template<> ::cartographer::mapping::proto::PoseExtrapolatorOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseExtrapolatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class ConstantVelocityPoseExtrapolatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions) */ {
 public:
  inline ConstantVelocityPoseExtrapolatorOptions() : ConstantVelocityPoseExtrapolatorOptions(nullptr) {}
  ~ConstantVelocityPoseExtrapolatorOptions() override;
  explicit PROTOBUF_CONSTEXPR ConstantVelocityPoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstantVelocityPoseExtrapolatorOptions(const ConstantVelocityPoseExtrapolatorOptions& from);
  ConstantVelocityPoseExtrapolatorOptions(ConstantVelocityPoseExtrapolatorOptions&& from) noexcept
    : ConstantVelocityPoseExtrapolatorOptions() {
    *this = ::std::move(from);
  }

  inline ConstantVelocityPoseExtrapolatorOptions& operator=(const ConstantVelocityPoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstantVelocityPoseExtrapolatorOptions& operator=(ConstantVelocityPoseExtrapolatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstantVelocityPoseExtrapolatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstantVelocityPoseExtrapolatorOptions* internal_default_instance() {
    return reinterpret_cast<const ConstantVelocityPoseExtrapolatorOptions*>(
               &_ConstantVelocityPoseExtrapolatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConstantVelocityPoseExtrapolatorOptions& a, ConstantVelocityPoseExtrapolatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstantVelocityPoseExtrapolatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstantVelocityPoseExtrapolatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstantVelocityPoseExtrapolatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstantVelocityPoseExtrapolatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConstantVelocityPoseExtrapolatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConstantVelocityPoseExtrapolatorOptions& from) {
    ConstantVelocityPoseExtrapolatorOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantVelocityPoseExtrapolatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions";
  }
  protected:
  explicit ConstantVelocityPoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuGravityTimeConstantFieldNumber = 1,
    kPoseQueueDurationFieldNumber = 2,
  };
  // double imu_gravity_time_constant = 1;
  void clear_imu_gravity_time_constant();
  double imu_gravity_time_constant() const;
  void set_imu_gravity_time_constant(double value);
  private:
  double _internal_imu_gravity_time_constant() const;
  void _internal_set_imu_gravity_time_constant(double value);
  public:

  // double pose_queue_duration = 2;
  void clear_pose_queue_duration();
  double pose_queue_duration() const;
  void set_pose_queue_duration(double value);
  private:
  double _internal_pose_queue_duration() const;
  void _internal_set_pose_queue_duration(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double imu_gravity_time_constant_;
    double pose_queue_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
};
// -------------------------------------------------------------------

class ImuBasedPoseExtrapolatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions) */ {
 public:
  inline ImuBasedPoseExtrapolatorOptions() : ImuBasedPoseExtrapolatorOptions(nullptr) {}
  ~ImuBasedPoseExtrapolatorOptions() override;
  explicit PROTOBUF_CONSTEXPR ImuBasedPoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuBasedPoseExtrapolatorOptions(const ImuBasedPoseExtrapolatorOptions& from);
  ImuBasedPoseExtrapolatorOptions(ImuBasedPoseExtrapolatorOptions&& from) noexcept
    : ImuBasedPoseExtrapolatorOptions() {
    *this = ::std::move(from);
  }

  inline ImuBasedPoseExtrapolatorOptions& operator=(const ImuBasedPoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuBasedPoseExtrapolatorOptions& operator=(ImuBasedPoseExtrapolatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuBasedPoseExtrapolatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuBasedPoseExtrapolatorOptions* internal_default_instance() {
    return reinterpret_cast<const ImuBasedPoseExtrapolatorOptions*>(
               &_ImuBasedPoseExtrapolatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImuBasedPoseExtrapolatorOptions& a, ImuBasedPoseExtrapolatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuBasedPoseExtrapolatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuBasedPoseExtrapolatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuBasedPoseExtrapolatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuBasedPoseExtrapolatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuBasedPoseExtrapolatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuBasedPoseExtrapolatorOptions& from) {
    ImuBasedPoseExtrapolatorOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuBasedPoseExtrapolatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions";
  }
  protected:
  explicit ImuBasedPoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverOptionsFieldNumber = 7,
    kPoseQueueDurationFieldNumber = 1,
    kGravityConstantFieldNumber = 2,
    kPoseTranslationWeightFieldNumber = 3,
    kPoseRotationWeightFieldNumber = 4,
    kImuAccelerationWeightFieldNumber = 5,
    kImuRotationWeightFieldNumber = 6,
    kOdometryTranslationWeightFieldNumber = 8,
    kOdometryRotationWeightFieldNumber = 9,
  };
  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  bool has_solver_options() const;
  private:
  bool _internal_has_solver_options() const;
  public:
  void clear_solver_options();
  const ::cartographer::common::proto::CeresSolverOptions& solver_options() const;
  PROTOBUF_NODISCARD ::cartographer::common::proto::CeresSolverOptions* release_solver_options();
  ::cartographer::common::proto::CeresSolverOptions* mutable_solver_options();
  void set_allocated_solver_options(::cartographer::common::proto::CeresSolverOptions* solver_options);
  private:
  const ::cartographer::common::proto::CeresSolverOptions& _internal_solver_options() const;
  ::cartographer::common::proto::CeresSolverOptions* _internal_mutable_solver_options();
  public:
  void unsafe_arena_set_allocated_solver_options(
      ::cartographer::common::proto::CeresSolverOptions* solver_options);
  ::cartographer::common::proto::CeresSolverOptions* unsafe_arena_release_solver_options();

  // double pose_queue_duration = 1;
  void clear_pose_queue_duration();
  double pose_queue_duration() const;
  void set_pose_queue_duration(double value);
  private:
  double _internal_pose_queue_duration() const;
  void _internal_set_pose_queue_duration(double value);
  public:

  // double gravity_constant = 2;
  void clear_gravity_constant();
  double gravity_constant() const;
  void set_gravity_constant(double value);
  private:
  double _internal_gravity_constant() const;
  void _internal_set_gravity_constant(double value);
  public:

  // double pose_translation_weight = 3;
  void clear_pose_translation_weight();
  double pose_translation_weight() const;
  void set_pose_translation_weight(double value);
  private:
  double _internal_pose_translation_weight() const;
  void _internal_set_pose_translation_weight(double value);
  public:

  // double pose_rotation_weight = 4;
  void clear_pose_rotation_weight();
  double pose_rotation_weight() const;
  void set_pose_rotation_weight(double value);
  private:
  double _internal_pose_rotation_weight() const;
  void _internal_set_pose_rotation_weight(double value);
  public:

  // double imu_acceleration_weight = 5;
  void clear_imu_acceleration_weight();
  double imu_acceleration_weight() const;
  void set_imu_acceleration_weight(double value);
  private:
  double _internal_imu_acceleration_weight() const;
  void _internal_set_imu_acceleration_weight(double value);
  public:

  // double imu_rotation_weight = 6;
  void clear_imu_rotation_weight();
  double imu_rotation_weight() const;
  void set_imu_rotation_weight(double value);
  private:
  double _internal_imu_rotation_weight() const;
  void _internal_set_imu_rotation_weight(double value);
  public:

  // double odometry_translation_weight = 8;
  void clear_odometry_translation_weight();
  double odometry_translation_weight() const;
  void set_odometry_translation_weight(double value);
  private:
  double _internal_odometry_translation_weight() const;
  void _internal_set_odometry_translation_weight(double value);
  public:

  // double odometry_rotation_weight = 9;
  void clear_odometry_rotation_weight();
  double odometry_rotation_weight() const;
  void set_odometry_rotation_weight(double value);
  private:
  double _internal_odometry_rotation_weight() const;
  void _internal_set_odometry_rotation_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::common::proto::CeresSolverOptions* solver_options_;
    double pose_queue_duration_;
    double gravity_constant_;
    double pose_translation_weight_;
    double pose_rotation_weight_;
    double imu_acceleration_weight_;
    double imu_rotation_weight_;
    double odometry_translation_weight_;
    double odometry_rotation_weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
};
// -------------------------------------------------------------------

class PoseExtrapolatorOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseExtrapolatorOptions) */ {
 public:
  inline PoseExtrapolatorOptions() : PoseExtrapolatorOptions(nullptr) {}
  ~PoseExtrapolatorOptions() override;
  explicit PROTOBUF_CONSTEXPR PoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseExtrapolatorOptions(const PoseExtrapolatorOptions& from);
  PoseExtrapolatorOptions(PoseExtrapolatorOptions&& from) noexcept
    : PoseExtrapolatorOptions() {
    *this = ::std::move(from);
  }

  inline PoseExtrapolatorOptions& operator=(const PoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseExtrapolatorOptions& operator=(PoseExtrapolatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseExtrapolatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseExtrapolatorOptions* internal_default_instance() {
    return reinterpret_cast<const PoseExtrapolatorOptions*>(
               &_PoseExtrapolatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoseExtrapolatorOptions& a, PoseExtrapolatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseExtrapolatorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseExtrapolatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseExtrapolatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseExtrapolatorOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseExtrapolatorOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseExtrapolatorOptions& from) {
    PoseExtrapolatorOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseExtrapolatorOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseExtrapolatorOptions";
  }
  protected:
  explicit PoseExtrapolatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantVelocityFieldNumber = 2,
    kImuBasedFieldNumber = 3,
    kUseImuBasedFieldNumber = 1,
  };
  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  bool has_constant_velocity() const;
  private:
  bool _internal_has_constant_velocity() const;
  public:
  void clear_constant_velocity();
  const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& constant_velocity() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* release_constant_velocity();
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* mutable_constant_velocity();
  void set_allocated_constant_velocity(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity);
  private:
  const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& _internal_constant_velocity() const;
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* _internal_mutable_constant_velocity();
  public:
  void unsafe_arena_set_allocated_constant_velocity(
      ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity);
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* unsafe_arena_release_constant_velocity();

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  bool has_imu_based() const;
  private:
  bool _internal_has_imu_based() const;
  public:
  void clear_imu_based();
  const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& imu_based() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* release_imu_based();
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* mutable_imu_based();
  void set_allocated_imu_based(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based);
  private:
  const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& _internal_imu_based() const;
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* _internal_mutable_imu_based();
  public:
  void unsafe_arena_set_allocated_imu_based(
      ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based);
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* unsafe_arena_release_imu_based();

  // bool use_imu_based = 1;
  void clear_use_imu_based();
  bool use_imu_based() const;
  void set_use_imu_based(bool value);
  private:
  bool _internal_use_imu_based() const;
  void _internal_set_use_imu_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseExtrapolatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity_;
    ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based_;
    bool use_imu_based_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConstantVelocityPoseExtrapolatorOptions

// double imu_gravity_time_constant = 1;
inline void ConstantVelocityPoseExtrapolatorOptions::clear_imu_gravity_time_constant() {
  _impl_.imu_gravity_time_constant_ = 0;
}
inline double ConstantVelocityPoseExtrapolatorOptions::_internal_imu_gravity_time_constant() const {
  return _impl_.imu_gravity_time_constant_;
}
inline double ConstantVelocityPoseExtrapolatorOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
  return _internal_imu_gravity_time_constant();
}
inline void ConstantVelocityPoseExtrapolatorOptions::_internal_set_imu_gravity_time_constant(double value) {
  
  _impl_.imu_gravity_time_constant_ = value;
}
inline void ConstantVelocityPoseExtrapolatorOptions::set_imu_gravity_time_constant(double value) {
  _internal_set_imu_gravity_time_constant(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
}

// double pose_queue_duration = 2;
inline void ConstantVelocityPoseExtrapolatorOptions::clear_pose_queue_duration() {
  _impl_.pose_queue_duration_ = 0;
}
inline double ConstantVelocityPoseExtrapolatorOptions::_internal_pose_queue_duration() const {
  return _impl_.pose_queue_duration_;
}
inline double ConstantVelocityPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
  return _internal_pose_queue_duration();
}
inline void ConstantVelocityPoseExtrapolatorOptions::_internal_set_pose_queue_duration(double value) {
  
  _impl_.pose_queue_duration_ = value;
}
inline void ConstantVelocityPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  _internal_set_pose_queue_duration(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
}

// -------------------------------------------------------------------

// ImuBasedPoseExtrapolatorOptions

// double pose_queue_duration = 1;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_queue_duration() {
  _impl_.pose_queue_duration_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_pose_queue_duration() const {
  return _impl_.pose_queue_duration_;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
  return _internal_pose_queue_duration();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_pose_queue_duration(double value) {
  
  _impl_.pose_queue_duration_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  _internal_set_pose_queue_duration(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
}

// double gravity_constant = 2;
inline void ImuBasedPoseExtrapolatorOptions::clear_gravity_constant() {
  _impl_.gravity_constant_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_gravity_constant() const {
  return _impl_.gravity_constant_;
}
inline double ImuBasedPoseExtrapolatorOptions::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
  return _internal_gravity_constant();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_gravity_constant(double value) {
  
  _impl_.gravity_constant_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_gravity_constant(double value) {
  _internal_set_gravity_constant(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
}

// double pose_translation_weight = 3;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_translation_weight() {
  _impl_.pose_translation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_pose_translation_weight() const {
  return _impl_.pose_translation_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
  return _internal_pose_translation_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_pose_translation_weight(double value) {
  
  _impl_.pose_translation_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_translation_weight(double value) {
  _internal_set_pose_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
}

// double pose_rotation_weight = 4;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_rotation_weight() {
  _impl_.pose_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_pose_rotation_weight() const {
  return _impl_.pose_rotation_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
  return _internal_pose_rotation_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_pose_rotation_weight(double value) {
  
  _impl_.pose_rotation_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_rotation_weight(double value) {
  _internal_set_pose_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
}

// double imu_acceleration_weight = 5;
inline void ImuBasedPoseExtrapolatorOptions::clear_imu_acceleration_weight() {
  _impl_.imu_acceleration_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_imu_acceleration_weight() const {
  return _impl_.imu_acceleration_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::imu_acceleration_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
  return _internal_imu_acceleration_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_imu_acceleration_weight(double value) {
  
  _impl_.imu_acceleration_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_imu_acceleration_weight(double value) {
  _internal_set_imu_acceleration_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
}

// double imu_rotation_weight = 6;
inline void ImuBasedPoseExtrapolatorOptions::clear_imu_rotation_weight() {
  _impl_.imu_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_imu_rotation_weight() const {
  return _impl_.imu_rotation_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::imu_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
  return _internal_imu_rotation_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_imu_rotation_weight(double value) {
  
  _impl_.imu_rotation_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_imu_rotation_weight(double value) {
  _internal_set_imu_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
}

// .cartographer.common.proto.CeresSolverOptions solver_options = 7;
inline bool ImuBasedPoseExtrapolatorOptions::_internal_has_solver_options() const {
  return this != internal_default_instance() && _impl_.solver_options_ != nullptr;
}
inline bool ImuBasedPoseExtrapolatorOptions::has_solver_options() const {
  return _internal_has_solver_options();
}
inline const ::cartographer::common::proto::CeresSolverOptions& ImuBasedPoseExtrapolatorOptions::_internal_solver_options() const {
  const ::cartographer::common::proto::CeresSolverOptions* p = _impl_.solver_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::common::proto::CeresSolverOptions&>(
      ::cartographer::common::proto::_CeresSolverOptions_default_instance_);
}
inline const ::cartographer::common::proto::CeresSolverOptions& ImuBasedPoseExtrapolatorOptions::solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return _internal_solver_options();
}
inline void ImuBasedPoseExtrapolatorOptions::unsafe_arena_set_allocated_solver_options(
    ::cartographer::common::proto::CeresSolverOptions* solver_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solver_options_);
  }
  _impl_.solver_options_ = solver_options;
  if (solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::release_solver_options() {
  
  ::cartographer::common::proto::CeresSolverOptions* temp = _impl_.solver_options_;
  _impl_.solver_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::unsafe_arena_release_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = _impl_.solver_options_;
  _impl_.solver_options_ = nullptr;
  return temp;
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::_internal_mutable_solver_options() {
  
  if (_impl_.solver_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::common::proto::CeresSolverOptions>(GetArenaForAllocation());
    _impl_.solver_options_ = p;
  }
  return _impl_.solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::mutable_solver_options() {
  ::cartographer::common::proto::CeresSolverOptions* _msg = _internal_mutable_solver_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return _msg;
}
inline void ImuBasedPoseExtrapolatorOptions::set_allocated_solver_options(::cartographer::common::proto::CeresSolverOptions* solver_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solver_options_);
  }
  if (solver_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_options));
    if (message_arena != submessage_arena) {
      solver_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.solver_options_ = solver_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
}

// double odometry_translation_weight = 8;
inline void ImuBasedPoseExtrapolatorOptions::clear_odometry_translation_weight() {
  _impl_.odometry_translation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_odometry_translation_weight() const {
  return _impl_.odometry_translation_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::odometry_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
  return _internal_odometry_translation_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_odometry_translation_weight(double value) {
  
  _impl_.odometry_translation_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_odometry_translation_weight(double value) {
  _internal_set_odometry_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
}

// double odometry_rotation_weight = 9;
inline void ImuBasedPoseExtrapolatorOptions::clear_odometry_rotation_weight() {
  _impl_.odometry_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::_internal_odometry_rotation_weight() const {
  return _impl_.odometry_rotation_weight_;
}
inline double ImuBasedPoseExtrapolatorOptions::odometry_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
  return _internal_odometry_rotation_weight();
}
inline void ImuBasedPoseExtrapolatorOptions::_internal_set_odometry_rotation_weight(double value) {
  
  _impl_.odometry_rotation_weight_ = value;
}
inline void ImuBasedPoseExtrapolatorOptions::set_odometry_rotation_weight(double value) {
  _internal_set_odometry_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
}

// -------------------------------------------------------------------

// PoseExtrapolatorOptions

// bool use_imu_based = 1;
inline void PoseExtrapolatorOptions::clear_use_imu_based() {
  _impl_.use_imu_based_ = false;
}
inline bool PoseExtrapolatorOptions::_internal_use_imu_based() const {
  return _impl_.use_imu_based_;
}
inline bool PoseExtrapolatorOptions::use_imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
  return _internal_use_imu_based();
}
inline void PoseExtrapolatorOptions::_internal_set_use_imu_based(bool value) {
  
  _impl_.use_imu_based_ = value;
}
inline void PoseExtrapolatorOptions::set_use_imu_based(bool value) {
  _internal_set_use_imu_based(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
}

// .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
inline bool PoseExtrapolatorOptions::_internal_has_constant_velocity() const {
  return this != internal_default_instance() && _impl_.constant_velocity_ != nullptr;
}
inline bool PoseExtrapolatorOptions::has_constant_velocity() const {
  return _internal_has_constant_velocity();
}
inline void PoseExtrapolatorOptions::clear_constant_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.constant_velocity_ != nullptr) {
    delete _impl_.constant_velocity_;
  }
  _impl_.constant_velocity_ = nullptr;
}
inline const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& PoseExtrapolatorOptions::_internal_constant_velocity() const {
  const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* p = _impl_.constant_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions&>(
      ::cartographer::mapping::proto::_ConstantVelocityPoseExtrapolatorOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& PoseExtrapolatorOptions::constant_velocity() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return _internal_constant_velocity();
}
inline void PoseExtrapolatorOptions::unsafe_arena_set_allocated_constant_velocity(
    ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constant_velocity_);
  }
  _impl_.constant_velocity_ = constant_velocity;
  if (constant_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_constant_velocity() {
  
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* temp = _impl_.constant_velocity_;
  _impl_.constant_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::unsafe_arena_release_constant_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* temp = _impl_.constant_velocity_;
  _impl_.constant_velocity_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::_internal_mutable_constant_velocity() {
  
  if (_impl_.constant_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions>(GetArenaForAllocation());
    _impl_.constant_velocity_ = p;
  }
  return _impl_.constant_velocity_;
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_constant_velocity() {
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* _msg = _internal_mutable_constant_velocity();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return _msg;
}
inline void PoseExtrapolatorOptions::set_allocated_constant_velocity(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.constant_velocity_;
  }
  if (constant_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constant_velocity);
    if (message_arena != submessage_arena) {
      constant_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.constant_velocity_ = constant_velocity;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
}

// .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
inline bool PoseExtrapolatorOptions::_internal_has_imu_based() const {
  return this != internal_default_instance() && _impl_.imu_based_ != nullptr;
}
inline bool PoseExtrapolatorOptions::has_imu_based() const {
  return _internal_has_imu_based();
}
inline void PoseExtrapolatorOptions::clear_imu_based() {
  if (GetArenaForAllocation() == nullptr && _impl_.imu_based_ != nullptr) {
    delete _impl_.imu_based_;
  }
  _impl_.imu_based_ = nullptr;
}
inline const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& PoseExtrapolatorOptions::_internal_imu_based() const {
  const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* p = _impl_.imu_based_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions&>(
      ::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& PoseExtrapolatorOptions::imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return _internal_imu_based();
}
inline void PoseExtrapolatorOptions::unsafe_arena_set_allocated_imu_based(
    ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_based_);
  }
  _impl_.imu_based_ = imu_based;
  if (imu_based) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_imu_based() {
  
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* temp = _impl_.imu_based_;
  _impl_.imu_based_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::unsafe_arena_release_imu_based() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* temp = _impl_.imu_based_;
  _impl_.imu_based_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::_internal_mutable_imu_based() {
  
  if (_impl_.imu_based_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions>(GetArenaForAllocation());
    _impl_.imu_based_ = p;
  }
  return _impl_.imu_based_;
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_imu_based() {
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* _msg = _internal_mutable_imu_based();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return _msg;
}
inline void PoseExtrapolatorOptions::set_allocated_imu_based(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.imu_based_;
  }
  if (imu_based) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu_based);
    if (message_arena != submessage_arena) {
      imu_based = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_based, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.imu_based_ = imu_based;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto
