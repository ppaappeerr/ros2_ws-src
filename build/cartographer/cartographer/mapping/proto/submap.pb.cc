// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap.proto

#include "cartographer/mapping/proto/submap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace proto {
PROTOBUF_CONSTEXPR Submap2D::Submap2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_pose_)*/nullptr
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_.num_range_data_)*/0
  , /*decltype(_impl_.finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Submap2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Submap2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Submap2DDefaultTypeInternal() {}
  union {
    Submap2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Submap2DDefaultTypeInternal _Submap2D_default_instance_;
PROTOBUF_CONSTEXPR Submap3D::Submap3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotational_scan_matcher_histogram_)*/{}
  , /*decltype(_impl_.local_pose_)*/nullptr
  , /*decltype(_impl_.high_resolution_hybrid_grid_)*/nullptr
  , /*decltype(_impl_.low_resolution_hybrid_grid_)*/nullptr
  , /*decltype(_impl_.num_range_data_)*/0
  , /*decltype(_impl_.finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Submap3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Submap3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Submap3DDefaultTypeInternal() {}
  union {
    Submap3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Submap3DDefaultTypeInternal _Submap3D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fsubmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _impl_.local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _impl_.num_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _impl_.finished_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _impl_.grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.num_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.finished_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.high_resolution_hybrid_grid_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.low_resolution_hybrid_grid_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _impl_.rotational_scan_matcher_histogram_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::Submap2D)},
  { 10, -1, -1, sizeof(::cartographer::mapping::proto::Submap3D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::proto::_Submap2D_default_instance_._instance,
  &::cartographer::mapping::proto::_Submap3D_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'cartographer/mapping/proto/submap.prot"
  "o\022\032cartographer.mapping.proto\032(cartograp"
  "her/mapping/proto/grid_2d.proto\032,cartogr"
  "apher/mapping/proto/hybrid_grid.proto\032,c"
  "artographer/transform/proto/transform.pr"
  "oto\"\241\001\n\010Submap2D\0229\n\nlocal_pose\030\001 \001(\0132%.c"
  "artographer.transform.proto.Rigid3d\022\026\n\016n"
  "um_range_data\030\002 \001(\005\022\020\n\010finished\030\003 \001(\010\0220\n"
  "\004grid\030\004 \001(\0132\".cartographer.mapping.proto"
  ".Grid2D\"\263\002\n\010Submap3D\0229\n\nlocal_pose\030\001 \001(\013"
  "2%.cartographer.transform.proto.Rigid3d\022"
  "\026\n\016num_range_data\030\002 \001(\005\022\020\n\010finished\030\003 \001("
  "\010\022K\n\033high_resolution_hybrid_grid\030\004 \001(\0132&"
  ".cartographer.mapping.proto.HybridGrid\022J"
  "\n\032low_resolution_hybrid_grid\030\005 \001(\0132&.car"
  "tographer.mapping.proto.HybridGrid\022)\n!ro"
  "tational_scan_matcher_histogram\030\006 \003(\002b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_deps[3] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto = {
    false, false, 685, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_2eproto,
    "cartographer/mapping/proto/submap.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fsubmap_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fsubmap_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class Submap2D::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const Submap2D* msg);
  static const ::cartographer::mapping::proto::Grid2D& grid(const Submap2D* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Submap2D::_Internal::local_pose(const Submap2D* msg) {
  return *msg->_impl_.local_pose_;
}
const ::cartographer::mapping::proto::Grid2D&
Submap2D::_Internal::grid(const Submap2D* msg) {
  return *msg->_impl_.grid_;
}
void Submap2D::clear_local_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_pose_ != nullptr) {
    delete _impl_.local_pose_;
  }
  _impl_.local_pose_ = nullptr;
}
void Submap2D::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
Submap2D::Submap2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.Submap2D)
}
Submap2D::Submap2D(const Submap2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Submap2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_pose_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.num_range_data_){}
    , decltype(_impl_.finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_pose()) {
    _this->_impl_.local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.local_pose_);
  }
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::cartographer::mapping::proto::Grid2D(*from._impl_.grid_);
  }
  ::memcpy(&_impl_.num_range_data_, &from._impl_.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finished_) -
    reinterpret_cast<char*>(&_impl_.num_range_data_)) + sizeof(_impl_.finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap2D)
}

inline void Submap2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_pose_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.num_range_data_){0}
    , decltype(_impl_.finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Submap2D::~Submap2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Submap2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.local_pose_;
  if (this != internal_default_instance()) delete _impl_.grid_;
}

void Submap2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Submap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.local_pose_ != nullptr) {
    delete _impl_.local_pose_;
  }
  _impl_.local_pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  ::memset(&_impl_.num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.finished_) -
      reinterpret_cast<char*>(&_impl_.num_range_data_)) + sizeof(_impl_.finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Submap2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_range_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_range_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.Grid2D grid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Submap2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->_internal_has_local_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_pose(this),
        _Internal::local_pose(this).GetCachedSize(), target, stream);
  }

  // int32 num_range_data = 2;
  if (this->_internal_num_range_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_range_data(), target);
  }

  // bool finished = 3;
  if (this->_internal_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_finished(), target);
  }

  // .cartographer.mapping.proto.Grid2D grid = 4;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap2D)
  return target;
}

size_t Submap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->_internal_has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_pose_);
  }

  // .cartographer.mapping.proto.Grid2D grid = 4;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  // int32 num_range_data = 2;
  if (this->_internal_num_range_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_range_data());
  }

  // bool finished = 3;
  if (this->_internal_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Submap2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Submap2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Submap2D::GetClassData() const { return &_class_data_; }


void Submap2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Submap2D*>(&to_msg);
  auto& from = static_cast<const Submap2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_local_pose()) {
    _this->_internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_local_pose());
  }
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::cartographer::mapping::proto::Grid2D::MergeFrom(
        from._internal_grid());
  }
  if (from._internal_num_range_data() != 0) {
    _this->_internal_set_num_range_data(from._internal_num_range_data());
  }
  if (from._internal_finished() != 0) {
    _this->_internal_set_finished(from._internal_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Submap2D::CopyFrom(const Submap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap2D::IsInitialized() const {
  return true;
}

void Submap2D::InternalSwap(Submap2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Submap2D, _impl_.finished_)
      + sizeof(Submap2D::_impl_.finished_)
      - PROTOBUF_FIELD_OFFSET(Submap2D, _impl_.local_pose_)>(
          reinterpret_cast<char*>(&_impl_.local_pose_),
          reinterpret_cast<char*>(&other->_impl_.local_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Submap2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_2eproto[0]);
}

// ===================================================================

class Submap3D::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const Submap3D* msg);
  static const ::cartographer::mapping::proto::HybridGrid& high_resolution_hybrid_grid(const Submap3D* msg);
  static const ::cartographer::mapping::proto::HybridGrid& low_resolution_hybrid_grid(const Submap3D* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Submap3D::_Internal::local_pose(const Submap3D* msg) {
  return *msg->_impl_.local_pose_;
}
const ::cartographer::mapping::proto::HybridGrid&
Submap3D::_Internal::high_resolution_hybrid_grid(const Submap3D* msg) {
  return *msg->_impl_.high_resolution_hybrid_grid_;
}
const ::cartographer::mapping::proto::HybridGrid&
Submap3D::_Internal::low_resolution_hybrid_grid(const Submap3D* msg) {
  return *msg->_impl_.low_resolution_hybrid_grid_;
}
void Submap3D::clear_local_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_pose_ != nullptr) {
    delete _impl_.local_pose_;
  }
  _impl_.local_pose_ = nullptr;
}
void Submap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_resolution_hybrid_grid_ != nullptr) {
    delete _impl_.high_resolution_hybrid_grid_;
  }
  _impl_.high_resolution_hybrid_grid_ = nullptr;
}
void Submap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_resolution_hybrid_grid_ != nullptr) {
    delete _impl_.low_resolution_hybrid_grid_;
  }
  _impl_.low_resolution_hybrid_grid_ = nullptr;
}
Submap3D::Submap3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.Submap3D)
}
Submap3D::Submap3D(const Submap3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Submap3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotational_scan_matcher_histogram_){from._impl_.rotational_scan_matcher_histogram_}
    , decltype(_impl_.local_pose_){nullptr}
    , decltype(_impl_.high_resolution_hybrid_grid_){nullptr}
    , decltype(_impl_.low_resolution_hybrid_grid_){nullptr}
    , decltype(_impl_.num_range_data_){}
    , decltype(_impl_.finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_pose()) {
    _this->_impl_.local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.local_pose_);
  }
  if (from._internal_has_high_resolution_hybrid_grid()) {
    _this->_impl_.high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from._impl_.high_resolution_hybrid_grid_);
  }
  if (from._internal_has_low_resolution_hybrid_grid()) {
    _this->_impl_.low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from._impl_.low_resolution_hybrid_grid_);
  }
  ::memcpy(&_impl_.num_range_data_, &from._impl_.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finished_) -
    reinterpret_cast<char*>(&_impl_.num_range_data_)) + sizeof(_impl_.finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap3D)
}

inline void Submap3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotational_scan_matcher_histogram_){arena}
    , decltype(_impl_.local_pose_){nullptr}
    , decltype(_impl_.high_resolution_hybrid_grid_){nullptr}
    , decltype(_impl_.low_resolution_hybrid_grid_){nullptr}
    , decltype(_impl_.num_range_data_){0}
    , decltype(_impl_.finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Submap3D::~Submap3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Submap3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rotational_scan_matcher_histogram_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.local_pose_;
  if (this != internal_default_instance()) delete _impl_.high_resolution_hybrid_grid_;
  if (this != internal_default_instance()) delete _impl_.low_resolution_hybrid_grid_;
}

void Submap3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Submap3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rotational_scan_matcher_histogram_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.local_pose_ != nullptr) {
    delete _impl_.local_pose_;
  }
  _impl_.local_pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.high_resolution_hybrid_grid_ != nullptr) {
    delete _impl_.high_resolution_hybrid_grid_;
  }
  _impl_.high_resolution_hybrid_grid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.low_resolution_hybrid_grid_ != nullptr) {
    delete _impl_.low_resolution_hybrid_grid_;
  }
  _impl_.low_resolution_hybrid_grid_ = nullptr;
  ::memset(&_impl_.num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.finished_) -
      reinterpret_cast<char*>(&_impl_.num_range_data_)) + sizeof(_impl_.finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Submap3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_range_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_range_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_resolution_hybrid_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_resolution_hybrid_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float rotational_scan_matcher_histogram = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotational_scan_matcher_histogram(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_rotational_scan_matcher_histogram(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Submap3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->_internal_has_local_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_pose(this),
        _Internal::local_pose(this).GetCachedSize(), target, stream);
  }

  // int32 num_range_data = 2;
  if (this->_internal_num_range_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_range_data(), target);
  }

  // bool finished = 3;
  if (this->_internal_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_finished(), target);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->_internal_has_high_resolution_hybrid_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::high_resolution_hybrid_grid(this),
        _Internal::high_resolution_hybrid_grid(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->_internal_has_low_resolution_hybrid_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::low_resolution_hybrid_grid(this),
        _Internal::low_resolution_hybrid_grid(this).GetCachedSize(), target, stream);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  if (this->_internal_rotational_scan_matcher_histogram_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rotational_scan_matcher_histogram(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap3D)
  return target;
}

size_t Submap3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotational_scan_matcher_histogram = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotational_scan_matcher_histogram_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->_internal_has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_pose_);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->_internal_has_high_resolution_hybrid_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_resolution_hybrid_grid_);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->_internal_has_low_resolution_hybrid_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_resolution_hybrid_grid_);
  }

  // int32 num_range_data = 2;
  if (this->_internal_num_range_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_range_data());
  }

  // bool finished = 3;
  if (this->_internal_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Submap3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Submap3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Submap3D::GetClassData() const { return &_class_data_; }


void Submap3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Submap3D*>(&to_msg);
  auto& from = static_cast<const Submap3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rotational_scan_matcher_histogram_.MergeFrom(from._impl_.rotational_scan_matcher_histogram_);
  if (from._internal_has_local_pose()) {
    _this->_internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_local_pose());
  }
  if (from._internal_has_high_resolution_hybrid_grid()) {
    _this->_internal_mutable_high_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(
        from._internal_high_resolution_hybrid_grid());
  }
  if (from._internal_has_low_resolution_hybrid_grid()) {
    _this->_internal_mutable_low_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(
        from._internal_low_resolution_hybrid_grid());
  }
  if (from._internal_num_range_data() != 0) {
    _this->_internal_set_num_range_data(from._internal_num_range_data());
  }
  if (from._internal_finished() != 0) {
    _this->_internal_set_finished(from._internal_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Submap3D::CopyFrom(const Submap3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap3D::IsInitialized() const {
  return true;
}

void Submap3D::InternalSwap(Submap3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rotational_scan_matcher_histogram_.InternalSwap(&other->_impl_.rotational_scan_matcher_histogram_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Submap3D, _impl_.finished_)
      + sizeof(Submap3D::_impl_.finished_)
      - PROTOBUF_FIELD_OFFSET(Submap3D, _impl_.local_pose_)>(
          reinterpret_cast<char*>(&_impl_.local_pose_),
          reinterpret_cast<char*>(&other->_impl_.local_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Submap3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Submap2D*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Submap2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::Submap2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Submap3D*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Submap3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::Submap3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
