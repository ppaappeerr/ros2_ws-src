// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_limits.proto

#include "cartographer/mapping/proto/map_limits.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace proto {
PROTOBUF_CONSTEXPR MapLimits::MapLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_)*/nullptr
  , /*decltype(_impl_.cell_limits_)*/nullptr
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapLimitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapLimitsDefaultTypeInternal() {}
  union {
    MapLimits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapLimitsDefaultTypeInternal _MapLimits_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _impl_.cell_limits_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::MapLimits)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::proto::_MapLimits_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+cartographer/mapping/proto/map_limits."
  "proto\022\032cartographer.mapping.proto\032/carto"
  "grapher/mapping/proto/cell_limits_2d.pro"
  "to\032,cartographer/transform/proto/transfo"
  "rm.proto\"\221\001\n\tMapLimits\022\022\n\nresolution\030\001 \001"
  "(\001\0223\n\003max\030\002 \001(\0132&.cartographer.transform"
  ".proto.Vector2d\022;\n\013cell_limits\030\003 \001(\0132&.c"
  "artographer.mapping.proto.CellLimitsb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fcell_5flimits_5f2d_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = {
    false, false, 324, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto,
    "cartographer/mapping/proto/map_limits.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class MapLimits::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector2d& max(const MapLimits* msg);
  static const ::cartographer::mapping::proto::CellLimits& cell_limits(const MapLimits* msg);
};

const ::cartographer::transform::proto::Vector2d&
MapLimits::_Internal::max(const MapLimits* msg) {
  return *msg->_impl_.max_;
}
const ::cartographer::mapping::proto::CellLimits&
MapLimits::_Internal::cell_limits(const MapLimits* msg) {
  return *msg->_impl_.cell_limits_;
}
void MapLimits::clear_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
}
void MapLimits::clear_cell_limits() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_limits_ != nullptr) {
    delete _impl_.cell_limits_;
  }
  _impl_.cell_limits_ = nullptr;
}
MapLimits::MapLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.MapLimits)
}
MapLimits::MapLimits(const MapLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapLimits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_){nullptr}
    , decltype(_impl_.cell_limits_){nullptr}
    , decltype(_impl_.resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max()) {
    _this->_impl_.max_ = new ::cartographer::transform::proto::Vector2d(*from._impl_.max_);
  }
  if (from._internal_has_cell_limits()) {
    _this->_impl_.cell_limits_ = new ::cartographer::mapping::proto::CellLimits(*from._impl_.cell_limits_);
  }
  _this->_impl_.resolution_ = from._impl_.resolution_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapLimits)
}

inline void MapLimits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_){nullptr}
    , decltype(_impl_.cell_limits_){nullptr}
    , decltype(_impl_.resolution_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapLimits::~MapLimits() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.max_;
  if (this != internal_default_instance()) delete _impl_.cell_limits_;
}

void MapLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapLimits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cell_limits_ != nullptr) {
    delete _impl_.cell_limits_;
  }
  _impl_.cell_limits_ = nullptr;
  _impl_.resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector2d max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.CellLimits cell_limits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapLimits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapLimits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_resolution(), target);
  }

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->_internal_has_cell_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_limits(this),
        _Internal::cell_limits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapLimits)
  return target;
}

size_t MapLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapLimits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->_internal_has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->_internal_has_cell_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_limits_);
  }

  // double resolution = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapLimits::GetClassData() const { return &_class_data_; }


void MapLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapLimits*>(&to_msg);
  auto& from = static_cast<const MapLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapLimits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max()) {
    _this->_internal_mutable_max()->::cartographer::transform::proto::Vector2d::MergeFrom(
        from._internal_max());
  }
  if (from._internal_has_cell_limits()) {
    _this->_internal_mutable_cell_limits()->::cartographer::mapping::proto::CellLimits::MergeFrom(
        from._internal_cell_limits());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapLimits::CopyFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLimits::IsInitialized() const {
  return true;
}

void MapLimits::InternalSwap(MapLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapLimits, _impl_.resolution_)
      + sizeof(MapLimits::_impl_.resolution_)
      - PROTOBUF_FIELD_OFFSET(MapLimits, _impl_.max_)>(
          reinterpret_cast<char*>(&_impl_.max_),
          reinterpret_cast<char*>(&other->_impl_.max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MapLimits*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MapLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::MapLimits >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
