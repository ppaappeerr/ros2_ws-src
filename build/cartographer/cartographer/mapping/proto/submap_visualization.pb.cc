// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#include "cartographer/mapping/proto/submap_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace proto {
PROTOBUF_CONSTEXPR SubmapList_SubmapEntry::SubmapList_SubmapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.submap_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapList_SubmapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapList_SubmapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapList_SubmapEntryDefaultTypeInternal() {}
  union {
    SubmapList_SubmapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
PROTOBUF_CONSTEXPR SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.submap_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapList_TrajectorySubmapListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapList_TrajectorySubmapListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapList_TrajectorySubmapListDefaultTypeInternal() {}
  union {
    SubmapList_TrajectorySubmapList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
PROTOBUF_CONSTEXPR SubmapList::SubmapList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trajectory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapListDefaultTypeInternal() {}
  union {
    SubmapList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapListDefaultTypeInternal _SubmapList_default_instance_;
PROTOBUF_CONSTEXPR SubmapQuery_Request::SubmapQuery_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.submap_index_)*/0
  , /*decltype(_impl_.trajectory_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQuery_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQuery_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQuery_RequestDefaultTypeInternal() {}
  union {
    SubmapQuery_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
PROTOBUF_CONSTEXPR SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cells_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slice_pose_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQuery_Response_SubmapTextureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQuery_Response_SubmapTextureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQuery_Response_SubmapTextureDefaultTypeInternal() {}
  union {
    SubmapQuery_Response_SubmapTexture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
PROTOBUF_CONSTEXPR SubmapQuery_Response::SubmapQuery_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.textures_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.submap_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQuery_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQuery_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQuery_ResponseDefaultTypeInternal() {}
  union {
    SubmapQuery_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
PROTOBUF_CONSTEXPR SubmapQuery::SubmapQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQueryDefaultTypeInternal() {}
  union {
    SubmapQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, _impl_.submap_version_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList, _impl_.submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList, _impl_.trajectory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, _impl_.submap_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, _impl_.trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _impl_.cells_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _impl_.slice_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, _impl_.submap_version_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, _impl_.textures_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::SubmapList_SubmapEntry)},
  { 8, -1, -1, sizeof(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList)},
  { 15, -1, -1, sizeof(::cartographer::mapping::proto::SubmapList)},
  { 22, -1, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Request)},
  { 30, -1, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture)},
  { 41, -1, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Response)},
  { 50, -1, -1, sizeof(::cartographer::mapping::proto::SubmapQuery)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::proto::_SubmapList_SubmapEntry_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapList_TrajectorySubmapList_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapList_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapQuery_Request_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapQuery_Response_SubmapTexture_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapQuery_Response_default_instance_._instance,
  &::cartographer::mapping::proto::_SubmapQuery_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5cartographer/mapping/proto/submap_visu"
  "alization.proto\022\032cartographer.mapping.pr"
  "oto\032,cartographer/transform/proto/transf"
  "orm.proto\"\225\002\n\nSubmapList\022O\n\ntrajectory\030\002"
  " \003(\0132;.cartographer.mapping.proto.Submap"
  "List.TrajectorySubmapList\032Z\n\013SubmapEntry"
  "\022\026\n\016submap_version\030\001 \001(\005\0223\n\004pose\030\003 \001(\0132%"
  ".cartographer.transform.proto.Rigid3d\032Z\n"
  "\024TrajectorySubmapList\022B\n\006submap\030\001 \003(\01322."
  "cartographer.mapping.proto.SubmapList.Su"
  "bmapEntry\"\350\003\n\013SubmapQuery\022@\n\007request\030\001 \001"
  "(\0132/.cartographer.mapping.proto.SubmapQu"
  "ery.Request\022B\n\010response\030\002 \001(\01320.cartogra"
  "pher.mapping.proto.SubmapQuery.Response\032"
  "6\n\007Request\022\024\n\014submap_index\030\001 \001(\005\022\025\n\rtraj"
  "ectory_id\030\002 \001(\005\032\232\002\n\010Response\022\026\n\016submap_v"
  "ersion\030\002 \001(\005\022P\n\010textures\030\n \003(\0132>.cartogr"
  "apher.mapping.proto.SubmapQuery.Response"
  ".SubmapTexture\022\025\n\rerror_message\030\010 \001(\t\032\214\001"
  "\n\rSubmapTexture\022\r\n\005cells\030\001 \001(\014\022\r\n\005width\030"
  "\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\022\n\nresolution\030\004 \001("
  "\001\0229\n\nslice_pose\030\005 \001(\0132%.cartographer.tra"
  "nsform.proto.Rigid3db\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = {
    false, false, 908, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto,
    "cartographer/mapping/proto/submap_visualization.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class SubmapList_SubmapEntry::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const SubmapList_SubmapEntry* msg);
};

const ::cartographer::transform::proto::Rigid3d&
SubmapList_SubmapEntry::_Internal::pose(const SubmapList_SubmapEntry* msg) {
  return *msg->_impl_.pose_;
}
void SubmapList_SubmapEntry::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
SubmapList_SubmapEntry::SubmapList_SubmapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}
SubmapList_SubmapEntry::SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapList_SubmapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.submap_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.pose_);
  }
  _this->_impl_.submap_version_ = from._impl_.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

inline void SubmapList_SubmapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.submap_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapList_SubmapEntry::~SubmapList_SubmapEntry() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapList_SubmapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void SubmapList_SubmapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapList_SubmapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  _impl_.submap_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapList_SubmapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 submap_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapList_SubmapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 1;
  if (this->_internal_submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_submap_version(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return target;
}

size_t SubmapList_SubmapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // int32 submap_version = 1;
  if (this->_internal_submap_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapList_SubmapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapList_SubmapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapList_SubmapEntry::GetClassData() const { return &_class_data_; }


void SubmapList_SubmapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapList_SubmapEntry*>(&to_msg);
  auto& from = static_cast<const SubmapList_SubmapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_submap_version() != 0) {
    _this->_internal_set_submap_version(from._internal_submap_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapList_SubmapEntry::CopyFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_SubmapEntry::IsInitialized() const {
  return true;
}

void SubmapList_SubmapEntry::InternalSwap(SubmapList_SubmapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapList_SubmapEntry, _impl_.submap_version_)
      + sizeof(SubmapList_SubmapEntry::_impl_.submap_version_)
      - PROTOBUF_FIELD_OFFSET(SubmapList_SubmapEntry, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList_SubmapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[0]);
}

// ===================================================================

class SubmapList_TrajectorySubmapList::_Internal {
 public:
};

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}
SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapList_TrajectorySubmapList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.submap_){from._impl_.submap_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

inline void SubmapList_TrajectorySubmapList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.submap_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapList_TrajectorySubmapList::~SubmapList_TrajectorySubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapList_TrajectorySubmapList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.submap_.~RepeatedPtrField();
}

void SubmapList_TrajectorySubmapList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapList_TrajectorySubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.submap_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapList_TrajectorySubmapList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapList_TrajectorySubmapList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_submap_size()); i < n; i++) {
    const auto& repfield = this->_internal_submap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return target;
}

size_t SubmapList_TrajectorySubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  total_size += 1UL * this->_internal_submap_size();
  for (const auto& msg : this->_impl_.submap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapList_TrajectorySubmapList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapList_TrajectorySubmapList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapList_TrajectorySubmapList::GetClassData() const { return &_class_data_; }


void SubmapList_TrajectorySubmapList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapList_TrajectorySubmapList*>(&to_msg);
  auto& from = static_cast<const SubmapList_TrajectorySubmapList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.submap_.MergeFrom(from._impl_.submap_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_TrajectorySubmapList::IsInitialized() const {
  return true;
}

void SubmapList_TrajectorySubmapList::InternalSwap(SubmapList_TrajectorySubmapList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.submap_.InternalSwap(&other->_impl_.submap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList_TrajectorySubmapList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[1]);
}

// ===================================================================

class SubmapList::_Internal {
 public:
};

SubmapList::SubmapList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapList)
}
SubmapList::SubmapList(const SubmapList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trajectory_){from._impl_.trajectory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList)
}

inline void SubmapList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trajectory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapList::~SubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_.~RepeatedPtrField();
}

void SubmapList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList)
  return target;
}

size_t SubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->_impl_.trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapList::GetClassData() const { return &_class_data_; }


void SubmapList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapList*>(&to_msg);
  auto& from = static_cast<const SubmapList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trajectory_.MergeFrom(from._impl_.trajectory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapList::CopyFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList::IsInitialized() const {
  return true;
}

void SubmapList::InternalSwap(SubmapList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trajectory_.InternalSwap(&other->_impl_.trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[2]);
}

// ===================================================================

class SubmapQuery_Request::_Internal {
 public:
};

SubmapQuery_Request::SubmapQuery_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapQuery.Request)
}
SubmapQuery_Request::SubmapQuery_Request(const SubmapQuery_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQuery_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.submap_index_){}
    , decltype(_impl_.trajectory_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.submap_index_, &from._impl_.submap_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trajectory_id_) -
    reinterpret_cast<char*>(&_impl_.submap_index_)) + sizeof(_impl_.trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Request)
}

inline void SubmapQuery_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.submap_index_){0}
    , decltype(_impl_.trajectory_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapQuery_Request::~SubmapQuery_Request() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQuery_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubmapQuery_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.submap_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trajectory_id_) -
      reinterpret_cast<char*>(&_impl_.submap_index_)) + sizeof(_impl_.trajectory_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQuery_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 submap_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trajectory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQuery_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->_internal_submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_submap_index(), target);
  }

  // int32 trajectory_id = 2;
  if (this->_internal_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Request)
  return target;
}

size_t SubmapQuery_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->_internal_submap_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_index());
  }

  // int32 trajectory_id = 2;
  if (this->_internal_trajectory_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trajectory_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQuery_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQuery_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQuery_Request::GetClassData() const { return &_class_data_; }


void SubmapQuery_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQuery_Request*>(&to_msg);
  auto& from = static_cast<const SubmapQuery_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_submap_index() != 0) {
    _this->_internal_set_submap_index(from._internal_submap_index());
  }
  if (from._internal_trajectory_id() != 0) {
    _this->_internal_set_trajectory_id(from._internal_trajectory_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQuery_Request::CopyFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Request::IsInitialized() const {
  return true;
}

void SubmapQuery_Request::InternalSwap(SubmapQuery_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapQuery_Request, _impl_.trajectory_id_)
      + sizeof(SubmapQuery_Request::_impl_.trajectory_id_)
      - PROTOBUF_FIELD_OFFSET(SubmapQuery_Request, _impl_.submap_index_)>(
          reinterpret_cast<char*>(&_impl_.submap_index_),
          reinterpret_cast<char*>(&other->_impl_.submap_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[3]);
}

// ===================================================================

class SubmapQuery_Response_SubmapTexture::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& slice_pose(const SubmapQuery_Response_SubmapTexture* msg);
};

const ::cartographer::transform::proto::Rigid3d&
SubmapQuery_Response_SubmapTexture::_Internal::slice_pose(const SubmapQuery_Response_SubmapTexture* msg) {
  return *msg->_impl_.slice_pose_;
}
void SubmapQuery_Response_SubmapTexture::clear_slice_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.slice_pose_ != nullptr) {
    delete _impl_.slice_pose_;
  }
  _impl_.slice_pose_ = nullptr;
}
SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}
SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQuery_Response_SubmapTexture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){}
    , decltype(_impl_.slice_pose_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cells_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cells_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cells().empty()) {
    _this->_impl_.cells_.Set(from._internal_cells(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_slice_pose()) {
    _this->_impl_.slice_pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.slice_pose_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolution_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.resolution_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

inline void SubmapQuery_Response_SubmapTexture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){}
    , decltype(_impl_.slice_pose_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.resolution_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cells_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cells_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmapQuery_Response_SubmapTexture::~SubmapQuery_Response_SubmapTexture() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQuery_Response_SubmapTexture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cells_.Destroy();
  if (this != internal_default_instance()) delete _impl_.slice_pose_;
}

void SubmapQuery_Response_SubmapTexture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQuery_Response_SubmapTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cells_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.slice_pose_ != nullptr) {
    delete _impl_.slice_pose_;
  }
  _impl_.slice_pose_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resolution_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.resolution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQuery_Response_SubmapTexture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cells();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d slice_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQuery_Response_SubmapTexture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cells = 1;
  if (!this->_internal_cells().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cells(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // double resolution = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_resolution(), target);
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->_internal_has_slice_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::slice_pose(this),
        _Internal::slice_pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return target;
}

size_t SubmapQuery_Response_SubmapTexture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cells = 1;
  if (!this->_internal_cells().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cells());
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->_internal_has_slice_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slice_pose_);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // double resolution = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQuery_Response_SubmapTexture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQuery_Response_SubmapTexture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQuery_Response_SubmapTexture::GetClassData() const { return &_class_data_; }


void SubmapQuery_Response_SubmapTexture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQuery_Response_SubmapTexture*>(&to_msg);
  auto& from = static_cast<const SubmapQuery_Response_SubmapTexture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cells().empty()) {
    _this->_internal_set_cells(from._internal_cells());
  }
  if (from._internal_has_slice_pose()) {
    _this->_internal_mutable_slice_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_slice_pose());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response_SubmapTexture::IsInitialized() const {
  return true;
}

void SubmapQuery_Response_SubmapTexture::InternalSwap(SubmapQuery_Response_SubmapTexture* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cells_, lhs_arena,
      &other->_impl_.cells_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, _impl_.resolution_)
      + sizeof(SubmapQuery_Response_SubmapTexture::_impl_.resolution_)
      - PROTOBUF_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, _impl_.slice_pose_)>(
          reinterpret_cast<char*>(&_impl_.slice_pose_),
          reinterpret_cast<char*>(&other->_impl_.slice_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Response_SubmapTexture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[4]);
}

// ===================================================================

class SubmapQuery_Response::_Internal {
 public:
};

SubmapQuery_Response::SubmapQuery_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapQuery.Response)
}
SubmapQuery_Response::SubmapQuery_Response(const SubmapQuery_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQuery_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.textures_){from._impl_.textures_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.submap_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.submap_version_ = from._impl_.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response)
}

inline void SubmapQuery_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.textures_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.submap_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmapQuery_Response::~SubmapQuery_Response() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQuery_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.textures_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void SubmapQuery_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.textures_.Clear();
  _impl_.error_message_.ClearToEmpty();
  _impl_.submap_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQuery_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 submap_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cartographer.mapping.proto.SubmapQuery.Response.error_message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQuery_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 2;
  if (this->_internal_submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_version(), target);
  }

  // string error_message = 8;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error_message(), target);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_textures_size()); i < n; i++) {
    const auto& repfield = this->_internal_textures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response)
  return target;
}

size_t SubmapQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->_impl_.textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 8;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 submap_version = 2;
  if (this->_internal_submap_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQuery_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQuery_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQuery_Response::GetClassData() const { return &_class_data_; }


void SubmapQuery_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQuery_Response*>(&to_msg);
  auto& from = static_cast<const SubmapQuery_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.textures_.MergeFrom(from._impl_.textures_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_submap_version() != 0) {
    _this->_internal_set_submap_version(from._internal_submap_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQuery_Response::CopyFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response::IsInitialized() const {
  return true;
}

void SubmapQuery_Response::InternalSwap(SubmapQuery_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.textures_.InternalSwap(&other->_impl_.textures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.submap_version_, other->_impl_.submap_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[5]);
}

// ===================================================================

class SubmapQuery::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapQuery_Request& request(const SubmapQuery* msg);
  static const ::cartographer::mapping::proto::SubmapQuery_Response& response(const SubmapQuery* msg);
};

const ::cartographer::mapping::proto::SubmapQuery_Request&
SubmapQuery::_Internal::request(const SubmapQuery* msg) {
  return *msg->_impl_.request_;
}
const ::cartographer::mapping::proto::SubmapQuery_Response&
SubmapQuery::_Internal::response(const SubmapQuery* msg) {
  return *msg->_impl_.response_;
}
SubmapQuery::SubmapQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapQuery)
}
SubmapQuery::SubmapQuery(const SubmapQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::cartographer::mapping::proto::SubmapQuery_Request(*from._impl_.request_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::cartographer::mapping::proto::SubmapQuery_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery)
}

inline void SubmapQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapQuery::~SubmapQuery() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SubmapQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery)
  return target;
}

size_t SubmapQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQuery::GetClassData() const { return &_class_data_; }


void SubmapQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQuery*>(&to_msg);
  auto& from = static_cast<const SubmapQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::cartographer::mapping::proto::SubmapQuery_Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQuery::CopyFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery::IsInitialized() const {
  return true;
}

void SubmapQuery::InternalSwap(SubmapQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapQuery, _impl_.response_)
      + sizeof(SubmapQuery::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(SubmapQuery, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList_SubmapEntry*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList_SubmapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapList_SubmapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapList >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Request*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapQuery_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Response*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapQuery_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
