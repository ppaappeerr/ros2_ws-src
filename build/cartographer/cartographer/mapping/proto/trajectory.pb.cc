// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#include "cartographer/mapping/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace proto {
PROTOBUF_CONSTEXPR Trajectory_Node::Trajectory_Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.node_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Trajectory_NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Trajectory_NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Trajectory_NodeDefaultTypeInternal() {}
  union {
    Trajectory_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
PROTOBUF_CONSTEXPR Trajectory_Submap::Trajectory_Submap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.submap_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Trajectory_SubmapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Trajectory_SubmapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Trajectory_SubmapDefaultTypeInternal() {}
  union {
    Trajectory_Submap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
PROTOBUF_CONSTEXPR Trajectory::Trajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.submap_)*/{}
  , /*decltype(_impl_.trajectory_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, _impl_.node_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, _impl_.submap_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, _impl_.trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, _impl_.submap_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::Trajectory_Node)},
  { 9, -1, -1, sizeof(::cartographer::mapping::proto::Trajectory_Submap)},
  { 17, -1, -1, sizeof(::cartographer::mapping::proto::Trajectory)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::proto::_Trajectory_Node_default_instance_._instance,
  &::cartographer::mapping::proto::_Trajectory_Submap_default_instance_._instance,
  &::cartographer::mapping::proto::_Trajectory_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+cartographer/mapping/proto/trajectory."
  "proto\022\032cartographer.mapping.proto\032,carto"
  "grapher/transform/proto/transform.proto\""
  "\326\002\n\nTrajectory\022\025\n\rtrajectory_id\030\003 \001(\005\0229\n"
  "\004node\030\001 \003(\0132+.cartographer.mapping.proto"
  ".Trajectory.Node\022=\n\006submap\030\002 \003(\0132-.carto"
  "grapher.mapping.proto.Trajectory.Submap\032"
  "b\n\004Node\022\022\n\nnode_index\030\007 \001(\005\022\021\n\ttimestamp"
  "\030\001 \001(\003\0223\n\004pose\030\005 \001(\0132%.cartographer.tran"
  "sform.proto.Rigid3d\032S\n\006Submap\022\024\n\014submap_"
  "index\030\002 \001(\005\0223\n\004pose\030\001 \001(\0132%.cartographer"
  ".transform.proto.Rigid3dB\026B\024TrajectoryOu"
  "terClassb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = {
    false, false, 496, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
    "cartographer/mapping/proto/trajectory.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class Trajectory_Node::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const Trajectory_Node* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Trajectory_Node::_Internal::pose(const Trajectory_Node* msg) {
  return *msg->_impl_.pose_;
}
void Trajectory_Node::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
Trajectory_Node::Trajectory_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.Trajectory.Node)
}
Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trajectory_Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.node_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.pose_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.node_index_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Node)
}

inline void Trajectory_Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.node_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Trajectory_Node::~Trajectory_Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trajectory_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void Trajectory_Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trajectory_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.node_index_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.node_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory_Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 node_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory_Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // int32 node_index = 7;
  if (this->_internal_node_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_node_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Node)
  return target;
}

size_t Trajectory_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 node_index = 7;
  if (this->_internal_node_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trajectory_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory_Node::GetClassData() const { return &_class_data_; }


void Trajectory_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trajectory_Node*>(&to_msg);
  auto& from = static_cast<const Trajectory_Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_node_index() != 0) {
    _this->_internal_set_node_index(from._internal_node_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {
  return true;
}

void Trajectory_Node::InternalSwap(Trajectory_Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trajectory_Node, _impl_.node_index_)
      + sizeof(Trajectory_Node::_impl_.node_index_)
      - PROTOBUF_FIELD_OFFSET(Trajectory_Node, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory_Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[0]);
}

// ===================================================================

class Trajectory_Submap::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const Trajectory_Submap* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Trajectory_Submap::_Internal::pose(const Trajectory_Submap* msg) {
  return *msg->_impl_.pose_;
}
void Trajectory_Submap::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
Trajectory_Submap::Trajectory_Submap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.Trajectory.Submap)
}
Trajectory_Submap::Trajectory_Submap(const Trajectory_Submap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trajectory_Submap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.submap_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.pose_);
  }
  _this->_impl_.submap_index_ = from._impl_.submap_index_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Submap)
}

inline void Trajectory_Submap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.submap_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Trajectory_Submap::~Trajectory_Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Submap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trajectory_Submap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void Trajectory_Submap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trajectory_Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Submap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  _impl_.submap_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory_Submap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 submap_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory_Submap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Submap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Submap)
  return target;
}

size_t Trajectory_Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Submap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory_Submap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trajectory_Submap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory_Submap::GetClassData() const { return &_class_data_; }


void Trajectory_Submap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trajectory_Submap*>(&to_msg);
  auto& from = static_cast<const Trajectory_Submap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_submap_index() != 0) {
    _this->_internal_set_submap_index(from._internal_submap_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory_Submap::CopyFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Submap::IsInitialized() const {
  return true;
}

void Trajectory_Submap::InternalSwap(Trajectory_Submap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trajectory_Submap, _impl_.submap_index_)
      + sizeof(Trajectory_Submap::_impl_.submap_index_)
      - PROTOBUF_FIELD_OFFSET(Trajectory_Submap, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory_Submap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[1]);
}

// ===================================================================

class Trajectory::_Internal {
 public:
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trajectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.submap_){from._impl_.submap_}
    , decltype(_impl_.trajectory_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.trajectory_id_ = from._impl_.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory)
}

inline void Trajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){arena}
    , decltype(_impl_.submap_){arena}
    , decltype(_impl_.trajectory_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
  _impl_.submap_.~RepeatedPtrField();
}

void Trajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.submap_.Clear();
  _impl_.trajectory_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 trajectory_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_submap_size()); i < n; i++) {
    const auto& repfield = this->_internal_submap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 trajectory_id = 3;
  if (this->_internal_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  total_size += 1UL * this->_internal_submap_size();
  for (const auto& msg : this->_impl_.submap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 trajectory_id = 3;
  if (this->_internal_trajectory_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trajectory_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory::GetClassData() const { return &_class_data_; }


void Trajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trajectory*>(&to_msg);
  auto& from = static_cast<const Trajectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.submap_.MergeFrom(from._impl_.submap_);
  if (from._internal_trajectory_id() != 0) {
    _this->_internal_set_trajectory_id(from._internal_trajectory_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.submap_.InternalSwap(&other->_impl_.submap_);
  swap(_impl_.trajectory_id_, other->_impl_.trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory_Node*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::Trajectory_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory_Submap*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory_Submap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::Trajectory_Submap >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::Trajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
