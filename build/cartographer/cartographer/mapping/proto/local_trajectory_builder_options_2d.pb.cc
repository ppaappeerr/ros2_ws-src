// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/local_trajectory_builder_options_2d.proto

#include "cartographer/mapping/proto/local_trajectory_builder_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace proto {
PROTOBUF_CONSTEXPR LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.adaptive_voxel_filter_options_)*/nullptr
  , /*decltype(_impl_.real_time_correlative_scan_matcher_options_)*/nullptr
  , /*decltype(_impl_.ceres_scan_matcher_options_)*/nullptr
  , /*decltype(_impl_.submaps_options_)*/nullptr
  , /*decltype(_impl_.motion_filter_options_)*/nullptr
  , /*decltype(_impl_.loop_closure_adaptive_voxel_filter_options_)*/nullptr
  , /*decltype(_impl_.pose_extrapolator_options_)*/nullptr
  , /*decltype(_impl_.min_z_)*/0
  , /*decltype(_impl_.max_z_)*/0
  , /*decltype(_impl_.voxel_filter_size_)*/0
  , /*decltype(_impl_.use_online_correlative_scan_matching_)*/false
  , /*decltype(_impl_.use_imu_data_)*/false
  , /*decltype(_impl_.min_range_)*/0
  , /*decltype(_impl_.max_range_)*/0
  , /*decltype(_impl_.imu_gravity_time_constant_)*/0
  , /*decltype(_impl_.missing_data_ray_length_)*/0
  , /*decltype(_impl_.num_accumulated_range_data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalTrajectoryBuilderOptions2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrajectoryBuilderOptions2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrajectoryBuilderOptions2DDefaultTypeInternal() {}
  union {
    LocalTrajectoryBuilderOptions2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrajectoryBuilderOptions2DDefaultTypeInternal _LocalTrajectoryBuilderOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.min_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.max_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.min_z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.max_z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.missing_data_ray_length_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.num_accumulated_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.voxel_filter_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.loop_closure_adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.use_online_correlative_scan_matching_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.real_time_correlative_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.ceres_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.motion_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.imu_gravity_time_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.pose_extrapolator_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.submaps_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _impl_.use_imu_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nDcartographer/mapping/proto/local_traje"
  "ctory_builder_options_2d.proto\022\032cartogra"
  "pher.mapping.proto\0326cartographer/mapping"
  "/proto/motion_filter_options.proto\032:cart"
  "ographer/mapping/proto/pose_extrapolator"
  "_options.proto\032=cartographer/sensor/prot"
  "o/adaptive_voxel_filter_options.proto\032Lc"
  "artographer/mapping/proto/scan_matching/"
  "ceres_scan_matcher_options_2d.proto\032Ycar"
  "tographer/mapping/proto/scan_matching/re"
  "al_time_correlative_scan_matcher_options"
  ".proto\0323cartographer/mapping/proto/subma"
  "ps_options_2d.proto\"\323\007\n\037LocalTrajectoryB"
  "uilderOptions2D\022\021\n\tmin_range\030\016 \001(\002\022\021\n\tma"
  "x_range\030\017 \001(\002\022\r\n\005min_z\030\001 \001(\002\022\r\n\005max_z\030\002 "
  "\001(\002\022\037\n\027missing_data_ray_length\030\020 \001(\002\022\"\n\032"
  "num_accumulated_range_data\030\023 \001(\005\022\031\n\021voxe"
  "l_filter_size\030\003 \001(\002\022\\\n\035adaptive_voxel_fi"
  "lter_options\030\006 \001(\01325.cartographer.sensor"
  ".proto.AdaptiveVoxelFilterOptions\022i\n*loo"
  "p_closure_adaptive_voxel_filter_options\030"
  "\024 \001(\01325.cartographer.sensor.proto.Adapti"
  "veVoxelFilterOptions\022,\n$use_online_corre"
  "lative_scan_matching\030\005 \001(\010\022\203\001\n*real_time"
  "_correlative_scan_matcher_options\030\007 \001(\0132"
  "O.cartographer.mapping.scan_matching.pro"
  "to.RealTimeCorrelativeScanMatcherOptions"
  "\022g\n\032ceres_scan_matcher_options\030\010 \001(\0132C.c"
  "artographer.mapping.scan_matching.proto."
  "CeresScanMatcherOptions2D\022N\n\025motion_filt"
  "er_options\030\r \001(\0132/.cartographer.mapping."
  "proto.MotionFilterOptions\022!\n\031imu_gravity"
  "_time_constant\030\021 \001(\001\022V\n\031pose_extrapolato"
  "r_options\030\025 \001(\01323.cartographer.mapping.p"
  "roto.PoseExtrapolatorOptions\022E\n\017submaps_"
  "options\030\013 \001(\0132,.cartographer.mapping.pro"
  "to.SubmapsOptions2D\022\024\n\014use_imu_data\030\014 \001("
  "\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_deps[6] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = {
    false, false, 1489, descriptor_table_protodef_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
    "cartographer/mapping/proto/local_trajectory_builder_options_2d.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_deps, 6, 1,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class LocalTrajectoryBuilderOptions2D::_Internal {
 public:
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& loop_closure_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::MotionFilterOptions& motion_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::PoseExtrapolatorOptions& pose_extrapolator_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::SubmapsOptions2D& submaps_options(const LocalTrajectoryBuilderOptions2D* msg);
};

const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.adaptive_voxel_filter_options_;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::loop_closure_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.loop_closure_adaptive_voxel_filter_options_;
}
const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions&
LocalTrajectoryBuilderOptions2D::_Internal::real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.real_time_correlative_scan_matcher_options_;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D&
LocalTrajectoryBuilderOptions2D::_Internal::ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.ceres_scan_matcher_options_;
}
const ::cartographer::mapping::proto::MotionFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::motion_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.motion_filter_options_;
}
const ::cartographer::mapping::proto::PoseExtrapolatorOptions&
LocalTrajectoryBuilderOptions2D::_Internal::pose_extrapolator_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.pose_extrapolator_options_;
}
const ::cartographer::mapping::proto::SubmapsOptions2D&
LocalTrajectoryBuilderOptions2D::_Internal::submaps_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->_impl_.submaps_options_;
}
void LocalTrajectoryBuilderOptions2D::clear_adaptive_voxel_filter_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.adaptive_voxel_filter_options_ != nullptr) {
    delete _impl_.adaptive_voxel_filter_options_;
  }
  _impl_.adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_loop_closure_adaptive_voxel_filter_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.loop_closure_adaptive_voxel_filter_options_ != nullptr) {
    delete _impl_.loop_closure_adaptive_voxel_filter_options_;
  }
  _impl_.loop_closure_adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.real_time_correlative_scan_matcher_options_ != nullptr) {
    delete _impl_.real_time_correlative_scan_matcher_options_;
  }
  _impl_.real_time_correlative_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_ceres_scan_matcher_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_;
  }
  _impl_.ceres_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_motion_filter_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.motion_filter_options_ != nullptr) {
    delete _impl_.motion_filter_options_;
  }
  _impl_.motion_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_pose_extrapolator_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_extrapolator_options_ != nullptr) {
    delete _impl_.pose_extrapolator_options_;
  }
  _impl_.pose_extrapolator_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_submaps_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.submaps_options_ != nullptr) {
    delete _impl_.submaps_options_;
  }
  _impl_.submaps_options_ = nullptr;
}
LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}
LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(const LocalTrajectoryBuilderOptions2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTrajectoryBuilderOptions2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.adaptive_voxel_filter_options_){nullptr}
    , decltype(_impl_.real_time_correlative_scan_matcher_options_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_){nullptr}
    , decltype(_impl_.submaps_options_){nullptr}
    , decltype(_impl_.motion_filter_options_){nullptr}
    , decltype(_impl_.loop_closure_adaptive_voxel_filter_options_){nullptr}
    , decltype(_impl_.pose_extrapolator_options_){nullptr}
    , decltype(_impl_.min_z_){}
    , decltype(_impl_.max_z_){}
    , decltype(_impl_.voxel_filter_size_){}
    , decltype(_impl_.use_online_correlative_scan_matching_){}
    , decltype(_impl_.use_imu_data_){}
    , decltype(_impl_.min_range_){}
    , decltype(_impl_.max_range_){}
    , decltype(_impl_.imu_gravity_time_constant_){}
    , decltype(_impl_.missing_data_ray_length_){}
    , decltype(_impl_.num_accumulated_range_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adaptive_voxel_filter_options()) {
    _this->_impl_.adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from._impl_.adaptive_voxel_filter_options_);
  }
  if (from._internal_has_real_time_correlative_scan_matcher_options()) {
    _this->_impl_.real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from._impl_.real_time_correlative_scan_matcher_options_);
  }
  if (from._internal_has_ceres_scan_matcher_options()) {
    _this->_impl_.ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D(*from._impl_.ceres_scan_matcher_options_);
  }
  if (from._internal_has_submaps_options()) {
    _this->_impl_.submaps_options_ = new ::cartographer::mapping::proto::SubmapsOptions2D(*from._impl_.submaps_options_);
  }
  if (from._internal_has_motion_filter_options()) {
    _this->_impl_.motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions(*from._impl_.motion_filter_options_);
  }
  if (from._internal_has_loop_closure_adaptive_voxel_filter_options()) {
    _this->_impl_.loop_closure_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from._impl_.loop_closure_adaptive_voxel_filter_options_);
  }
  if (from._internal_has_pose_extrapolator_options()) {
    _this->_impl_.pose_extrapolator_options_ = new ::cartographer::mapping::proto::PoseExtrapolatorOptions(*from._impl_.pose_extrapolator_options_);
  }
  ::memcpy(&_impl_.min_z_, &from._impl_.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_accumulated_range_data_) -
    reinterpret_cast<char*>(&_impl_.min_z_)) + sizeof(_impl_.num_accumulated_range_data_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

inline void LocalTrajectoryBuilderOptions2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.adaptive_voxel_filter_options_){nullptr}
    , decltype(_impl_.real_time_correlative_scan_matcher_options_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_){nullptr}
    , decltype(_impl_.submaps_options_){nullptr}
    , decltype(_impl_.motion_filter_options_){nullptr}
    , decltype(_impl_.loop_closure_adaptive_voxel_filter_options_){nullptr}
    , decltype(_impl_.pose_extrapolator_options_){nullptr}
    , decltype(_impl_.min_z_){0}
    , decltype(_impl_.max_z_){0}
    , decltype(_impl_.voxel_filter_size_){0}
    , decltype(_impl_.use_online_correlative_scan_matching_){false}
    , decltype(_impl_.use_imu_data_){false}
    , decltype(_impl_.min_range_){0}
    , decltype(_impl_.max_range_){0}
    , decltype(_impl_.imu_gravity_time_constant_){0}
    , decltype(_impl_.missing_data_ray_length_){0}
    , decltype(_impl_.num_accumulated_range_data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocalTrajectoryBuilderOptions2D::~LocalTrajectoryBuilderOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrajectoryBuilderOptions2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete _impl_.real_time_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete _impl_.ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete _impl_.submaps_options_;
  if (this != internal_default_instance()) delete _impl_.motion_filter_options_;
  if (this != internal_default_instance()) delete _impl_.loop_closure_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete _impl_.pose_extrapolator_options_;
}

void LocalTrajectoryBuilderOptions2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTrajectoryBuilderOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.adaptive_voxel_filter_options_ != nullptr) {
    delete _impl_.adaptive_voxel_filter_options_;
  }
  _impl_.adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.real_time_correlative_scan_matcher_options_ != nullptr) {
    delete _impl_.real_time_correlative_scan_matcher_options_;
  }
  _impl_.real_time_correlative_scan_matcher_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_;
  }
  _impl_.ceres_scan_matcher_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.submaps_options_ != nullptr) {
    delete _impl_.submaps_options_;
  }
  _impl_.submaps_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.motion_filter_options_ != nullptr) {
    delete _impl_.motion_filter_options_;
  }
  _impl_.motion_filter_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.loop_closure_adaptive_voxel_filter_options_ != nullptr) {
    delete _impl_.loop_closure_adaptive_voxel_filter_options_;
  }
  _impl_.loop_closure_adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_extrapolator_options_ != nullptr) {
    delete _impl_.pose_extrapolator_options_;
  }
  _impl_.pose_extrapolator_options_ = nullptr;
  ::memset(&_impl_.min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_accumulated_range_data_) -
      reinterpret_cast<char*>(&_impl_.min_z_)) + sizeof(_impl_.num_accumulated_range_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTrajectoryBuilderOptions2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min_z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float voxel_filter_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.voxel_filter_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool use_online_correlative_scan_matching = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.use_online_correlative_scan_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_voxel_filter_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_time_correlative_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_submaps_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_imu_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.use_imu_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_filter_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_range = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_range = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float missing_data_ray_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.missing_data_ray_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double imu_gravity_time_constant = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.imu_gravity_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 num_accumulated_range_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.num_accumulated_range_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_loop_closure_adaptive_voxel_filter_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_extrapolator_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrajectoryBuilderOptions2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_z = this->_internal_min_z();
  uint32_t raw_min_z;
  memcpy(&raw_min_z, &tmp_min_z, sizeof(tmp_min_z));
  if (raw_min_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_z(), target);
  }

  // float max_z = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_z = this->_internal_max_z();
  uint32_t raw_max_z;
  memcpy(&raw_max_z, &tmp_max_z, sizeof(tmp_max_z));
  if (raw_max_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_z(), target);
  }

  // float voxel_filter_size = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_filter_size = this->_internal_voxel_filter_size();
  uint32_t raw_voxel_filter_size;
  memcpy(&raw_voxel_filter_size, &tmp_voxel_filter_size, sizeof(tmp_voxel_filter_size));
  if (raw_voxel_filter_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_voxel_filter_size(), target);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->_internal_use_online_correlative_scan_matching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_use_online_correlative_scan_matching(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->_internal_has_adaptive_voxel_filter_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::adaptive_voxel_filter_options(this),
        _Internal::adaptive_voxel_filter_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->_internal_has_real_time_correlative_scan_matcher_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::real_time_correlative_scan_matcher_options(this),
        _Internal::real_time_correlative_scan_matcher_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->_internal_has_ceres_scan_matcher_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ceres_scan_matcher_options(this),
        _Internal::ceres_scan_matcher_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->_internal_has_submaps_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::submaps_options(this),
        _Internal::submaps_options(this).GetCachedSize(), target, stream);
  }

  // bool use_imu_data = 12;
  if (this->_internal_use_imu_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_use_imu_data(), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->_internal_has_motion_filter_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::motion_filter_options(this),
        _Internal::motion_filter_options(this).GetCachedSize(), target, stream);
  }

  // float min_range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_range = this->_internal_min_range();
  uint32_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_min_range(), target);
  }

  // float max_range = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_range = this->_internal_max_range();
  uint32_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_max_range(), target);
  }

  // float missing_data_ray_length = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_missing_data_ray_length = this->_internal_missing_data_ray_length();
  uint32_t raw_missing_data_ray_length;
  memcpy(&raw_missing_data_ray_length, &tmp_missing_data_ray_length, sizeof(tmp_missing_data_ray_length));
  if (raw_missing_data_ray_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_missing_data_ray_length(), target);
  }

  // double imu_gravity_time_constant = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imu_gravity_time_constant = this->_internal_imu_gravity_time_constant();
  uint64_t raw_imu_gravity_time_constant;
  memcpy(&raw_imu_gravity_time_constant, &tmp_imu_gravity_time_constant, sizeof(tmp_imu_gravity_time_constant));
  if (raw_imu_gravity_time_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_imu_gravity_time_constant(), target);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->_internal_num_accumulated_range_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_num_accumulated_range_data(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->_internal_has_loop_closure_adaptive_voxel_filter_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::loop_closure_adaptive_voxel_filter_options(this),
        _Internal::loop_closure_adaptive_voxel_filter_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->_internal_has_pose_extrapolator_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::pose_extrapolator_options(this),
        _Internal::pose_extrapolator_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return target;
}

size_t LocalTrajectoryBuilderOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->_internal_has_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->_internal_has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.real_time_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->_internal_has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->_internal_has_submaps_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.submaps_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->_internal_has_motion_filter_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motion_filter_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->_internal_has_loop_closure_adaptive_voxel_filter_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loop_closure_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->_internal_has_pose_extrapolator_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_extrapolator_options_);
  }

  // float min_z = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_z = this->_internal_min_z();
  uint32_t raw_min_z;
  memcpy(&raw_min_z, &tmp_min_z, sizeof(tmp_min_z));
  if (raw_min_z != 0) {
    total_size += 1 + 4;
  }

  // float max_z = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_z = this->_internal_max_z();
  uint32_t raw_max_z;
  memcpy(&raw_max_z, &tmp_max_z, sizeof(tmp_max_z));
  if (raw_max_z != 0) {
    total_size += 1 + 4;
  }

  // float voxel_filter_size = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_filter_size = this->_internal_voxel_filter_size();
  uint32_t raw_voxel_filter_size;
  memcpy(&raw_voxel_filter_size, &tmp_voxel_filter_size, sizeof(tmp_voxel_filter_size));
  if (raw_voxel_filter_size != 0) {
    total_size += 1 + 4;
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->_internal_use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // bool use_imu_data = 12;
  if (this->_internal_use_imu_data() != 0) {
    total_size += 1 + 1;
  }

  // float min_range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_range = this->_internal_min_range();
  uint32_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    total_size += 1 + 4;
  }

  // float max_range = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_range = this->_internal_max_range();
  uint32_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imu_gravity_time_constant = this->_internal_imu_gravity_time_constant();
  uint64_t raw_imu_gravity_time_constant;
  memcpy(&raw_imu_gravity_time_constant, &tmp_imu_gravity_time_constant, sizeof(tmp_imu_gravity_time_constant));
  if (raw_imu_gravity_time_constant != 0) {
    total_size += 2 + 8;
  }

  // float missing_data_ray_length = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_missing_data_ray_length = this->_internal_missing_data_ray_length();
  uint32_t raw_missing_data_ray_length;
  memcpy(&raw_missing_data_ray_length, &tmp_missing_data_ray_length, sizeof(tmp_missing_data_ray_length));
  if (raw_missing_data_ray_length != 0) {
    total_size += 2 + 4;
  }

  // int32 num_accumulated_range_data = 19;
  if (this->_internal_num_accumulated_range_data() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_num_accumulated_range_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTrajectoryBuilderOptions2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTrajectoryBuilderOptions2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTrajectoryBuilderOptions2D::GetClassData() const { return &_class_data_; }


void LocalTrajectoryBuilderOptions2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTrajectoryBuilderOptions2D*>(&to_msg);
  auto& from = static_cast<const LocalTrajectoryBuilderOptions2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_adaptive_voxel_filter_options()) {
    _this->_internal_mutable_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(
        from._internal_adaptive_voxel_filter_options());
  }
  if (from._internal_has_real_time_correlative_scan_matcher_options()) {
    _this->_internal_mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(
        from._internal_real_time_correlative_scan_matcher_options());
  }
  if (from._internal_has_ceres_scan_matcher_options()) {
    _this->_internal_mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(
        from._internal_ceres_scan_matcher_options());
  }
  if (from._internal_has_submaps_options()) {
    _this->_internal_mutable_submaps_options()->::cartographer::mapping::proto::SubmapsOptions2D::MergeFrom(
        from._internal_submaps_options());
  }
  if (from._internal_has_motion_filter_options()) {
    _this->_internal_mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(
        from._internal_motion_filter_options());
  }
  if (from._internal_has_loop_closure_adaptive_voxel_filter_options()) {
    _this->_internal_mutable_loop_closure_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(
        from._internal_loop_closure_adaptive_voxel_filter_options());
  }
  if (from._internal_has_pose_extrapolator_options()) {
    _this->_internal_mutable_pose_extrapolator_options()->::cartographer::mapping::proto::PoseExtrapolatorOptions::MergeFrom(
        from._internal_pose_extrapolator_options());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_z = from._internal_min_z();
  uint32_t raw_min_z;
  memcpy(&raw_min_z, &tmp_min_z, sizeof(tmp_min_z));
  if (raw_min_z != 0) {
    _this->_internal_set_min_z(from._internal_min_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_z = from._internal_max_z();
  uint32_t raw_max_z;
  memcpy(&raw_max_z, &tmp_max_z, sizeof(tmp_max_z));
  if (raw_max_z != 0) {
    _this->_internal_set_max_z(from._internal_max_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_filter_size = from._internal_voxel_filter_size();
  uint32_t raw_voxel_filter_size;
  memcpy(&raw_voxel_filter_size, &tmp_voxel_filter_size, sizeof(tmp_voxel_filter_size));
  if (raw_voxel_filter_size != 0) {
    _this->_internal_set_voxel_filter_size(from._internal_voxel_filter_size());
  }
  if (from._internal_use_online_correlative_scan_matching() != 0) {
    _this->_internal_set_use_online_correlative_scan_matching(from._internal_use_online_correlative_scan_matching());
  }
  if (from._internal_use_imu_data() != 0) {
    _this->_internal_set_use_imu_data(from._internal_use_imu_data());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_range = from._internal_min_range();
  uint32_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    _this->_internal_set_min_range(from._internal_min_range());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_range = from._internal_max_range();
  uint32_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    _this->_internal_set_max_range(from._internal_max_range());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imu_gravity_time_constant = from._internal_imu_gravity_time_constant();
  uint64_t raw_imu_gravity_time_constant;
  memcpy(&raw_imu_gravity_time_constant, &tmp_imu_gravity_time_constant, sizeof(tmp_imu_gravity_time_constant));
  if (raw_imu_gravity_time_constant != 0) {
    _this->_internal_set_imu_gravity_time_constant(from._internal_imu_gravity_time_constant());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_missing_data_ray_length = from._internal_missing_data_ray_length();
  uint32_t raw_missing_data_ray_length;
  memcpy(&raw_missing_data_ray_length, &tmp_missing_data_ray_length, sizeof(tmp_missing_data_ray_length));
  if (raw_missing_data_ray_length != 0) {
    _this->_internal_set_missing_data_ray_length(from._internal_missing_data_ray_length());
  }
  if (from._internal_num_accumulated_range_data() != 0) {
    _this->_internal_set_num_accumulated_range_data(from._internal_num_accumulated_range_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions2D::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions2D::InternalSwap(LocalTrajectoryBuilderOptions2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, _impl_.num_accumulated_range_data_)
      + sizeof(LocalTrajectoryBuilderOptions2D::_impl_.num_accumulated_range_data_)
      - PROTOBUF_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, _impl_.adaptive_voxel_filter_options_)>(
          reinterpret_cast<char*>(&_impl_.adaptive_voxel_filter_options_),
          reinterpret_cast<char*>(&other->_impl_.adaptive_voxel_filter_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrajectoryBuilderOptions2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D*
Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
