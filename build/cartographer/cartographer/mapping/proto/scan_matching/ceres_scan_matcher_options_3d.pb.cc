// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto

#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {
PROTOBUF_CONSTEXPR IntensityCostFunctionOptions::IntensityCostFunctionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.huber_scale_)*/0
  , /*decltype(_impl_.intensity_threshold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntensityCostFunctionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntensityCostFunctionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntensityCostFunctionOptionsDefaultTypeInternal() {}
  union {
    IntensityCostFunctionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntensityCostFunctionOptionsDefaultTypeInternal _IntensityCostFunctionOptions_default_instance_;
PROTOBUF_CONSTEXPR CeresScanMatcherOptions3D::CeresScanMatcherOptions3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.occupied_space_weight_)*/{}
  , /*decltype(_impl_.intensity_cost_function_options_)*/{}
  , /*decltype(_impl_.ceres_solver_options_)*/nullptr
  , /*decltype(_impl_.translation_weight_)*/0
  , /*decltype(_impl_.rotation_weight_)*/0
  , /*decltype(_impl_.only_optimize_yaw_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CeresScanMatcherOptions3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CeresScanMatcherOptions3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CeresScanMatcherOptions3DDefaultTypeInternal() {}
  union {
    CeresScanMatcherOptions3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CeresScanMatcherOptions3DDefaultTypeInternal _CeresScanMatcherOptions3D_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions, _impl_.huber_scale_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions, _impl_.intensity_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.occupied_space_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.only_optimize_yaw_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.ceres_solver_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _impl_.intensity_cost_function_options_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions)},
  { 9, -1, -1, sizeof(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::scan_matching::proto::_IntensityCostFunctionOptions_default_instance_._instance,
  &::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions3D_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nLcartographer/mapping/proto/scan_matchi"
  "ng/ceres_scan_matcher_options_3d.proto\022("
  "cartographer.mapping.scan_matching.proto"
  "\0324cartographer/common/proto/ceres_solver"
  "_options.proto\"`\n\034IntensityCostFunctionO"
  "ptions\022\016\n\006weight\030\001 \001(\001\022\023\n\013huber_scale\030\002 "
  "\001(\001\022\033\n\023intensity_threshold\030\003 \001(\002\"\310\002\n\031Cer"
  "esScanMatcherOptions3D\022\035\n\025occupied_space"
  "_weight\030\001 \003(\001\022\032\n\022translation_weight\030\002 \001("
  "\001\022\027\n\017rotation_weight\030\003 \001(\001\022\031\n\021only_optim"
  "ize_yaw\030\005 \001(\010\022K\n\024ceres_solver_options\030\006 "
  "\001(\0132-.cartographer.common.proto.CeresSol"
  "verOptions\022o\n\037intensity_cost_function_op"
  "tions\030\007 \003(\0132F.cartographer.mapping.scan_"
  "matching.proto.IntensityCostFunctionOpti"
  "onsb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = {
    false, false, 611, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
    "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto);
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// ===================================================================

class IntensityCostFunctionOptions::_Internal {
 public:
};

IntensityCostFunctionOptions::IntensityCostFunctionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
}
IntensityCostFunctionOptions::IntensityCostFunctionOptions(const IntensityCostFunctionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntensityCostFunctionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){}
    , decltype(_impl_.huber_scale_){}
    , decltype(_impl_.intensity_threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intensity_threshold_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.intensity_threshold_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
}

inline void IntensityCostFunctionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){0}
    , decltype(_impl_.huber_scale_){0}
    , decltype(_impl_.intensity_threshold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntensityCostFunctionOptions::~IntensityCostFunctionOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntensityCostFunctionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntensityCostFunctionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntensityCostFunctionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.intensity_threshold_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.intensity_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntensityCostFunctionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double huber_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.huber_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float intensity_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.intensity_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntensityCostFunctionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // double huber_scale = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = this->_internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_huber_scale(), target);
  }

  // float intensity_threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity_threshold = this->_internal_intensity_threshold();
  uint32_t raw_intensity_threshold;
  memcpy(&raw_intensity_threshold, &tmp_intensity_threshold, sizeof(tmp_intensity_threshold));
  if (raw_intensity_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_intensity_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  return target;
}

size_t IntensityCostFunctionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // double huber_scale = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = this->_internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    total_size += 1 + 8;
  }

  // float intensity_threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity_threshold = this->_internal_intensity_threshold();
  uint32_t raw_intensity_threshold;
  memcpy(&raw_intensity_threshold, &tmp_intensity_threshold, sizeof(tmp_intensity_threshold));
  if (raw_intensity_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntensityCostFunctionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntensityCostFunctionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntensityCostFunctionOptions::GetClassData() const { return &_class_data_; }


void IntensityCostFunctionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntensityCostFunctionOptions*>(&to_msg);
  auto& from = static_cast<const IntensityCostFunctionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = from._internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    _this->_internal_set_huber_scale(from._internal_huber_scale());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity_threshold = from._internal_intensity_threshold();
  uint32_t raw_intensity_threshold;
  memcpy(&raw_intensity_threshold, &tmp_intensity_threshold, sizeof(tmp_intensity_threshold));
  if (raw_intensity_threshold != 0) {
    _this->_internal_set_intensity_threshold(from._internal_intensity_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntensityCostFunctionOptions::CopyFrom(const IntensityCostFunctionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntensityCostFunctionOptions::IsInitialized() const {
  return true;
}

void IntensityCostFunctionOptions::InternalSwap(IntensityCostFunctionOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntensityCostFunctionOptions, _impl_.intensity_threshold_)
      + sizeof(IntensityCostFunctionOptions::_impl_.intensity_threshold_)
      - PROTOBUF_FIELD_OFFSET(IntensityCostFunctionOptions, _impl_.weight_)>(
          reinterpret_cast<char*>(&_impl_.weight_),
          reinterpret_cast<char*>(&other->_impl_.weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntensityCostFunctionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[0]);
}

// ===================================================================

class CeresScanMatcherOptions3D::_Internal {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options(const CeresScanMatcherOptions3D* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
CeresScanMatcherOptions3D::_Internal::ceres_solver_options(const CeresScanMatcherOptions3D* msg) {
  return *msg->_impl_.ceres_solver_options_;
}
void CeresScanMatcherOptions3D::clear_ceres_solver_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_solver_options_ != nullptr) {
    delete _impl_.ceres_solver_options_;
  }
  _impl_.ceres_solver_options_ = nullptr;
}
CeresScanMatcherOptions3D::CeresScanMatcherOptions3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}
CeresScanMatcherOptions3D::CeresScanMatcherOptions3D(const CeresScanMatcherOptions3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CeresScanMatcherOptions3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.occupied_space_weight_){from._impl_.occupied_space_weight_}
    , decltype(_impl_.intensity_cost_function_options_){from._impl_.intensity_cost_function_options_}
    , decltype(_impl_.ceres_solver_options_){nullptr}
    , decltype(_impl_.translation_weight_){}
    , decltype(_impl_.rotation_weight_){}
    , decltype(_impl_.only_optimize_yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ceres_solver_options()) {
    _this->_impl_.ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from._impl_.ceres_solver_options_);
  }
  ::memcpy(&_impl_.translation_weight_, &from._impl_.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.only_optimize_yaw_) -
    reinterpret_cast<char*>(&_impl_.translation_weight_)) + sizeof(_impl_.only_optimize_yaw_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}

inline void CeresScanMatcherOptions3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.occupied_space_weight_){arena}
    , decltype(_impl_.intensity_cost_function_options_){arena}
    , decltype(_impl_.ceres_solver_options_){nullptr}
    , decltype(_impl_.translation_weight_){0}
    , decltype(_impl_.rotation_weight_){0}
    , decltype(_impl_.only_optimize_yaw_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CeresScanMatcherOptions3D::~CeresScanMatcherOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CeresScanMatcherOptions3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.occupied_space_weight_.~RepeatedField();
  _impl_.intensity_cost_function_options_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ceres_solver_options_;
}

void CeresScanMatcherOptions3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CeresScanMatcherOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.occupied_space_weight_.Clear();
  _impl_.intensity_cost_function_options_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_solver_options_ != nullptr) {
    delete _impl_.ceres_solver_options_;
  }
  _impl_.ceres_solver_options_ = nullptr;
  ::memset(&_impl_.translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.only_optimize_yaw_) -
      reinterpret_cast<char*>(&_impl_.translation_weight_)) + sizeof(_impl_.only_optimize_yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CeresScanMatcherOptions3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double occupied_space_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_occupied_space_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_occupied_space_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double translation_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rotation_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool only_optimize_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.only_optimize_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_solver_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intensity_cost_function_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CeresScanMatcherOptions3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  if (this->_internal_occupied_space_weight_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_occupied_space_weight(), target);
  }

  // double translation_weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = this->_internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_translation_weight(), target);
  }

  // double rotation_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_weight(), target);
  }

  // bool only_optimize_yaw = 5;
  if (this->_internal_only_optimize_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_only_optimize_yaw(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->_internal_has_ceres_solver_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ceres_solver_options(this),
        _Internal::ceres_solver_options(this).GetCachedSize(), target, stream);
  }

  // repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intensity_cost_function_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_intensity_cost_function_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  return target;
}

size_t CeresScanMatcherOptions3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_occupied_space_weight_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
  total_size += 1UL * this->_internal_intensity_cost_function_options_size();
  for (const auto& msg : this->_impl_.intensity_cost_function_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->_internal_has_ceres_solver_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ceres_solver_options_);
  }

  // double translation_weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = this->_internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  // bool only_optimize_yaw = 5;
  if (this->_internal_only_optimize_yaw() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CeresScanMatcherOptions3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CeresScanMatcherOptions3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CeresScanMatcherOptions3D::GetClassData() const { return &_class_data_; }


void CeresScanMatcherOptions3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CeresScanMatcherOptions3D*>(&to_msg);
  auto& from = static_cast<const CeresScanMatcherOptions3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.occupied_space_weight_.MergeFrom(from._impl_.occupied_space_weight_);
  _this->_impl_.intensity_cost_function_options_.MergeFrom(from._impl_.intensity_cost_function_options_);
  if (from._internal_has_ceres_solver_options()) {
    _this->_internal_mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(
        from._internal_ceres_solver_options());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = from._internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    _this->_internal_set_translation_weight(from._internal_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = from._internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    _this->_internal_set_rotation_weight(from._internal_rotation_weight());
  }
  if (from._internal_only_optimize_yaw() != 0) {
    _this->_internal_set_only_optimize_yaw(from._internal_only_optimize_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CeresScanMatcherOptions3D::CopyFrom(const CeresScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresScanMatcherOptions3D::IsInitialized() const {
  return true;
}

void CeresScanMatcherOptions3D::InternalSwap(CeresScanMatcherOptions3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.occupied_space_weight_.InternalSwap(&other->_impl_.occupied_space_weight_);
  _impl_.intensity_cost_function_options_.InternalSwap(&other->_impl_.intensity_cost_function_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CeresScanMatcherOptions3D, _impl_.only_optimize_yaw_)
      + sizeof(CeresScanMatcherOptions3D::_impl_.only_optimize_yaw_)
      - PROTOBUF_FIELD_OFFSET(CeresScanMatcherOptions3D, _impl_.ceres_solver_options_)>(
          reinterpret_cast<char*>(&_impl_.ceres_solver_options_),
          reinterpret_cast<char*>(&other->_impl_.ceres_solver_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CeresScanMatcherOptions3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions*
Arena::CreateMaybeMessage< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D*
Arena::CreateMaybeMessage< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
