// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/optimization_problem_options.proto

#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {
PROTOBUF_CONSTEXPR OptimizationProblemOptions::OptimizationProblemOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ceres_solver_options_)*/nullptr
  , /*decltype(_impl_.huber_scale_)*/0
  , /*decltype(_impl_.acceleration_weight_)*/0
  , /*decltype(_impl_.rotation_weight_)*/0
  , /*decltype(_impl_.fixed_frame_pose_translation_weight_)*/0
  , /*decltype(_impl_.fixed_frame_pose_rotation_weight_)*/0
  , /*decltype(_impl_.local_slam_pose_translation_weight_)*/0
  , /*decltype(_impl_.local_slam_pose_rotation_weight_)*/0
  , /*decltype(_impl_.odometry_translation_weight_)*/0
  , /*decltype(_impl_.odometry_rotation_weight_)*/0
  , /*decltype(_impl_.fixed_frame_pose_tolerant_loss_param_a_)*/0
  , /*decltype(_impl_.fixed_frame_pose_tolerant_loss_param_b_)*/0
  , /*decltype(_impl_.fixed_frame_pose_use_tolerant_loss_)*/false
  , /*decltype(_impl_.fix_z_in_3d_)*/false
  , /*decltype(_impl_.use_online_imu_extrinsics_in_3d_)*/false
  , /*decltype(_impl_.log_solver_summary_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptimizationProblemOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimizationProblemOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimizationProblemOptionsDefaultTypeInternal() {}
  union {
    OptimizationProblemOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimizationProblemOptionsDefaultTypeInternal _OptimizationProblemOptions_default_instance_;
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.huber_scale_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.acceleration_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.local_slam_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.local_slam_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.odometry_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.odometry_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fixed_frame_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fixed_frame_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fixed_frame_pose_use_tolerant_loss_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fixed_frame_pose_tolerant_loss_param_a_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fixed_frame_pose_tolerant_loss_param_b_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.fix_z_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.use_online_imu_extrinsics_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.log_solver_summary_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _impl_.ceres_solver_options_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::optimization::proto::OptimizationProblemOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nHcartographer/mapping/proto/pose_graph/"
  "optimization_problem_options.proto\022\'cart"
  "ographer.mapping.optimization.proto\0324car"
  "tographer/common/proto/ceres_solver_opti"
  "ons.proto\"\223\005\n\032OptimizationProblemOptions"
  "\022\023\n\013huber_scale\030\001 \001(\001\022\033\n\023acceleration_we"
  "ight\030\010 \001(\001\022\027\n\017rotation_weight\030\t \001(\001\022*\n\"l"
  "ocal_slam_pose_translation_weight\030\016 \001(\001\022"
  "\'\n\037local_slam_pose_rotation_weight\030\017 \001(\001"
  "\022#\n\033odometry_translation_weight\030\020 \001(\001\022 \n"
  "\030odometry_rotation_weight\030\021 \001(\001\022+\n#fixed"
  "_frame_pose_translation_weight\030\013 \001(\001\022(\n "
  "fixed_frame_pose_rotation_weight\030\014 \001(\001\022*"
  "\n\"fixed_frame_pose_use_tolerant_loss\030\027 \001"
  "(\010\022.\n&fixed_frame_pose_tolerant_loss_par"
  "am_a\030\030 \001(\001\022.\n&fixed_frame_pose_tolerant_"
  "loss_param_b\030\031 \001(\001\022\023\n\013fix_z_in_3d\030\r \001(\010\022"
  "\'\n\037use_online_imu_extrinsics_in_3d\030\022 \001(\010"
  "\022\032\n\022log_solver_summary\030\005 \001(\010\022K\n\024ceres_so"
  "lver_options\030\007 \001(\0132-.cartographer.common"
  ".proto.CeresSolverOptionsJ\004\010\024\020\027b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = {
    false, false, 839, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
    "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto);
namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {

// ===================================================================

class OptimizationProblemOptions::_Internal {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options(const OptimizationProblemOptions* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
OptimizationProblemOptions::_Internal::ceres_solver_options(const OptimizationProblemOptions* msg) {
  return *msg->_impl_.ceres_solver_options_;
}
void OptimizationProblemOptions::clear_ceres_solver_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_solver_options_ != nullptr) {
    delete _impl_.ceres_solver_options_;
  }
  _impl_.ceres_solver_options_ = nullptr;
}
OptimizationProblemOptions::OptimizationProblemOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}
OptimizationProblemOptions::OptimizationProblemOptions(const OptimizationProblemOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptimizationProblemOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ceres_solver_options_){nullptr}
    , decltype(_impl_.huber_scale_){}
    , decltype(_impl_.acceleration_weight_){}
    , decltype(_impl_.rotation_weight_){}
    , decltype(_impl_.fixed_frame_pose_translation_weight_){}
    , decltype(_impl_.fixed_frame_pose_rotation_weight_){}
    , decltype(_impl_.local_slam_pose_translation_weight_){}
    , decltype(_impl_.local_slam_pose_rotation_weight_){}
    , decltype(_impl_.odometry_translation_weight_){}
    , decltype(_impl_.odometry_rotation_weight_){}
    , decltype(_impl_.fixed_frame_pose_tolerant_loss_param_a_){}
    , decltype(_impl_.fixed_frame_pose_tolerant_loss_param_b_){}
    , decltype(_impl_.fixed_frame_pose_use_tolerant_loss_){}
    , decltype(_impl_.fix_z_in_3d_){}
    , decltype(_impl_.use_online_imu_extrinsics_in_3d_){}
    , decltype(_impl_.log_solver_summary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ceres_solver_options()) {
    _this->_impl_.ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from._impl_.ceres_solver_options_);
  }
  ::memcpy(&_impl_.huber_scale_, &from._impl_.huber_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_solver_summary_) -
    reinterpret_cast<char*>(&_impl_.huber_scale_)) + sizeof(_impl_.log_solver_summary_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

inline void OptimizationProblemOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ceres_solver_options_){nullptr}
    , decltype(_impl_.huber_scale_){0}
    , decltype(_impl_.acceleration_weight_){0}
    , decltype(_impl_.rotation_weight_){0}
    , decltype(_impl_.fixed_frame_pose_translation_weight_){0}
    , decltype(_impl_.fixed_frame_pose_rotation_weight_){0}
    , decltype(_impl_.local_slam_pose_translation_weight_){0}
    , decltype(_impl_.local_slam_pose_rotation_weight_){0}
    , decltype(_impl_.odometry_translation_weight_){0}
    , decltype(_impl_.odometry_rotation_weight_){0}
    , decltype(_impl_.fixed_frame_pose_tolerant_loss_param_a_){0}
    , decltype(_impl_.fixed_frame_pose_tolerant_loss_param_b_){0}
    , decltype(_impl_.fixed_frame_pose_use_tolerant_loss_){false}
    , decltype(_impl_.fix_z_in_3d_){false}
    , decltype(_impl_.use_online_imu_extrinsics_in_3d_){false}
    , decltype(_impl_.log_solver_summary_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptimizationProblemOptions::~OptimizationProblemOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptimizationProblemOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ceres_solver_options_;
}

void OptimizationProblemOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptimizationProblemOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ceres_solver_options_ != nullptr) {
    delete _impl_.ceres_solver_options_;
  }
  _impl_.ceres_solver_options_ = nullptr;
  ::memset(&_impl_.huber_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_solver_summary_) -
      reinterpret_cast<char*>(&_impl_.huber_scale_)) + sizeof(_impl_.log_solver_summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimizationProblemOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double huber_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.huber_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool log_solver_summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.log_solver_summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_solver_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.acceleration_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rotation_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fixed_frame_pose_translation_weight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.fixed_frame_pose_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fixed_frame_pose_rotation_weight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.fixed_frame_pose_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool fix_z_in_3d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.fix_z_in_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double local_slam_pose_translation_weight = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.local_slam_pose_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double local_slam_pose_rotation_weight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.local_slam_pose_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double odometry_translation_weight = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.odometry_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double odometry_rotation_weight = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.odometry_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool use_online_imu_extrinsics_in_3d = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.use_online_imu_extrinsics_in_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fixed_frame_pose_use_tolerant_loss = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.fixed_frame_pose_use_tolerant_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double fixed_frame_pose_tolerant_loss_param_a = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.fixed_frame_pose_tolerant_loss_param_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fixed_frame_pose_tolerant_loss_param_b = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.fixed_frame_pose_tolerant_loss_param_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimizationProblemOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double huber_scale = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = this->_internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_huber_scale(), target);
  }

  // bool log_solver_summary = 5;
  if (this->_internal_log_solver_summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_log_solver_summary(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->_internal_has_ceres_solver_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ceres_solver_options(this),
        _Internal::ceres_solver_options(this).GetCachedSize(), target, stream);
  }

  // double acceleration_weight = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_weight = this->_internal_acceleration_weight();
  uint64_t raw_acceleration_weight;
  memcpy(&raw_acceleration_weight, &tmp_acceleration_weight, sizeof(tmp_acceleration_weight));
  if (raw_acceleration_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceleration_weight(), target);
  }

  // double rotation_weight = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_rotation_weight(), target);
  }

  // double fixed_frame_pose_translation_weight = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_translation_weight = this->_internal_fixed_frame_pose_translation_weight();
  uint64_t raw_fixed_frame_pose_translation_weight;
  memcpy(&raw_fixed_frame_pose_translation_weight, &tmp_fixed_frame_pose_translation_weight, sizeof(tmp_fixed_frame_pose_translation_weight));
  if (raw_fixed_frame_pose_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_fixed_frame_pose_translation_weight(), target);
  }

  // double fixed_frame_pose_rotation_weight = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_rotation_weight = this->_internal_fixed_frame_pose_rotation_weight();
  uint64_t raw_fixed_frame_pose_rotation_weight;
  memcpy(&raw_fixed_frame_pose_rotation_weight, &tmp_fixed_frame_pose_rotation_weight, sizeof(tmp_fixed_frame_pose_rotation_weight));
  if (raw_fixed_frame_pose_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_fixed_frame_pose_rotation_weight(), target);
  }

  // bool fix_z_in_3d = 13;
  if (this->_internal_fix_z_in_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_fix_z_in_3d(), target);
  }

  // double local_slam_pose_translation_weight = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_translation_weight = this->_internal_local_slam_pose_translation_weight();
  uint64_t raw_local_slam_pose_translation_weight;
  memcpy(&raw_local_slam_pose_translation_weight, &tmp_local_slam_pose_translation_weight, sizeof(tmp_local_slam_pose_translation_weight));
  if (raw_local_slam_pose_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_local_slam_pose_translation_weight(), target);
  }

  // double local_slam_pose_rotation_weight = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_rotation_weight = this->_internal_local_slam_pose_rotation_weight();
  uint64_t raw_local_slam_pose_rotation_weight;
  memcpy(&raw_local_slam_pose_rotation_weight, &tmp_local_slam_pose_rotation_weight, sizeof(tmp_local_slam_pose_rotation_weight));
  if (raw_local_slam_pose_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_local_slam_pose_rotation_weight(), target);
  }

  // double odometry_translation_weight = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_translation_weight = this->_internal_odometry_translation_weight();
  uint64_t raw_odometry_translation_weight;
  memcpy(&raw_odometry_translation_weight, &tmp_odometry_translation_weight, sizeof(tmp_odometry_translation_weight));
  if (raw_odometry_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_odometry_translation_weight(), target);
  }

  // double odometry_rotation_weight = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_rotation_weight = this->_internal_odometry_rotation_weight();
  uint64_t raw_odometry_rotation_weight;
  memcpy(&raw_odometry_rotation_weight, &tmp_odometry_rotation_weight, sizeof(tmp_odometry_rotation_weight));
  if (raw_odometry_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_odometry_rotation_weight(), target);
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->_internal_use_online_imu_extrinsics_in_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_use_online_imu_extrinsics_in_3d(), target);
  }

  // bool fixed_frame_pose_use_tolerant_loss = 23;
  if (this->_internal_fixed_frame_pose_use_tolerant_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_fixed_frame_pose_use_tolerant_loss(), target);
  }

  // double fixed_frame_pose_tolerant_loss_param_a = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_a = this->_internal_fixed_frame_pose_tolerant_loss_param_a();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_a;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_a, &tmp_fixed_frame_pose_tolerant_loss_param_a, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_a));
  if (raw_fixed_frame_pose_tolerant_loss_param_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_fixed_frame_pose_tolerant_loss_param_a(), target);
  }

  // double fixed_frame_pose_tolerant_loss_param_b = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_b = this->_internal_fixed_frame_pose_tolerant_loss_param_b();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_b;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_b, &tmp_fixed_frame_pose_tolerant_loss_param_b, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_b));
  if (raw_fixed_frame_pose_tolerant_loss_param_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_fixed_frame_pose_tolerant_loss_param_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return target;
}

size_t OptimizationProblemOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->_internal_has_ceres_solver_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ceres_solver_options_);
  }

  // double huber_scale = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = this->_internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_weight = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_weight = this->_internal_acceleration_weight();
  uint64_t raw_acceleration_weight;
  memcpy(&raw_acceleration_weight, &tmp_acceleration_weight, sizeof(tmp_acceleration_weight));
  if (raw_acceleration_weight != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_translation_weight = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_translation_weight = this->_internal_fixed_frame_pose_translation_weight();
  uint64_t raw_fixed_frame_pose_translation_weight;
  memcpy(&raw_fixed_frame_pose_translation_weight, &tmp_fixed_frame_pose_translation_weight, sizeof(tmp_fixed_frame_pose_translation_weight));
  if (raw_fixed_frame_pose_translation_weight != 0) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_rotation_weight = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_rotation_weight = this->_internal_fixed_frame_pose_rotation_weight();
  uint64_t raw_fixed_frame_pose_rotation_weight;
  memcpy(&raw_fixed_frame_pose_rotation_weight, &tmp_fixed_frame_pose_rotation_weight, sizeof(tmp_fixed_frame_pose_rotation_weight));
  if (raw_fixed_frame_pose_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  // double local_slam_pose_translation_weight = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_translation_weight = this->_internal_local_slam_pose_translation_weight();
  uint64_t raw_local_slam_pose_translation_weight;
  memcpy(&raw_local_slam_pose_translation_weight, &tmp_local_slam_pose_translation_weight, sizeof(tmp_local_slam_pose_translation_weight));
  if (raw_local_slam_pose_translation_weight != 0) {
    total_size += 1 + 8;
  }

  // double local_slam_pose_rotation_weight = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_rotation_weight = this->_internal_local_slam_pose_rotation_weight();
  uint64_t raw_local_slam_pose_rotation_weight;
  memcpy(&raw_local_slam_pose_rotation_weight, &tmp_local_slam_pose_rotation_weight, sizeof(tmp_local_slam_pose_rotation_weight));
  if (raw_local_slam_pose_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  // double odometry_translation_weight = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_translation_weight = this->_internal_odometry_translation_weight();
  uint64_t raw_odometry_translation_weight;
  memcpy(&raw_odometry_translation_weight, &tmp_odometry_translation_weight, sizeof(tmp_odometry_translation_weight));
  if (raw_odometry_translation_weight != 0) {
    total_size += 2 + 8;
  }

  // double odometry_rotation_weight = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_rotation_weight = this->_internal_odometry_rotation_weight();
  uint64_t raw_odometry_rotation_weight;
  memcpy(&raw_odometry_rotation_weight, &tmp_odometry_rotation_weight, sizeof(tmp_odometry_rotation_weight));
  if (raw_odometry_rotation_weight != 0) {
    total_size += 2 + 8;
  }

  // double fixed_frame_pose_tolerant_loss_param_a = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_a = this->_internal_fixed_frame_pose_tolerant_loss_param_a();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_a;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_a, &tmp_fixed_frame_pose_tolerant_loss_param_a, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_a));
  if (raw_fixed_frame_pose_tolerant_loss_param_a != 0) {
    total_size += 2 + 8;
  }

  // double fixed_frame_pose_tolerant_loss_param_b = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_b = this->_internal_fixed_frame_pose_tolerant_loss_param_b();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_b;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_b, &tmp_fixed_frame_pose_tolerant_loss_param_b, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_b));
  if (raw_fixed_frame_pose_tolerant_loss_param_b != 0) {
    total_size += 2 + 8;
  }

  // bool fixed_frame_pose_use_tolerant_loss = 23;
  if (this->_internal_fixed_frame_pose_use_tolerant_loss() != 0) {
    total_size += 2 + 1;
  }

  // bool fix_z_in_3d = 13;
  if (this->_internal_fix_z_in_3d() != 0) {
    total_size += 1 + 1;
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->_internal_use_online_imu_extrinsics_in_3d() != 0) {
    total_size += 2 + 1;
  }

  // bool log_solver_summary = 5;
  if (this->_internal_log_solver_summary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimizationProblemOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptimizationProblemOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimizationProblemOptions::GetClassData() const { return &_class_data_; }


void OptimizationProblemOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptimizationProblemOptions*>(&to_msg);
  auto& from = static_cast<const OptimizationProblemOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ceres_solver_options()) {
    _this->_internal_mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(
        from._internal_ceres_solver_options());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_huber_scale = from._internal_huber_scale();
  uint64_t raw_huber_scale;
  memcpy(&raw_huber_scale, &tmp_huber_scale, sizeof(tmp_huber_scale));
  if (raw_huber_scale != 0) {
    _this->_internal_set_huber_scale(from._internal_huber_scale());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_weight = from._internal_acceleration_weight();
  uint64_t raw_acceleration_weight;
  memcpy(&raw_acceleration_weight, &tmp_acceleration_weight, sizeof(tmp_acceleration_weight));
  if (raw_acceleration_weight != 0) {
    _this->_internal_set_acceleration_weight(from._internal_acceleration_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = from._internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    _this->_internal_set_rotation_weight(from._internal_rotation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_translation_weight = from._internal_fixed_frame_pose_translation_weight();
  uint64_t raw_fixed_frame_pose_translation_weight;
  memcpy(&raw_fixed_frame_pose_translation_weight, &tmp_fixed_frame_pose_translation_weight, sizeof(tmp_fixed_frame_pose_translation_weight));
  if (raw_fixed_frame_pose_translation_weight != 0) {
    _this->_internal_set_fixed_frame_pose_translation_weight(from._internal_fixed_frame_pose_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_rotation_weight = from._internal_fixed_frame_pose_rotation_weight();
  uint64_t raw_fixed_frame_pose_rotation_weight;
  memcpy(&raw_fixed_frame_pose_rotation_weight, &tmp_fixed_frame_pose_rotation_weight, sizeof(tmp_fixed_frame_pose_rotation_weight));
  if (raw_fixed_frame_pose_rotation_weight != 0) {
    _this->_internal_set_fixed_frame_pose_rotation_weight(from._internal_fixed_frame_pose_rotation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_translation_weight = from._internal_local_slam_pose_translation_weight();
  uint64_t raw_local_slam_pose_translation_weight;
  memcpy(&raw_local_slam_pose_translation_weight, &tmp_local_slam_pose_translation_weight, sizeof(tmp_local_slam_pose_translation_weight));
  if (raw_local_slam_pose_translation_weight != 0) {
    _this->_internal_set_local_slam_pose_translation_weight(from._internal_local_slam_pose_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_local_slam_pose_rotation_weight = from._internal_local_slam_pose_rotation_weight();
  uint64_t raw_local_slam_pose_rotation_weight;
  memcpy(&raw_local_slam_pose_rotation_weight, &tmp_local_slam_pose_rotation_weight, sizeof(tmp_local_slam_pose_rotation_weight));
  if (raw_local_slam_pose_rotation_weight != 0) {
    _this->_internal_set_local_slam_pose_rotation_weight(from._internal_local_slam_pose_rotation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_translation_weight = from._internal_odometry_translation_weight();
  uint64_t raw_odometry_translation_weight;
  memcpy(&raw_odometry_translation_weight, &tmp_odometry_translation_weight, sizeof(tmp_odometry_translation_weight));
  if (raw_odometry_translation_weight != 0) {
    _this->_internal_set_odometry_translation_weight(from._internal_odometry_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometry_rotation_weight = from._internal_odometry_rotation_weight();
  uint64_t raw_odometry_rotation_weight;
  memcpy(&raw_odometry_rotation_weight, &tmp_odometry_rotation_weight, sizeof(tmp_odometry_rotation_weight));
  if (raw_odometry_rotation_weight != 0) {
    _this->_internal_set_odometry_rotation_weight(from._internal_odometry_rotation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_a = from._internal_fixed_frame_pose_tolerant_loss_param_a();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_a;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_a, &tmp_fixed_frame_pose_tolerant_loss_param_a, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_a));
  if (raw_fixed_frame_pose_tolerant_loss_param_a != 0) {
    _this->_internal_set_fixed_frame_pose_tolerant_loss_param_a(from._internal_fixed_frame_pose_tolerant_loss_param_a());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fixed_frame_pose_tolerant_loss_param_b = from._internal_fixed_frame_pose_tolerant_loss_param_b();
  uint64_t raw_fixed_frame_pose_tolerant_loss_param_b;
  memcpy(&raw_fixed_frame_pose_tolerant_loss_param_b, &tmp_fixed_frame_pose_tolerant_loss_param_b, sizeof(tmp_fixed_frame_pose_tolerant_loss_param_b));
  if (raw_fixed_frame_pose_tolerant_loss_param_b != 0) {
    _this->_internal_set_fixed_frame_pose_tolerant_loss_param_b(from._internal_fixed_frame_pose_tolerant_loss_param_b());
  }
  if (from._internal_fixed_frame_pose_use_tolerant_loss() != 0) {
    _this->_internal_set_fixed_frame_pose_use_tolerant_loss(from._internal_fixed_frame_pose_use_tolerant_loss());
  }
  if (from._internal_fix_z_in_3d() != 0) {
    _this->_internal_set_fix_z_in_3d(from._internal_fix_z_in_3d());
  }
  if (from._internal_use_online_imu_extrinsics_in_3d() != 0) {
    _this->_internal_set_use_online_imu_extrinsics_in_3d(from._internal_use_online_imu_extrinsics_in_3d());
  }
  if (from._internal_log_solver_summary() != 0) {
    _this->_internal_set_log_solver_summary(from._internal_log_solver_summary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimizationProblemOptions::CopyFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationProblemOptions::IsInitialized() const {
  return true;
}

void OptimizationProblemOptions::InternalSwap(OptimizationProblemOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptimizationProblemOptions, _impl_.log_solver_summary_)
      + sizeof(OptimizationProblemOptions::_impl_.log_solver_summary_)
      - PROTOBUF_FIELD_OFFSET(OptimizationProblemOptions, _impl_.ceres_solver_options_)>(
          reinterpret_cast<char*>(&_impl_.ceres_solver_options_),
          reinterpret_cast<char*>(&other->_impl_.ceres_solver_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimizationProblemOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::optimization::proto::OptimizationProblemOptions*
Arena::CreateMaybeMessage< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
