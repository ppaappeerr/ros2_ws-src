// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/constraint_builder_options.proto

#include "cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {
PROTOBUF_CONSTEXPR ConstraintBuilderOptions::ConstraintBuilderOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fast_correlative_scan_matcher_options_)*/nullptr
  , /*decltype(_impl_.fast_correlative_scan_matcher_options_3d_)*/nullptr
  , /*decltype(_impl_.ceres_scan_matcher_options_)*/nullptr
  , /*decltype(_impl_.ceres_scan_matcher_options_3d_)*/nullptr
  , /*decltype(_impl_.sampling_ratio_)*/0
  , /*decltype(_impl_.max_constraint_distance_)*/0
  , /*decltype(_impl_.min_score_)*/0
  , /*decltype(_impl_.global_localization_min_score_)*/0
  , /*decltype(_impl_.loop_closure_translation_weight_)*/0
  , /*decltype(_impl_.loop_closure_rotation_weight_)*/0
  , /*decltype(_impl_.log_matches_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConstraintBuilderOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstraintBuilderOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstraintBuilderOptionsDefaultTypeInternal() {}
  union {
    ConstraintBuilderOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstraintBuilderOptionsDefaultTypeInternal _ConstraintBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.sampling_ratio_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.max_constraint_distance_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.min_score_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.global_localization_min_score_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.loop_closure_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.loop_closure_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.log_matches_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.fast_correlative_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.ceres_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.fast_correlative_scan_matcher_options_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _impl_.ceres_scan_matcher_options_3d_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nFcartographer/mapping/proto/pose_graph/"
  "constraint_builder_options.proto\022&cartog"
  "rapher.mapping.constraints.proto\032Lcartog"
  "rapher/mapping/proto/scan_matching/ceres"
  "_scan_matcher_options_2d.proto\032Lcartogra"
  "pher/mapping/proto/scan_matching/ceres_s"
  "can_matcher_options_3d.proto\032Wcartograph"
  "er/mapping/proto/scan_matching/fast_corr"
  "elative_scan_matcher_options_2d.proto\032Wc"
  "artographer/mapping/proto/scan_matching/"
  "fast_correlative_scan_matcher_options_3d"
  ".proto\"\305\005\n\030ConstraintBuilderOptions\022\026\n\016s"
  "ampling_ratio\030\001 \001(\001\022\037\n\027max_constraint_di"
  "stance\030\002 \001(\001\022\021\n\tmin_score\030\004 \001(\001\022%\n\035globa"
  "l_localization_min_score\030\005 \001(\001\022\'\n\037loop_c"
  "losure_translation_weight\030\r \001(\001\022$\n\034loop_"
  "closure_rotation_weight\030\016 \001(\001\022\023\n\013log_mat"
  "ches\030\010 \001(\010\022|\n%fast_correlative_scan_matc"
  "her_options\030\t \001(\0132M.cartographer.mapping"
  ".scan_matching.proto.FastCorrelativeScan"
  "MatcherOptions2D\022g\n\032ceres_scan_matcher_o"
  "ptions\030\013 \001(\0132C.cartographer.mapping.scan"
  "_matching.proto.CeresScanMatcherOptions2"
  "D\022\177\n(fast_correlative_scan_matcher_optio"
  "ns_3d\030\n \001(\0132M.cartographer.mapping.scan_"
  "matching.proto.FastCorrelativeScanMatche"
  "rOptions3D\022j\n\035ceres_scan_matcher_options"
  "_3d\030\014 \001(\0132C.cartographer.mapping.scan_ma"
  "tching.proto.CeresScanMatcherOptions3Db\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_deps[4] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto = {
    false, false, 1166, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto,
    "cartographer/mapping/proto/pose_graph/constraint_builder_options.proto",
    &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::offsets,
    file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto,
    file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto);
namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {

// ===================================================================

class ConstraintBuilderOptions::_Internal {
 public:
  static const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& fast_correlative_scan_matcher_options(const ConstraintBuilderOptions* msg);
  static const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options(const ConstraintBuilderOptions* msg);
  static const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& fast_correlative_scan_matcher_options_3d(const ConstraintBuilderOptions* msg);
  static const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ceres_scan_matcher_options_3d(const ConstraintBuilderOptions* msg);
};

const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D&
ConstraintBuilderOptions::_Internal::fast_correlative_scan_matcher_options(const ConstraintBuilderOptions* msg) {
  return *msg->_impl_.fast_correlative_scan_matcher_options_;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D&
ConstraintBuilderOptions::_Internal::ceres_scan_matcher_options(const ConstraintBuilderOptions* msg) {
  return *msg->_impl_.ceres_scan_matcher_options_;
}
const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D&
ConstraintBuilderOptions::_Internal::fast_correlative_scan_matcher_options_3d(const ConstraintBuilderOptions* msg) {
  return *msg->_impl_.fast_correlative_scan_matcher_options_3d_;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D&
ConstraintBuilderOptions::_Internal::ceres_scan_matcher_options_3d(const ConstraintBuilderOptions* msg) {
  return *msg->_impl_.ceres_scan_matcher_options_3d_;
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.fast_correlative_scan_matcher_options_ != nullptr) {
    delete _impl_.fast_correlative_scan_matcher_options_;
  }
  _impl_.fast_correlative_scan_matcher_options_ = nullptr;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_;
  }
  _impl_.ceres_scan_matcher_options_ = nullptr;
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d() {
  if (GetArenaForAllocation() == nullptr && _impl_.fast_correlative_scan_matcher_options_3d_ != nullptr) {
    delete _impl_.fast_correlative_scan_matcher_options_3d_;
  }
  _impl_.fast_correlative_scan_matcher_options_3d_ = nullptr;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d() {
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_3d_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_3d_;
  }
  _impl_.ceres_scan_matcher_options_3d_ = nullptr;
}
ConstraintBuilderOptions::ConstraintBuilderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
}
ConstraintBuilderOptions::ConstraintBuilderOptions(const ConstraintBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConstraintBuilderOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fast_correlative_scan_matcher_options_){nullptr}
    , decltype(_impl_.fast_correlative_scan_matcher_options_3d_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_3d_){nullptr}
    , decltype(_impl_.sampling_ratio_){}
    , decltype(_impl_.max_constraint_distance_){}
    , decltype(_impl_.min_score_){}
    , decltype(_impl_.global_localization_min_score_){}
    , decltype(_impl_.loop_closure_translation_weight_){}
    , decltype(_impl_.loop_closure_rotation_weight_){}
    , decltype(_impl_.log_matches_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fast_correlative_scan_matcher_options()) {
    _this->_impl_.fast_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D(*from._impl_.fast_correlative_scan_matcher_options_);
  }
  if (from._internal_has_fast_correlative_scan_matcher_options_3d()) {
    _this->_impl_.fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D(*from._impl_.fast_correlative_scan_matcher_options_3d_);
  }
  if (from._internal_has_ceres_scan_matcher_options()) {
    _this->_impl_.ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D(*from._impl_.ceres_scan_matcher_options_);
  }
  if (from._internal_has_ceres_scan_matcher_options_3d()) {
    _this->_impl_.ceres_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D(*from._impl_.ceres_scan_matcher_options_3d_);
  }
  ::memcpy(&_impl_.sampling_ratio_, &from._impl_.sampling_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_matches_) -
    reinterpret_cast<char*>(&_impl_.sampling_ratio_)) + sizeof(_impl_.log_matches_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
}

inline void ConstraintBuilderOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fast_correlative_scan_matcher_options_){nullptr}
    , decltype(_impl_.fast_correlative_scan_matcher_options_3d_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_){nullptr}
    , decltype(_impl_.ceres_scan_matcher_options_3d_){nullptr}
    , decltype(_impl_.sampling_ratio_){0}
    , decltype(_impl_.max_constraint_distance_){0}
    , decltype(_impl_.min_score_){0}
    , decltype(_impl_.global_localization_min_score_){0}
    , decltype(_impl_.loop_closure_translation_weight_){0}
    , decltype(_impl_.loop_closure_rotation_weight_){0}
    , decltype(_impl_.log_matches_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConstraintBuilderOptions::~ConstraintBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConstraintBuilderOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fast_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete _impl_.fast_correlative_scan_matcher_options_3d_;
  if (this != internal_default_instance()) delete _impl_.ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete _impl_.ceres_scan_matcher_options_3d_;
}

void ConstraintBuilderOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConstraintBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fast_correlative_scan_matcher_options_ != nullptr) {
    delete _impl_.fast_correlative_scan_matcher_options_;
  }
  _impl_.fast_correlative_scan_matcher_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fast_correlative_scan_matcher_options_3d_ != nullptr) {
    delete _impl_.fast_correlative_scan_matcher_options_3d_;
  }
  _impl_.fast_correlative_scan_matcher_options_3d_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_;
  }
  _impl_.ceres_scan_matcher_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ceres_scan_matcher_options_3d_ != nullptr) {
    delete _impl_.ceres_scan_matcher_options_3d_;
  }
  _impl_.ceres_scan_matcher_options_3d_ = nullptr;
  ::memset(&_impl_.sampling_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_matches_) -
      reinterpret_cast<char*>(&_impl_.sampling_ratio_)) + sizeof(_impl_.log_matches_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintBuilderOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double sampling_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.sampling_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_constraint_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_constraint_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double global_localization_min_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.global_localization_min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool log_matches = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.log_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_correlative_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_correlative_scan_matcher_options_3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_scan_matcher_options_3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double loop_closure_translation_weight = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.loop_closure_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double loop_closure_rotation_weight = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.loop_closure_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstraintBuilderOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double sampling_ratio = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_ratio = this->_internal_sampling_ratio();
  uint64_t raw_sampling_ratio;
  memcpy(&raw_sampling_ratio, &tmp_sampling_ratio, sizeof(tmp_sampling_ratio));
  if (raw_sampling_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_sampling_ratio(), target);
  }

  // double max_constraint_distance = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_distance = this->_internal_max_constraint_distance();
  uint64_t raw_max_constraint_distance;
  memcpy(&raw_max_constraint_distance, &tmp_max_constraint_distance, sizeof(tmp_max_constraint_distance));
  if (raw_max_constraint_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_constraint_distance(), target);
  }

  // double min_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = this->_internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_score(), target);
  }

  // double global_localization_min_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_global_localization_min_score = this->_internal_global_localization_min_score();
  uint64_t raw_global_localization_min_score;
  memcpy(&raw_global_localization_min_score, &tmp_global_localization_min_score, sizeof(tmp_global_localization_min_score));
  if (raw_global_localization_min_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_global_localization_min_score(), target);
  }

  // bool log_matches = 8;
  if (this->_internal_log_matches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_log_matches(), target);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  if (this->_internal_has_fast_correlative_scan_matcher_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::fast_correlative_scan_matcher_options(this),
        _Internal::fast_correlative_scan_matcher_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  if (this->_internal_has_fast_correlative_scan_matcher_options_3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::fast_correlative_scan_matcher_options_3d(this),
        _Internal::fast_correlative_scan_matcher_options_3d(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  if (this->_internal_has_ceres_scan_matcher_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ceres_scan_matcher_options(this),
        _Internal::ceres_scan_matcher_options(this).GetCachedSize(), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  if (this->_internal_has_ceres_scan_matcher_options_3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::ceres_scan_matcher_options_3d(this),
        _Internal::ceres_scan_matcher_options_3d(this).GetCachedSize(), target, stream);
  }

  // double loop_closure_translation_weight = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_translation_weight = this->_internal_loop_closure_translation_weight();
  uint64_t raw_loop_closure_translation_weight;
  memcpy(&raw_loop_closure_translation_weight, &tmp_loop_closure_translation_weight, sizeof(tmp_loop_closure_translation_weight));
  if (raw_loop_closure_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_loop_closure_translation_weight(), target);
  }

  // double loop_closure_rotation_weight = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_rotation_weight = this->_internal_loop_closure_rotation_weight();
  uint64_t raw_loop_closure_rotation_weight;
  memcpy(&raw_loop_closure_rotation_weight, &tmp_loop_closure_rotation_weight, sizeof(tmp_loop_closure_rotation_weight));
  if (raw_loop_closure_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_loop_closure_rotation_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  return target;
}

size_t ConstraintBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  if (this->_internal_has_fast_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fast_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  if (this->_internal_has_fast_correlative_scan_matcher_options_3d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fast_correlative_scan_matcher_options_3d_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  if (this->_internal_has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  if (this->_internal_has_ceres_scan_matcher_options_3d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ceres_scan_matcher_options_3d_);
  }

  // double sampling_ratio = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_ratio = this->_internal_sampling_ratio();
  uint64_t raw_sampling_ratio;
  memcpy(&raw_sampling_ratio, &tmp_sampling_ratio, sizeof(tmp_sampling_ratio));
  if (raw_sampling_ratio != 0) {
    total_size += 1 + 8;
  }

  // double max_constraint_distance = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_distance = this->_internal_max_constraint_distance();
  uint64_t raw_max_constraint_distance;
  memcpy(&raw_max_constraint_distance, &tmp_max_constraint_distance, sizeof(tmp_max_constraint_distance));
  if (raw_max_constraint_distance != 0) {
    total_size += 1 + 8;
  }

  // double min_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = this->_internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    total_size += 1 + 8;
  }

  // double global_localization_min_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_global_localization_min_score = this->_internal_global_localization_min_score();
  uint64_t raw_global_localization_min_score;
  memcpy(&raw_global_localization_min_score, &tmp_global_localization_min_score, sizeof(tmp_global_localization_min_score));
  if (raw_global_localization_min_score != 0) {
    total_size += 1 + 8;
  }

  // double loop_closure_translation_weight = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_translation_weight = this->_internal_loop_closure_translation_weight();
  uint64_t raw_loop_closure_translation_weight;
  memcpy(&raw_loop_closure_translation_weight, &tmp_loop_closure_translation_weight, sizeof(tmp_loop_closure_translation_weight));
  if (raw_loop_closure_translation_weight != 0) {
    total_size += 1 + 8;
  }

  // double loop_closure_rotation_weight = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_rotation_weight = this->_internal_loop_closure_rotation_weight();
  uint64_t raw_loop_closure_rotation_weight;
  memcpy(&raw_loop_closure_rotation_weight, &tmp_loop_closure_rotation_weight, sizeof(tmp_loop_closure_rotation_weight));
  if (raw_loop_closure_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  // bool log_matches = 8;
  if (this->_internal_log_matches() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstraintBuilderOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConstraintBuilderOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstraintBuilderOptions::GetClassData() const { return &_class_data_; }


void ConstraintBuilderOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConstraintBuilderOptions*>(&to_msg);
  auto& from = static_cast<const ConstraintBuilderOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fast_correlative_scan_matcher_options()) {
    _this->_internal_mutable_fast_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D::MergeFrom(
        from._internal_fast_correlative_scan_matcher_options());
  }
  if (from._internal_has_fast_correlative_scan_matcher_options_3d()) {
    _this->_internal_mutable_fast_correlative_scan_matcher_options_3d()->::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D::MergeFrom(
        from._internal_fast_correlative_scan_matcher_options_3d());
  }
  if (from._internal_has_ceres_scan_matcher_options()) {
    _this->_internal_mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(
        from._internal_ceres_scan_matcher_options());
  }
  if (from._internal_has_ceres_scan_matcher_options_3d()) {
    _this->_internal_mutable_ceres_scan_matcher_options_3d()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::MergeFrom(
        from._internal_ceres_scan_matcher_options_3d());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_ratio = from._internal_sampling_ratio();
  uint64_t raw_sampling_ratio;
  memcpy(&raw_sampling_ratio, &tmp_sampling_ratio, sizeof(tmp_sampling_ratio));
  if (raw_sampling_ratio != 0) {
    _this->_internal_set_sampling_ratio(from._internal_sampling_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_distance = from._internal_max_constraint_distance();
  uint64_t raw_max_constraint_distance;
  memcpy(&raw_max_constraint_distance, &tmp_max_constraint_distance, sizeof(tmp_max_constraint_distance));
  if (raw_max_constraint_distance != 0) {
    _this->_internal_set_max_constraint_distance(from._internal_max_constraint_distance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = from._internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    _this->_internal_set_min_score(from._internal_min_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_global_localization_min_score = from._internal_global_localization_min_score();
  uint64_t raw_global_localization_min_score;
  memcpy(&raw_global_localization_min_score, &tmp_global_localization_min_score, sizeof(tmp_global_localization_min_score));
  if (raw_global_localization_min_score != 0) {
    _this->_internal_set_global_localization_min_score(from._internal_global_localization_min_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_translation_weight = from._internal_loop_closure_translation_weight();
  uint64_t raw_loop_closure_translation_weight;
  memcpy(&raw_loop_closure_translation_weight, &tmp_loop_closure_translation_weight, sizeof(tmp_loop_closure_translation_weight));
  if (raw_loop_closure_translation_weight != 0) {
    _this->_internal_set_loop_closure_translation_weight(from._internal_loop_closure_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loop_closure_rotation_weight = from._internal_loop_closure_rotation_weight();
  uint64_t raw_loop_closure_rotation_weight;
  memcpy(&raw_loop_closure_rotation_weight, &tmp_loop_closure_rotation_weight, sizeof(tmp_loop_closure_rotation_weight));
  if (raw_loop_closure_rotation_weight != 0) {
    _this->_internal_set_loop_closure_rotation_weight(from._internal_loop_closure_rotation_weight());
  }
  if (from._internal_log_matches() != 0) {
    _this->_internal_set_log_matches(from._internal_log_matches());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstraintBuilderOptions::CopyFrom(const ConstraintBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintBuilderOptions::IsInitialized() const {
  return true;
}

void ConstraintBuilderOptions::InternalSwap(ConstraintBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConstraintBuilderOptions, _impl_.log_matches_)
      + sizeof(ConstraintBuilderOptions::_impl_.log_matches_)
      - PROTOBUF_FIELD_OFFSET(ConstraintBuilderOptions, _impl_.fast_correlative_scan_matcher_options_)>(
          reinterpret_cast<char*>(&_impl_.fast_correlative_scan_matcher_options_),
          reinterpret_cast<char*>(&other->_impl_.fast_correlative_scan_matcher_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintBuilderOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions*
Arena::CreateMaybeMessage< ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
