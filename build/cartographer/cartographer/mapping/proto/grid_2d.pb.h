// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/grid_2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/map_limits.pb.h"
#include "cartographer/mapping/proto/probability_grid.pb.h"
#include "cartographer/mapping/proto/tsdf_2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class Grid2D;
struct Grid2DDefaultTypeInternal;
extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
class Grid2D_CellBox;
struct Grid2D_CellBoxDefaultTypeInternal;
extern Grid2D_CellBoxDefaultTypeInternal _Grid2D_CellBox_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::Grid2D* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Grid2D>(Arena*);
template<> ::cartographer::mapping::proto::Grid2D_CellBox* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Grid2D_CellBox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class Grid2D_CellBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Grid2D.CellBox) */ {
 public:
  inline Grid2D_CellBox() : Grid2D_CellBox(nullptr) {}
  ~Grid2D_CellBox() override;
  explicit PROTOBUF_CONSTEXPR Grid2D_CellBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid2D_CellBox(const Grid2D_CellBox& from);
  Grid2D_CellBox(Grid2D_CellBox&& from) noexcept
    : Grid2D_CellBox() {
    *this = ::std::move(from);
  }

  inline Grid2D_CellBox& operator=(const Grid2D_CellBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid2D_CellBox& operator=(Grid2D_CellBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grid2D_CellBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grid2D_CellBox* internal_default_instance() {
    return reinterpret_cast<const Grid2D_CellBox*>(
               &_Grid2D_CellBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Grid2D_CellBox& a, Grid2D_CellBox& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid2D_CellBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid2D_CellBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grid2D_CellBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grid2D_CellBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Grid2D_CellBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Grid2D_CellBox& from) {
    Grid2D_CellBox::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid2D_CellBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Grid2D.CellBox";
  }
  protected:
  explicit Grid2D_CellBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxXFieldNumber = 1,
    kMaxYFieldNumber = 2,
    kMinXFieldNumber = 3,
    kMinYFieldNumber = 4,
  };
  // int32 max_x = 1;
  void clear_max_x();
  int32_t max_x() const;
  void set_max_x(int32_t value);
  private:
  int32_t _internal_max_x() const;
  void _internal_set_max_x(int32_t value);
  public:

  // int32 max_y = 2;
  void clear_max_y();
  int32_t max_y() const;
  void set_max_y(int32_t value);
  private:
  int32_t _internal_max_y() const;
  void _internal_set_max_y(int32_t value);
  public:

  // int32 min_x = 3;
  void clear_min_x();
  int32_t min_x() const;
  void set_min_x(int32_t value);
  private:
  int32_t _internal_min_x() const;
  void _internal_set_min_x(int32_t value);
  public:

  // int32 min_y = 4;
  void clear_min_y();
  int32_t min_y() const;
  void set_min_y(int32_t value);
  private:
  int32_t _internal_min_y() const;
  void _internal_set_min_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Grid2D.CellBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t max_x_;
    int32_t max_y_;
    int32_t min_x_;
    int32_t min_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto;
};
// -------------------------------------------------------------------

class Grid2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Grid2D) */ {
 public:
  inline Grid2D() : Grid2D(nullptr) {}
  ~Grid2D() override;
  explicit PROTOBUF_CONSTEXPR Grid2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grid2D(const Grid2D& from);
  Grid2D(Grid2D&& from) noexcept
    : Grid2D() {
    *this = ::std::move(from);
  }

  inline Grid2D& operator=(const Grid2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid2D& operator=(Grid2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grid2D& default_instance() {
    return *internal_default_instance();
  }
  enum GridCase {
    kProbabilityGrid2D = 4,
    kTsdf2D = 5,
    GRID_NOT_SET = 0,
  };

  static inline const Grid2D* internal_default_instance() {
    return reinterpret_cast<const Grid2D*>(
               &_Grid2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Grid2D& a, Grid2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grid2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grid2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Grid2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Grid2D& from) {
    Grid2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Grid2D";
  }
  protected:
  explicit Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Grid2D_CellBox CellBox;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kLimitsFieldNumber = 1,
    kKnownCellsBoxFieldNumber = 3,
    kMinCorrespondenceCostFieldNumber = 6,
    kMaxCorrespondenceCostFieldNumber = 7,
    kProbabilityGrid2DFieldNumber = 4,
    kTsdf2DFieldNumber = 5,
  };
  // repeated int32 cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  private:
  int32_t _internal_cells(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cells() const;
  void _internal_add_cells(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cells();
  public:
  int32_t cells(int index) const;
  void set_cells(int index, int32_t value);
  void add_cells(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cells() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cells();

  // .cartographer.mapping.proto.MapLimits limits = 1;
  bool has_limits() const;
  private:
  bool _internal_has_limits() const;
  public:
  void clear_limits();
  const ::cartographer::mapping::proto::MapLimits& limits() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::MapLimits* release_limits();
  ::cartographer::mapping::proto::MapLimits* mutable_limits();
  void set_allocated_limits(::cartographer::mapping::proto::MapLimits* limits);
  private:
  const ::cartographer::mapping::proto::MapLimits& _internal_limits() const;
  ::cartographer::mapping::proto::MapLimits* _internal_mutable_limits();
  public:
  void unsafe_arena_set_allocated_limits(
      ::cartographer::mapping::proto::MapLimits* limits);
  ::cartographer::mapping::proto::MapLimits* unsafe_arena_release_limits();

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  bool has_known_cells_box() const;
  private:
  bool _internal_has_known_cells_box() const;
  public:
  void clear_known_cells_box();
  const ::cartographer::mapping::proto::Grid2D_CellBox& known_cells_box() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::Grid2D_CellBox* release_known_cells_box();
  ::cartographer::mapping::proto::Grid2D_CellBox* mutable_known_cells_box();
  void set_allocated_known_cells_box(::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box);
  private:
  const ::cartographer::mapping::proto::Grid2D_CellBox& _internal_known_cells_box() const;
  ::cartographer::mapping::proto::Grid2D_CellBox* _internal_mutable_known_cells_box();
  public:
  void unsafe_arena_set_allocated_known_cells_box(
      ::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box);
  ::cartographer::mapping::proto::Grid2D_CellBox* unsafe_arena_release_known_cells_box();

  // float min_correspondence_cost = 6;
  void clear_min_correspondence_cost();
  float min_correspondence_cost() const;
  void set_min_correspondence_cost(float value);
  private:
  float _internal_min_correspondence_cost() const;
  void _internal_set_min_correspondence_cost(float value);
  public:

  // float max_correspondence_cost = 7;
  void clear_max_correspondence_cost();
  float max_correspondence_cost() const;
  void set_max_correspondence_cost(float value);
  private:
  float _internal_max_correspondence_cost() const;
  void _internal_set_max_correspondence_cost(float value);
  public:

  // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  bool has_probability_grid_2d() const;
  private:
  bool _internal_has_probability_grid_2d() const;
  public:
  void clear_probability_grid_2d();
  const ::cartographer::mapping::proto::ProbabilityGrid& probability_grid_2d() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::ProbabilityGrid* release_probability_grid_2d();
  ::cartographer::mapping::proto::ProbabilityGrid* mutable_probability_grid_2d();
  void set_allocated_probability_grid_2d(::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d);
  private:
  const ::cartographer::mapping::proto::ProbabilityGrid& _internal_probability_grid_2d() const;
  ::cartographer::mapping::proto::ProbabilityGrid* _internal_mutable_probability_grid_2d();
  public:
  void unsafe_arena_set_allocated_probability_grid_2d(
      ::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d);
  ::cartographer::mapping::proto::ProbabilityGrid* unsafe_arena_release_probability_grid_2d();

  // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
  bool has_tsdf_2d() const;
  private:
  bool _internal_has_tsdf_2d() const;
  public:
  void clear_tsdf_2d();
  const ::cartographer::mapping::proto::TSDF2D& tsdf_2d() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::TSDF2D* release_tsdf_2d();
  ::cartographer::mapping::proto::TSDF2D* mutable_tsdf_2d();
  void set_allocated_tsdf_2d(::cartographer::mapping::proto::TSDF2D* tsdf_2d);
  private:
  const ::cartographer::mapping::proto::TSDF2D& _internal_tsdf_2d() const;
  ::cartographer::mapping::proto::TSDF2D* _internal_mutable_tsdf_2d();
  public:
  void unsafe_arena_set_allocated_tsdf_2d(
      ::cartographer::mapping::proto::TSDF2D* tsdf_2d);
  ::cartographer::mapping::proto::TSDF2D* unsafe_arena_release_tsdf_2d();

  void clear_grid();
  GridCase grid_case() const;
  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Grid2D)
 private:
  class _Internal;
  void set_has_probability_grid_2d();
  void set_has_tsdf_2d();

  inline bool has_grid() const;
  inline void clear_has_grid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cells_;
    mutable std::atomic<int> _cells_cached_byte_size_;
    ::cartographer::mapping::proto::MapLimits* limits_;
    ::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box_;
    float min_correspondence_cost_;
    float max_correspondence_cost_;
    union GridUnion {
      constexpr GridUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d_;
      ::cartographer::mapping::proto::TSDF2D* tsdf_2d_;
    } grid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Grid2D_CellBox

// int32 max_x = 1;
inline void Grid2D_CellBox::clear_max_x() {
  _impl_.max_x_ = 0;
}
inline int32_t Grid2D_CellBox::_internal_max_x() const {
  return _impl_.max_x_;
}
inline int32_t Grid2D_CellBox::max_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.max_x)
  return _internal_max_x();
}
inline void Grid2D_CellBox::_internal_set_max_x(int32_t value) {
  
  _impl_.max_x_ = value;
}
inline void Grid2D_CellBox::set_max_x(int32_t value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.max_x)
}

// int32 max_y = 2;
inline void Grid2D_CellBox::clear_max_y() {
  _impl_.max_y_ = 0;
}
inline int32_t Grid2D_CellBox::_internal_max_y() const {
  return _impl_.max_y_;
}
inline int32_t Grid2D_CellBox::max_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.max_y)
  return _internal_max_y();
}
inline void Grid2D_CellBox::_internal_set_max_y(int32_t value) {
  
  _impl_.max_y_ = value;
}
inline void Grid2D_CellBox::set_max_y(int32_t value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.max_y)
}

// int32 min_x = 3;
inline void Grid2D_CellBox::clear_min_x() {
  _impl_.min_x_ = 0;
}
inline int32_t Grid2D_CellBox::_internal_min_x() const {
  return _impl_.min_x_;
}
inline int32_t Grid2D_CellBox::min_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.min_x)
  return _internal_min_x();
}
inline void Grid2D_CellBox::_internal_set_min_x(int32_t value) {
  
  _impl_.min_x_ = value;
}
inline void Grid2D_CellBox::set_min_x(int32_t value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.min_x)
}

// int32 min_y = 4;
inline void Grid2D_CellBox::clear_min_y() {
  _impl_.min_y_ = 0;
}
inline int32_t Grid2D_CellBox::_internal_min_y() const {
  return _impl_.min_y_;
}
inline int32_t Grid2D_CellBox::min_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.min_y)
  return _internal_min_y();
}
inline void Grid2D_CellBox::_internal_set_min_y(int32_t value) {
  
  _impl_.min_y_ = value;
}
inline void Grid2D_CellBox::set_min_y(int32_t value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.min_y)
}

// -------------------------------------------------------------------

// Grid2D

// .cartographer.mapping.proto.MapLimits limits = 1;
inline bool Grid2D::_internal_has_limits() const {
  return this != internal_default_instance() && _impl_.limits_ != nullptr;
}
inline bool Grid2D::has_limits() const {
  return _internal_has_limits();
}
inline const ::cartographer::mapping::proto::MapLimits& Grid2D::_internal_limits() const {
  const ::cartographer::mapping::proto::MapLimits* p = _impl_.limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::MapLimits&>(
      ::cartographer::mapping::proto::_MapLimits_default_instance_);
}
inline const ::cartographer::mapping::proto::MapLimits& Grid2D::limits() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.limits)
  return _internal_limits();
}
inline void Grid2D::unsafe_arena_set_allocated_limits(
    ::cartographer::mapping::proto::MapLimits* limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limits_);
  }
  _impl_.limits_ = limits;
  if (limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Grid2D.limits)
}
inline ::cartographer::mapping::proto::MapLimits* Grid2D::release_limits() {
  
  ::cartographer::mapping::proto::MapLimits* temp = _impl_.limits_;
  _impl_.limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::MapLimits* Grid2D::unsafe_arena_release_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.limits)
  
  ::cartographer::mapping::proto::MapLimits* temp = _impl_.limits_;
  _impl_.limits_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::MapLimits* Grid2D::_internal_mutable_limits() {
  
  if (_impl_.limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::MapLimits>(GetArenaForAllocation());
    _impl_.limits_ = p;
  }
  return _impl_.limits_;
}
inline ::cartographer::mapping::proto::MapLimits* Grid2D::mutable_limits() {
  ::cartographer::mapping::proto::MapLimits* _msg = _internal_mutable_limits();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.limits)
  return _msg;
}
inline void Grid2D::set_allocated_limits(::cartographer::mapping::proto::MapLimits* limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limits_);
  }
  if (limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limits));
    if (message_arena != submessage_arena) {
      limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.limits)
}

// repeated int32 cells = 2;
inline int Grid2D::_internal_cells_size() const {
  return _impl_.cells_.size();
}
inline int Grid2D::cells_size() const {
  return _internal_cells_size();
}
inline void Grid2D::clear_cells() {
  _impl_.cells_.Clear();
}
inline int32_t Grid2D::_internal_cells(int index) const {
  return _impl_.cells_.Get(index);
}
inline int32_t Grid2D::cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.cells)
  return _internal_cells(index);
}
inline void Grid2D::set_cells(int index, int32_t value) {
  _impl_.cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.cells)
}
inline void Grid2D::_internal_add_cells(int32_t value) {
  _impl_.cells_.Add(value);
}
inline void Grid2D::add_cells(int32_t value) {
  _internal_add_cells(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Grid2D.cells)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Grid2D::_internal_cells() const {
  return _impl_.cells_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Grid2D::cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Grid2D.cells)
  return _internal_cells();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Grid2D::_internal_mutable_cells() {
  return &_impl_.cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Grid2D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Grid2D.cells)
  return _internal_mutable_cells();
}

// .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
inline bool Grid2D::_internal_has_known_cells_box() const {
  return this != internal_default_instance() && _impl_.known_cells_box_ != nullptr;
}
inline bool Grid2D::has_known_cells_box() const {
  return _internal_has_known_cells_box();
}
inline void Grid2D::clear_known_cells_box() {
  if (GetArenaForAllocation() == nullptr && _impl_.known_cells_box_ != nullptr) {
    delete _impl_.known_cells_box_;
  }
  _impl_.known_cells_box_ = nullptr;
}
inline const ::cartographer::mapping::proto::Grid2D_CellBox& Grid2D::_internal_known_cells_box() const {
  const ::cartographer::mapping::proto::Grid2D_CellBox* p = _impl_.known_cells_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::Grid2D_CellBox&>(
      ::cartographer::mapping::proto::_Grid2D_CellBox_default_instance_);
}
inline const ::cartographer::mapping::proto::Grid2D_CellBox& Grid2D::known_cells_box() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.known_cells_box)
  return _internal_known_cells_box();
}
inline void Grid2D::unsafe_arena_set_allocated_known_cells_box(
    ::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.known_cells_box_);
  }
  _impl_.known_cells_box_ = known_cells_box;
  if (known_cells_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Grid2D.known_cells_box)
}
inline ::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::release_known_cells_box() {
  
  ::cartographer::mapping::proto::Grid2D_CellBox* temp = _impl_.known_cells_box_;
  _impl_.known_cells_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::unsafe_arena_release_known_cells_box() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.known_cells_box)
  
  ::cartographer::mapping::proto::Grid2D_CellBox* temp = _impl_.known_cells_box_;
  _impl_.known_cells_box_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::_internal_mutable_known_cells_box() {
  
  if (_impl_.known_cells_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::Grid2D_CellBox>(GetArenaForAllocation());
    _impl_.known_cells_box_ = p;
  }
  return _impl_.known_cells_box_;
}
inline ::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::mutable_known_cells_box() {
  ::cartographer::mapping::proto::Grid2D_CellBox* _msg = _internal_mutable_known_cells_box();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.known_cells_box)
  return _msg;
}
inline void Grid2D::set_allocated_known_cells_box(::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.known_cells_box_;
  }
  if (known_cells_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(known_cells_box);
    if (message_arena != submessage_arena) {
      known_cells_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, known_cells_box, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.known_cells_box_ = known_cells_box;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.known_cells_box)
}

// .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
inline bool Grid2D::_internal_has_probability_grid_2d() const {
  return grid_case() == kProbabilityGrid2D;
}
inline bool Grid2D::has_probability_grid_2d() const {
  return _internal_has_probability_grid_2d();
}
inline void Grid2D::set_has_probability_grid_2d() {
  _impl_._oneof_case_[0] = kProbabilityGrid2D;
}
inline ::cartographer::mapping::proto::ProbabilityGrid* Grid2D::release_probability_grid_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  if (_internal_has_probability_grid_2d()) {
    clear_has_grid();
    ::cartographer::mapping::proto::ProbabilityGrid* temp = _impl_.grid_.probability_grid_2d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.grid_.probability_grid_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::ProbabilityGrid& Grid2D::_internal_probability_grid_2d() const {
  return _internal_has_probability_grid_2d()
      ? *_impl_.grid_.probability_grid_2d_
      : reinterpret_cast< ::cartographer::mapping::proto::ProbabilityGrid&>(::cartographer::mapping::proto::_ProbabilityGrid_default_instance_);
}
inline const ::cartographer::mapping::proto::ProbabilityGrid& Grid2D::probability_grid_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  return _internal_probability_grid_2d();
}
inline ::cartographer::mapping::proto::ProbabilityGrid* Grid2D::unsafe_arena_release_probability_grid_2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  if (_internal_has_probability_grid_2d()) {
    clear_has_grid();
    ::cartographer::mapping::proto::ProbabilityGrid* temp = _impl_.grid_.probability_grid_2d_;
    _impl_.grid_.probability_grid_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Grid2D::unsafe_arena_set_allocated_probability_grid_2d(::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d) {
  clear_grid();
  if (probability_grid_2d) {
    set_has_probability_grid_2d();
    _impl_.grid_.probability_grid_2d_ = probability_grid_2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Grid2D.probability_grid_2d)
}
inline ::cartographer::mapping::proto::ProbabilityGrid* Grid2D::_internal_mutable_probability_grid_2d() {
  if (!_internal_has_probability_grid_2d()) {
    clear_grid();
    set_has_probability_grid_2d();
    _impl_.grid_.probability_grid_2d_ = CreateMaybeMessage< ::cartographer::mapping::proto::ProbabilityGrid >(GetArenaForAllocation());
  }
  return _impl_.grid_.probability_grid_2d_;
}
inline ::cartographer::mapping::proto::ProbabilityGrid* Grid2D::mutable_probability_grid_2d() {
  ::cartographer::mapping::proto::ProbabilityGrid* _msg = _internal_mutable_probability_grid_2d();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  return _msg;
}

// .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
inline bool Grid2D::_internal_has_tsdf_2d() const {
  return grid_case() == kTsdf2D;
}
inline bool Grid2D::has_tsdf_2d() const {
  return _internal_has_tsdf_2d();
}
inline void Grid2D::set_has_tsdf_2d() {
  _impl_._oneof_case_[0] = kTsdf2D;
}
inline ::cartographer::mapping::proto::TSDF2D* Grid2D::release_tsdf_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.tsdf_2d)
  if (_internal_has_tsdf_2d()) {
    clear_has_grid();
    ::cartographer::mapping::proto::TSDF2D* temp = _impl_.grid_.tsdf_2d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.grid_.tsdf_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::TSDF2D& Grid2D::_internal_tsdf_2d() const {
  return _internal_has_tsdf_2d()
      ? *_impl_.grid_.tsdf_2d_
      : reinterpret_cast< ::cartographer::mapping::proto::TSDF2D&>(::cartographer::mapping::proto::_TSDF2D_default_instance_);
}
inline const ::cartographer::mapping::proto::TSDF2D& Grid2D::tsdf_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.tsdf_2d)
  return _internal_tsdf_2d();
}
inline ::cartographer::mapping::proto::TSDF2D* Grid2D::unsafe_arena_release_tsdf_2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.Grid2D.tsdf_2d)
  if (_internal_has_tsdf_2d()) {
    clear_has_grid();
    ::cartographer::mapping::proto::TSDF2D* temp = _impl_.grid_.tsdf_2d_;
    _impl_.grid_.tsdf_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Grid2D::unsafe_arena_set_allocated_tsdf_2d(::cartographer::mapping::proto::TSDF2D* tsdf_2d) {
  clear_grid();
  if (tsdf_2d) {
    set_has_tsdf_2d();
    _impl_.grid_.tsdf_2d_ = tsdf_2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Grid2D.tsdf_2d)
}
inline ::cartographer::mapping::proto::TSDF2D* Grid2D::_internal_mutable_tsdf_2d() {
  if (!_internal_has_tsdf_2d()) {
    clear_grid();
    set_has_tsdf_2d();
    _impl_.grid_.tsdf_2d_ = CreateMaybeMessage< ::cartographer::mapping::proto::TSDF2D >(GetArenaForAllocation());
  }
  return _impl_.grid_.tsdf_2d_;
}
inline ::cartographer::mapping::proto::TSDF2D* Grid2D::mutable_tsdf_2d() {
  ::cartographer::mapping::proto::TSDF2D* _msg = _internal_mutable_tsdf_2d();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.tsdf_2d)
  return _msg;
}

// float min_correspondence_cost = 6;
inline void Grid2D::clear_min_correspondence_cost() {
  _impl_.min_correspondence_cost_ = 0;
}
inline float Grid2D::_internal_min_correspondence_cost() const {
  return _impl_.min_correspondence_cost_;
}
inline float Grid2D::min_correspondence_cost() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.min_correspondence_cost)
  return _internal_min_correspondence_cost();
}
inline void Grid2D::_internal_set_min_correspondence_cost(float value) {
  
  _impl_.min_correspondence_cost_ = value;
}
inline void Grid2D::set_min_correspondence_cost(float value) {
  _internal_set_min_correspondence_cost(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.min_correspondence_cost)
}

// float max_correspondence_cost = 7;
inline void Grid2D::clear_max_correspondence_cost() {
  _impl_.max_correspondence_cost_ = 0;
}
inline float Grid2D::_internal_max_correspondence_cost() const {
  return _impl_.max_correspondence_cost_;
}
inline float Grid2D::max_correspondence_cost() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.max_correspondence_cost)
  return _internal_max_correspondence_cost();
}
inline void Grid2D::_internal_set_max_correspondence_cost(float value) {
  
  _impl_.max_correspondence_cost_ = value;
}
inline void Grid2D::set_max_correspondence_cost(float value) {
  _internal_set_max_correspondence_cost(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.max_correspondence_cost)
}

inline bool Grid2D::has_grid() const {
  return grid_case() != GRID_NOT_SET;
}
inline void Grid2D::clear_has_grid() {
  _impl_._oneof_case_[0] = GRID_NOT_SET;
}
inline Grid2D::GridCase Grid2D::grid_case() const {
  return Grid2D::GridCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fgrid_5f2d_2eproto
