// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/trajectory.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class NodeId;
struct NodeIdDefaultTypeInternal;
extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
class PoseGraph;
struct PoseGraphDefaultTypeInternal;
extern PoseGraphDefaultTypeInternal _PoseGraph_default_instance_;
class PoseGraph_Constraint;
struct PoseGraph_ConstraintDefaultTypeInternal;
extern PoseGraph_ConstraintDefaultTypeInternal _PoseGraph_Constraint_default_instance_;
class PoseGraph_LandmarkPose;
struct PoseGraph_LandmarkPoseDefaultTypeInternal;
extern PoseGraph_LandmarkPoseDefaultTypeInternal _PoseGraph_LandmarkPose_default_instance_;
class SubmapId;
struct SubmapIdDefaultTypeInternal;
extern SubmapIdDefaultTypeInternal _SubmapId_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::NodeId* Arena::CreateMaybeMessage<::cartographer::mapping::proto::NodeId>(Arena*);
template<> ::cartographer::mapping::proto::PoseGraph* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraph>(Arena*);
template<> ::cartographer::mapping::proto::PoseGraph_Constraint* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraph_Constraint>(Arena*);
template<> ::cartographer::mapping::proto::PoseGraph_LandmarkPose* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraph_LandmarkPose>(Arena*);
template<> ::cartographer::mapping::proto::SubmapId* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

enum PoseGraph_Constraint_Tag : int {
  PoseGraph_Constraint_Tag_INTRA_SUBMAP = 0,
  PoseGraph_Constraint_Tag_INTER_SUBMAP = 1,
  PoseGraph_Constraint_Tag_PoseGraph_Constraint_Tag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PoseGraph_Constraint_Tag_PoseGraph_Constraint_Tag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PoseGraph_Constraint_Tag_IsValid(int value);
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint_Tag_Tag_MIN = PoseGraph_Constraint_Tag_INTRA_SUBMAP;
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint_Tag_Tag_MAX = PoseGraph_Constraint_Tag_INTER_SUBMAP;
constexpr int PoseGraph_Constraint_Tag_Tag_ARRAYSIZE = PoseGraph_Constraint_Tag_Tag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoseGraph_Constraint_Tag_descriptor();
template<typename T>
inline const std::string& PoseGraph_Constraint_Tag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoseGraph_Constraint_Tag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoseGraph_Constraint_Tag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoseGraph_Constraint_Tag_descriptor(), enum_t_value);
}
inline bool PoseGraph_Constraint_Tag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PoseGraph_Constraint_Tag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoseGraph_Constraint_Tag>(
    PoseGraph_Constraint_Tag_descriptor(), name, value);
}
// ===================================================================

class SubmapId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapId) */ {
 public:
  inline SubmapId() : SubmapId(nullptr) {}
  ~SubmapId() override;
  explicit PROTOBUF_CONSTEXPR SubmapId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapId(const SubmapId& from);
  SubmapId(SubmapId&& from) noexcept
    : SubmapId() {
    *this = ::std::move(from);
  }

  inline SubmapId& operator=(const SubmapId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapId& operator=(SubmapId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapId* internal_default_instance() {
    return reinterpret_cast<const SubmapId*>(
               &_SubmapId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmapId& a, SubmapId& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapId& from) {
    SubmapId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapId";
  }
  protected:
  explicit SubmapId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryIdFieldNumber = 1,
    kSubmapIndexFieldNumber = 2,
  };
  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // int32 submap_index = 2;
  void clear_submap_index();
  int32_t submap_index() const;
  void set_submap_index(int32_t value);
  private:
  int32_t _internal_submap_index() const;
  void _internal_set_submap_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t trajectory_id_;
    int32_t submap_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class NodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.NodeId) */ {
 public:
  inline NodeId() : NodeId(nullptr) {}
  ~NodeId() override;
  explicit PROTOBUF_CONSTEXPR NodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeId(const NodeId& from);
  NodeId(NodeId&& from) noexcept
    : NodeId() {
    *this = ::std::move(from);
  }

  inline NodeId& operator=(const NodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeId& operator=(NodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeId* internal_default_instance() {
    return reinterpret_cast<const NodeId*>(
               &_NodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeId& a, NodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeId& from) {
    NodeId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.NodeId";
  }
  protected:
  explicit NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryIdFieldNumber = 1,
    kNodeIndexFieldNumber = 2,
  };
  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // int32 node_index = 2;
  void clear_node_index();
  int32_t node_index() const;
  void set_node_index(int32_t value);
  private:
  int32_t _internal_node_index() const;
  void _internal_set_node_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.NodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t trajectory_id_;
    int32_t node_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class PoseGraph_Constraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph.Constraint) */ {
 public:
  inline PoseGraph_Constraint() : PoseGraph_Constraint(nullptr) {}
  ~PoseGraph_Constraint() override;
  explicit PROTOBUF_CONSTEXPR PoseGraph_Constraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseGraph_Constraint(const PoseGraph_Constraint& from);
  PoseGraph_Constraint(PoseGraph_Constraint&& from) noexcept
    : PoseGraph_Constraint() {
    *this = ::std::move(from);
  }

  inline PoseGraph_Constraint& operator=(const PoseGraph_Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseGraph_Constraint& operator=(PoseGraph_Constraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseGraph_Constraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseGraph_Constraint* internal_default_instance() {
    return reinterpret_cast<const PoseGraph_Constraint*>(
               &_PoseGraph_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoseGraph_Constraint& a, PoseGraph_Constraint& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseGraph_Constraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseGraph_Constraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseGraph_Constraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseGraph_Constraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseGraph_Constraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseGraph_Constraint& from) {
    PoseGraph_Constraint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraph_Constraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseGraph.Constraint";
  }
  protected:
  explicit PoseGraph_Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoseGraph_Constraint_Tag Tag;
  static constexpr Tag INTRA_SUBMAP =
    PoseGraph_Constraint_Tag_INTRA_SUBMAP;
  static constexpr Tag INTER_SUBMAP =
    PoseGraph_Constraint_Tag_INTER_SUBMAP;
  static inline bool Tag_IsValid(int value) {
    return PoseGraph_Constraint_Tag_IsValid(value);
  }
  static constexpr Tag Tag_MIN =
    PoseGraph_Constraint_Tag_Tag_MIN;
  static constexpr Tag Tag_MAX =
    PoseGraph_Constraint_Tag_Tag_MAX;
  static constexpr int Tag_ARRAYSIZE =
    PoseGraph_Constraint_Tag_Tag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Tag_descriptor() {
    return PoseGraph_Constraint_Tag_descriptor();
  }
  template<typename T>
  static inline const std::string& Tag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Tag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Tag_Name.");
    return PoseGraph_Constraint_Tag_Name(enum_t_value);
  }
  static inline bool Tag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Tag* value) {
    return PoseGraph_Constraint_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapIdFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kRelativePoseFieldNumber = 3,
    kTranslationWeightFieldNumber = 6,
    kRotationWeightFieldNumber = 7,
    kTagFieldNumber = 5,
  };
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  private:
  bool _internal_has_submap_id() const;
  public:
  void clear_submap_id();
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::SubmapId* release_submap_id();
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);
  private:
  const ::cartographer::mapping::proto::SubmapId& _internal_submap_id() const;
  ::cartographer::mapping::proto::SubmapId* _internal_mutable_submap_id();
  public:
  void unsafe_arena_set_allocated_submap_id(
      ::cartographer::mapping::proto::SubmapId* submap_id);
  ::cartographer::mapping::proto::SubmapId* unsafe_arena_release_submap_id();

  // .cartographer.mapping.proto.NodeId node_id = 2;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::cartographer::mapping::proto::NodeId& node_id() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::NodeId* release_node_id();
  ::cartographer::mapping::proto::NodeId* mutable_node_id();
  void set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id);
  private:
  const ::cartographer::mapping::proto::NodeId& _internal_node_id() const;
  ::cartographer::mapping::proto::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::cartographer::mapping::proto::NodeId* node_id);
  ::cartographer::mapping::proto::NodeId* unsafe_arena_release_node_id();

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  bool has_relative_pose() const;
  private:
  bool _internal_has_relative_pose() const;
  public:
  void clear_relative_pose();
  const ::cartographer::transform::proto::Rigid3d& relative_pose() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Rigid3d* release_relative_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_relative_pose();
  void set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_relative_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_relative_pose();
  public:
  void unsafe_arena_set_allocated_relative_pose(
      ::cartographer::transform::proto::Rigid3d* relative_pose);
  ::cartographer::transform::proto::Rigid3d* unsafe_arena_release_relative_pose();

  // double translation_weight = 6;
  void clear_translation_weight();
  double translation_weight() const;
  void set_translation_weight(double value);
  private:
  double _internal_translation_weight() const;
  void _internal_set_translation_weight(double value);
  public:

  // double rotation_weight = 7;
  void clear_rotation_weight();
  double rotation_weight() const;
  void set_rotation_weight(double value);
  private:
  double _internal_rotation_weight() const;
  void _internal_set_rotation_weight(double value);
  public:

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  void clear_tag();
  ::cartographer::mapping::proto::PoseGraph_Constraint_Tag tag() const;
  void set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
  private:
  ::cartographer::mapping::proto::PoseGraph_Constraint_Tag _internal_tag() const;
  void _internal_set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph.Constraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::proto::SubmapId* submap_id_;
    ::cartographer::mapping::proto::NodeId* node_id_;
    ::cartographer::transform::proto::Rigid3d* relative_pose_;
    double translation_weight_;
    double rotation_weight_;
    int tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class PoseGraph_LandmarkPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph.LandmarkPose) */ {
 public:
  inline PoseGraph_LandmarkPose() : PoseGraph_LandmarkPose(nullptr) {}
  ~PoseGraph_LandmarkPose() override;
  explicit PROTOBUF_CONSTEXPR PoseGraph_LandmarkPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseGraph_LandmarkPose(const PoseGraph_LandmarkPose& from);
  PoseGraph_LandmarkPose(PoseGraph_LandmarkPose&& from) noexcept
    : PoseGraph_LandmarkPose() {
    *this = ::std::move(from);
  }

  inline PoseGraph_LandmarkPose& operator=(const PoseGraph_LandmarkPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseGraph_LandmarkPose& operator=(PoseGraph_LandmarkPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseGraph_LandmarkPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseGraph_LandmarkPose* internal_default_instance() {
    return reinterpret_cast<const PoseGraph_LandmarkPose*>(
               &_PoseGraph_LandmarkPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PoseGraph_LandmarkPose& a, PoseGraph_LandmarkPose& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseGraph_LandmarkPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseGraph_LandmarkPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseGraph_LandmarkPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseGraph_LandmarkPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseGraph_LandmarkPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseGraph_LandmarkPose& from) {
    PoseGraph_LandmarkPose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraph_LandmarkPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseGraph.LandmarkPose";
  }
  protected:
  explicit PoseGraph_LandmarkPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkIdFieldNumber = 1,
    kGlobalPoseFieldNumber = 2,
  };
  // string landmark_id = 1;
  void clear_landmark_id();
  const std::string& landmark_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_landmark_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_landmark_id();
  PROTOBUF_NODISCARD std::string* release_landmark_id();
  void set_allocated_landmark_id(std::string* landmark_id);
  private:
  const std::string& _internal_landmark_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_landmark_id(const std::string& value);
  std::string* _internal_mutable_landmark_id();
  public:

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  bool has_global_pose() const;
  private:
  bool _internal_has_global_pose() const;
  public:
  void clear_global_pose();
  const ::cartographer::transform::proto::Rigid3d& global_pose() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Rigid3d* release_global_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_global_pose();
  void set_allocated_global_pose(::cartographer::transform::proto::Rigid3d* global_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_global_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_global_pose();
  public:
  void unsafe_arena_set_allocated_global_pose(
      ::cartographer::transform::proto::Rigid3d* global_pose);
  ::cartographer::transform::proto::Rigid3d* unsafe_arena_release_global_pose();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph.LandmarkPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr landmark_id_;
    ::cartographer::transform::proto::Rigid3d* global_pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class PoseGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph) */ {
 public:
  inline PoseGraph() : PoseGraph(nullptr) {}
  ~PoseGraph() override;
  explicit PROTOBUF_CONSTEXPR PoseGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseGraph(const PoseGraph& from);
  PoseGraph(PoseGraph&& from) noexcept
    : PoseGraph() {
    *this = ::std::move(from);
  }

  inline PoseGraph& operator=(const PoseGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseGraph& operator=(PoseGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseGraph* internal_default_instance() {
    return reinterpret_cast<const PoseGraph*>(
               &_PoseGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PoseGraph& a, PoseGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseGraph& from) {
    PoseGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseGraph";
  }
  protected:
  explicit PoseGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoseGraph_Constraint Constraint;
  typedef PoseGraph_LandmarkPose LandmarkPose;

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintFieldNumber = 2,
    kTrajectoryFieldNumber = 4,
    kLandmarkPosesFieldNumber = 5,
  };
  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  int constraint_size() const;
  private:
  int _internal_constraint_size() const;
  public:
  void clear_constraint();
  ::cartographer::mapping::proto::PoseGraph_Constraint* mutable_constraint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >*
      mutable_constraint();
  private:
  const ::cartographer::mapping::proto::PoseGraph_Constraint& _internal_constraint(int index) const;
  ::cartographer::mapping::proto::PoseGraph_Constraint* _internal_add_constraint();
  public:
  const ::cartographer::mapping::proto::PoseGraph_Constraint& constraint(int index) const;
  ::cartographer::mapping::proto::PoseGraph_Constraint* add_constraint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >&
      constraint() const;

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  int trajectory_size() const;
  private:
  int _internal_trajectory_size() const;
  public:
  void clear_trajectory();
  ::cartographer::mapping::proto::Trajectory* mutable_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >*
      mutable_trajectory();
  private:
  const ::cartographer::mapping::proto::Trajectory& _internal_trajectory(int index) const;
  ::cartographer::mapping::proto::Trajectory* _internal_add_trajectory();
  public:
  const ::cartographer::mapping::proto::Trajectory& trajectory(int index) const;
  ::cartographer::mapping::proto::Trajectory* add_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >&
      trajectory() const;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  int landmark_poses_size() const;
  private:
  int _internal_landmark_poses_size() const;
  public:
  void clear_landmark_poses();
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* mutable_landmark_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >*
      mutable_landmark_poses();
  private:
  const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& _internal_landmark_poses(int index) const;
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* _internal_add_landmark_poses();
  public:
  const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& landmark_poses(int index) const;
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* add_landmark_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >&
      landmark_poses() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint > constraint_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory > trajectory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose > landmark_poses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapId

// int32 trajectory_id = 1;
inline void SubmapId::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t SubmapId::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t SubmapId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.trajectory_id)
  return _internal_trajectory_id();
}
inline void SubmapId::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void SubmapId::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.trajectory_id)
}

// int32 submap_index = 2;
inline void SubmapId::clear_submap_index() {
  _impl_.submap_index_ = 0;
}
inline int32_t SubmapId::_internal_submap_index() const {
  return _impl_.submap_index_;
}
inline int32_t SubmapId::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.submap_index)
  return _internal_submap_index();
}
inline void SubmapId::_internal_set_submap_index(int32_t value) {
  
  _impl_.submap_index_ = value;
}
inline void SubmapId::set_submap_index(int32_t value) {
  _internal_set_submap_index(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.submap_index)
}

// -------------------------------------------------------------------

// NodeId

// int32 trajectory_id = 1;
inline void NodeId::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t NodeId::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t NodeId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.trajectory_id)
  return _internal_trajectory_id();
}
inline void NodeId::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void NodeId::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.trajectory_id)
}

// int32 node_index = 2;
inline void NodeId::clear_node_index() {
  _impl_.node_index_ = 0;
}
inline int32_t NodeId::_internal_node_index() const {
  return _impl_.node_index_;
}
inline int32_t NodeId::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.node_index)
  return _internal_node_index();
}
inline void NodeId::_internal_set_node_index(int32_t value) {
  
  _impl_.node_index_ = value;
}
inline void NodeId::set_node_index(int32_t value) {
  _internal_set_node_index(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.node_index)
}

// -------------------------------------------------------------------

// PoseGraph_Constraint

// .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool PoseGraph_Constraint::_internal_has_submap_id() const {
  return this != internal_default_instance() && _impl_.submap_id_ != nullptr;
}
inline bool PoseGraph_Constraint::has_submap_id() const {
  return _internal_has_submap_id();
}
inline void PoseGraph_Constraint::clear_submap_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.submap_id_ != nullptr) {
    delete _impl_.submap_id_;
  }
  _impl_.submap_id_ = nullptr;
}
inline const ::cartographer::mapping::proto::SubmapId& PoseGraph_Constraint::_internal_submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = _impl_.submap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::SubmapId&>(
      ::cartographer::mapping::proto::_SubmapId_default_instance_);
}
inline const ::cartographer::mapping::proto::SubmapId& PoseGraph_Constraint::submap_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return _internal_submap_id();
}
inline void PoseGraph_Constraint::unsafe_arena_set_allocated_submap_id(
    ::cartographer::mapping::proto::SubmapId* submap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_id_);
  }
  _impl_.submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::release_submap_id() {
  
  ::cartographer::mapping::proto::SubmapId* temp = _impl_.submap_id_;
  _impl_.submap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::unsafe_arena_release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = _impl_.submap_id_;
  _impl_.submap_id_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::_internal_mutable_submap_id() {
  
  if (_impl_.submap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapId>(GetArenaForAllocation());
    _impl_.submap_id_ = p;
  }
  return _impl_.submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::mutable_submap_id() {
  ::cartographer::mapping::proto::SubmapId* _msg = _internal_mutable_submap_id();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return _msg;
}
inline void PoseGraph_Constraint::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.submap_id_;
  }
  if (submap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(submap_id);
    if (message_arena != submessage_arena) {
      submap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submap_id_ = submap_id;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
}

// .cartographer.mapping.proto.NodeId node_id = 2;
inline bool PoseGraph_Constraint::_internal_has_node_id() const {
  return this != internal_default_instance() && _impl_.node_id_ != nullptr;
}
inline bool PoseGraph_Constraint::has_node_id() const {
  return _internal_has_node_id();
}
inline void PoseGraph_Constraint::clear_node_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.node_id_ != nullptr) {
    delete _impl_.node_id_;
  }
  _impl_.node_id_ = nullptr;
}
inline const ::cartographer::mapping::proto::NodeId& PoseGraph_Constraint::_internal_node_id() const {
  const ::cartographer::mapping::proto::NodeId* p = _impl_.node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::NodeId&>(
      ::cartographer::mapping::proto::_NodeId_default_instance_);
}
inline const ::cartographer::mapping::proto::NodeId& PoseGraph_Constraint::node_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return _internal_node_id();
}
inline void PoseGraph_Constraint::unsafe_arena_set_allocated_node_id(
    ::cartographer::mapping::proto::NodeId* node_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_id_);
  }
  _impl_.node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::release_node_id() {
  
  ::cartographer::mapping::proto::NodeId* temp = _impl_.node_id_;
  _impl_.node_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = _impl_.node_id_;
  _impl_.node_id_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::_internal_mutable_node_id() {
  
  if (_impl_.node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::NodeId>(GetArenaForAllocation());
    _impl_.node_id_ = p;
  }
  return _impl_.node_id_;
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::mutable_node_id() {
  ::cartographer::mapping::proto::NodeId* _msg = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return _msg;
}
inline void PoseGraph_Constraint::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.node_id_;
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node_id);
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
}

// .cartographer.transform.proto.Rigid3d relative_pose = 3;
inline bool PoseGraph_Constraint::_internal_has_relative_pose() const {
  return this != internal_default_instance() && _impl_.relative_pose_ != nullptr;
}
inline bool PoseGraph_Constraint::has_relative_pose() const {
  return _internal_has_relative_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_Constraint::_internal_relative_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = _impl_.relative_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Rigid3d&>(
      ::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_Constraint::relative_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return _internal_relative_pose();
}
inline void PoseGraph_Constraint::unsafe_arena_set_allocated_relative_pose(
    ::cartographer::transform::proto::Rigid3d* relative_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_pose_);
  }
  _impl_.relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::release_relative_pose() {
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.relative_pose_;
  _impl_.relative_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::unsafe_arena_release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.relative_pose_;
  _impl_.relative_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::_internal_mutable_relative_pose() {
  
  if (_impl_.relative_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaForAllocation());
    _impl_.relative_pose_ = p;
  }
  return _impl_.relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::mutable_relative_pose() {
  ::cartographer::transform::proto::Rigid3d* _msg = _internal_mutable_relative_pose();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return _msg;
}
inline void PoseGraph_Constraint::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_pose_);
  }
  if (relative_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_pose));
    if (message_arena != submessage_arena) {
      relative_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relative_pose_ = relative_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
}

// double translation_weight = 6;
inline void PoseGraph_Constraint::clear_translation_weight() {
  _impl_.translation_weight_ = 0;
}
inline double PoseGraph_Constraint::_internal_translation_weight() const {
  return _impl_.translation_weight_;
}
inline double PoseGraph_Constraint::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
  return _internal_translation_weight();
}
inline void PoseGraph_Constraint::_internal_set_translation_weight(double value) {
  
  _impl_.translation_weight_ = value;
}
inline void PoseGraph_Constraint::set_translation_weight(double value) {
  _internal_set_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
}

// double rotation_weight = 7;
inline void PoseGraph_Constraint::clear_rotation_weight() {
  _impl_.rotation_weight_ = 0;
}
inline double PoseGraph_Constraint::_internal_rotation_weight() const {
  return _impl_.rotation_weight_;
}
inline double PoseGraph_Constraint::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
  return _internal_rotation_weight();
}
inline void PoseGraph_Constraint::_internal_set_rotation_weight(double value) {
  
  _impl_.rotation_weight_ = value;
}
inline void PoseGraph_Constraint::set_rotation_weight(double value) {
  _internal_set_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
}

// .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
inline void PoseGraph_Constraint::clear_tag() {
  _impl_.tag_ = 0;
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint_Tag PoseGraph_Constraint::_internal_tag() const {
  return static_cast< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag >(_impl_.tag_);
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint_Tag PoseGraph_Constraint::tag() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.tag)
  return _internal_tag();
}
inline void PoseGraph_Constraint::_internal_set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value) {
  
  _impl_.tag_ = value;
}
inline void PoseGraph_Constraint::set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.tag)
}

// -------------------------------------------------------------------

// PoseGraph_LandmarkPose

// string landmark_id = 1;
inline void PoseGraph_LandmarkPose::clear_landmark_id() {
  _impl_.landmark_id_.ClearToEmpty();
}
inline const std::string& PoseGraph_LandmarkPose::landmark_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return _internal_landmark_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PoseGraph_LandmarkPose::set_landmark_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.landmark_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
inline std::string* PoseGraph_LandmarkPose::mutable_landmark_id() {
  std::string* _s = _internal_mutable_landmark_id();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return _s;
}
inline const std::string& PoseGraph_LandmarkPose::_internal_landmark_id() const {
  return _impl_.landmark_id_.Get();
}
inline void PoseGraph_LandmarkPose::_internal_set_landmark_id(const std::string& value) {
  
  _impl_.landmark_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PoseGraph_LandmarkPose::_internal_mutable_landmark_id() {
  
  return _impl_.landmark_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PoseGraph_LandmarkPose::release_landmark_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return _impl_.landmark_id_.Release();
}
inline void PoseGraph_LandmarkPose::set_allocated_landmark_id(std::string* landmark_id) {
  if (landmark_id != nullptr) {
    
  } else {
    
  }
  _impl_.landmark_id_.SetAllocated(landmark_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.landmark_id_.IsDefault()) {
    _impl_.landmark_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}

// .cartographer.transform.proto.Rigid3d global_pose = 2;
inline bool PoseGraph_LandmarkPose::_internal_has_global_pose() const {
  return this != internal_default_instance() && _impl_.global_pose_ != nullptr;
}
inline bool PoseGraph_LandmarkPose::has_global_pose() const {
  return _internal_has_global_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_LandmarkPose::_internal_global_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = _impl_.global_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Rigid3d&>(
      ::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_LandmarkPose::global_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return _internal_global_pose();
}
inline void PoseGraph_LandmarkPose::unsafe_arena_set_allocated_global_pose(
    ::cartographer::transform::proto::Rigid3d* global_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.global_pose_);
  }
  _impl_.global_pose_ = global_pose;
  if (global_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::release_global_pose() {
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.global_pose_;
  _impl_.global_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::unsafe_arena_release_global_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.global_pose_;
  _impl_.global_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::_internal_mutable_global_pose() {
  
  if (_impl_.global_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaForAllocation());
    _impl_.global_pose_ = p;
  }
  return _impl_.global_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::mutable_global_pose() {
  ::cartographer::transform::proto::Rigid3d* _msg = _internal_mutable_global_pose();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return _msg;
}
inline void PoseGraph_LandmarkPose::set_allocated_global_pose(::cartographer::transform::proto::Rigid3d* global_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.global_pose_);
  }
  if (global_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_pose));
    if (message_arena != submessage_arena) {
      global_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.global_pose_ = global_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
}

// -------------------------------------------------------------------

// PoseGraph

// repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
inline int PoseGraph::_internal_constraint_size() const {
  return _impl_.constraint_.size();
}
inline int PoseGraph::constraint_size() const {
  return _internal_constraint_size();
}
inline void PoseGraph::clear_constraint() {
  _impl_.constraint_.Clear();
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint* PoseGraph::mutable_constraint(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.constraint)
  return _impl_.constraint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >*
PoseGraph::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.constraint)
  return &_impl_.constraint_;
}
inline const ::cartographer::mapping::proto::PoseGraph_Constraint& PoseGraph::_internal_constraint(int index) const {
  return _impl_.constraint_.Get(index);
}
inline const ::cartographer::mapping::proto::PoseGraph_Constraint& PoseGraph::constraint(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.constraint)
  return _internal_constraint(index);
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint* PoseGraph::_internal_add_constraint() {
  return _impl_.constraint_.Add();
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint* PoseGraph::add_constraint() {
  ::cartographer::mapping::proto::PoseGraph_Constraint* _add = _internal_add_constraint();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.constraint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >&
PoseGraph::constraint() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.constraint)
  return _impl_.constraint_;
}

// repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
inline int PoseGraph::_internal_trajectory_size() const {
  return _impl_.trajectory_.size();
}
inline int PoseGraph::trajectory_size() const {
  return _internal_trajectory_size();
}
inline ::cartographer::mapping::proto::Trajectory* PoseGraph::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.trajectory)
  return _impl_.trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >*
PoseGraph::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return &_impl_.trajectory_;
}
inline const ::cartographer::mapping::proto::Trajectory& PoseGraph::_internal_trajectory(int index) const {
  return _impl_.trajectory_.Get(index);
}
inline const ::cartographer::mapping::proto::Trajectory& PoseGraph::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.trajectory)
  return _internal_trajectory(index);
}
inline ::cartographer::mapping::proto::Trajectory* PoseGraph::_internal_add_trajectory() {
  return _impl_.trajectory_.Add();
}
inline ::cartographer::mapping::proto::Trajectory* PoseGraph::add_trajectory() {
  ::cartographer::mapping::proto::Trajectory* _add = _internal_add_trajectory();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.trajectory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >&
PoseGraph::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return _impl_.trajectory_;
}

// repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
inline int PoseGraph::_internal_landmark_poses_size() const {
  return _impl_.landmark_poses_.size();
}
inline int PoseGraph::landmark_poses_size() const {
  return _internal_landmark_poses_size();
}
inline void PoseGraph::clear_landmark_poses() {
  _impl_.landmark_poses_.Clear();
}
inline ::cartographer::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::mutable_landmark_poses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return _impl_.landmark_poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >*
PoseGraph::mutable_landmark_poses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return &_impl_.landmark_poses_;
}
inline const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& PoseGraph::_internal_landmark_poses(int index) const {
  return _impl_.landmark_poses_.Get(index);
}
inline const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& PoseGraph::landmark_poses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return _internal_landmark_poses(index);
}
inline ::cartographer::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::_internal_add_landmark_poses() {
  return _impl_.landmark_poses_.Add();
}
inline ::cartographer::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::add_landmark_poses() {
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* _add = _internal_add_landmark_poses();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >&
PoseGraph::landmark_poses() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return _impl_.landmark_poses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag>() {
  return ::cartographer::mapping::proto::PoseGraph_Constraint_Tag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto
