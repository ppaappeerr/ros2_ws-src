// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h"
#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class PoseGraphOptions;
struct PoseGraphOptionsDefaultTypeInternal;
extern PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
class PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D;
struct PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal;
extern PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal _PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::PoseGraphOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraphOptions>(Arena*);
template<> ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D) */ {
 public:
  inline PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() : PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(nullptr) {}
  ~PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() override;
  explicit PROTOBUF_CONSTEXPR PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from);
  PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D&& from) noexcept
    : PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() {
    *this = ::std::move(from);
  }

  inline PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& operator=(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& operator=(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* internal_default_instance() {
    return reinterpret_cast<const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D*>(
               &_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& a, PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
    PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D";
  }
  protected:
  explicit PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinCoveredAreaFieldNumber = 2,
    kFreshSubmapsCountFieldNumber = 1,
    kMinAddedSubmapsCountFieldNumber = 3,
  };
  // double min_covered_area = 2;
  void clear_min_covered_area();
  double min_covered_area() const;
  void set_min_covered_area(double value);
  private:
  double _internal_min_covered_area() const;
  void _internal_set_min_covered_area(double value);
  public:

  // int32 fresh_submaps_count = 1;
  void clear_fresh_submaps_count();
  int32_t fresh_submaps_count() const;
  void set_fresh_submaps_count(int32_t value);
  private:
  int32_t _internal_fresh_submaps_count() const;
  void _internal_set_fresh_submaps_count(int32_t value);
  public:

  // int32 min_added_submaps_count = 3;
  void clear_min_added_submaps_count();
  int32_t min_added_submaps_count() const;
  void set_min_added_submaps_count(int32_t value);
  private:
  int32_t _internal_min_added_submaps_count() const;
  void _internal_set_min_added_submaps_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double min_covered_area_;
    int32_t fresh_submaps_count_;
    int32_t min_added_submaps_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto;
};
// -------------------------------------------------------------------

class PoseGraphOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraphOptions) */ {
 public:
  inline PoseGraphOptions() : PoseGraphOptions(nullptr) {}
  ~PoseGraphOptions() override;
  explicit PROTOBUF_CONSTEXPR PoseGraphOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseGraphOptions(const PoseGraphOptions& from);
  PoseGraphOptions(PoseGraphOptions&& from) noexcept
    : PoseGraphOptions() {
    *this = ::std::move(from);
  }

  inline PoseGraphOptions& operator=(const PoseGraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseGraphOptions& operator=(PoseGraphOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseGraphOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseGraphOptions* internal_default_instance() {
    return reinterpret_cast<const PoseGraphOptions*>(
               &_PoseGraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoseGraphOptions& a, PoseGraphOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseGraphOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseGraphOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseGraphOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseGraphOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseGraphOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseGraphOptions& from) {
    PoseGraphOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraphOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.PoseGraphOptions";
  }
  protected:
  explicit PoseGraphOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D OverlappingSubmapsTrimmerOptions2D;

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintBuilderOptionsFieldNumber = 3,
    kOptimizationProblemOptionsFieldNumber = 4,
    kOverlappingSubmapsTrimmer2DFieldNumber = 11,
    kOptimizeEveryNNodesFieldNumber = 1,
    kMaxNumFinalIterationsFieldNumber = 6,
    kGlobalSamplingRatioFieldNumber = 5,
    kMatcherTranslationWeightFieldNumber = 7,
    kMatcherRotationWeightFieldNumber = 8,
    kGlobalConstraintSearchAfterNSecondsFieldNumber = 10,
    kLogResidualHistogramsFieldNumber = 9,
  };
  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  bool has_constraint_builder_options() const;
  private:
  bool _internal_has_constraint_builder_options() const;
  public:
  void clear_constraint_builder_options();
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& constraint_builder_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* release_constraint_builder_options();
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* mutable_constraint_builder_options();
  void set_allocated_constraint_builder_options(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options);
  private:
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& _internal_constraint_builder_options() const;
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* _internal_mutable_constraint_builder_options();
  public:
  void unsafe_arena_set_allocated_constraint_builder_options(
      ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options);
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* unsafe_arena_release_constraint_builder_options();

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  bool has_optimization_problem_options() const;
  private:
  bool _internal_has_optimization_problem_options() const;
  public:
  void clear_optimization_problem_options();
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& optimization_problem_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* release_optimization_problem_options();
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* mutable_optimization_problem_options();
  void set_allocated_optimization_problem_options(::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options);
  private:
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& _internal_optimization_problem_options() const;
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* _internal_mutable_optimization_problem_options();
  public:
  void unsafe_arena_set_allocated_optimization_problem_options(
      ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options);
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* unsafe_arena_release_optimization_problem_options();

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  bool has_overlapping_submaps_trimmer_2d() const;
  private:
  bool _internal_has_overlapping_submaps_trimmer_2d() const;
  public:
  void clear_overlapping_submaps_trimmer_2d();
  const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& overlapping_submaps_trimmer_2d() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* release_overlapping_submaps_trimmer_2d();
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* mutable_overlapping_submaps_trimmer_2d();
  void set_allocated_overlapping_submaps_trimmer_2d(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d);
  private:
  const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& _internal_overlapping_submaps_trimmer_2d() const;
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* _internal_mutable_overlapping_submaps_trimmer_2d();
  public:
  void unsafe_arena_set_allocated_overlapping_submaps_trimmer_2d(
      ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d);
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* unsafe_arena_release_overlapping_submaps_trimmer_2d();

  // int32 optimize_every_n_nodes = 1;
  void clear_optimize_every_n_nodes();
  int32_t optimize_every_n_nodes() const;
  void set_optimize_every_n_nodes(int32_t value);
  private:
  int32_t _internal_optimize_every_n_nodes() const;
  void _internal_set_optimize_every_n_nodes(int32_t value);
  public:

  // int32 max_num_final_iterations = 6;
  void clear_max_num_final_iterations();
  int32_t max_num_final_iterations() const;
  void set_max_num_final_iterations(int32_t value);
  private:
  int32_t _internal_max_num_final_iterations() const;
  void _internal_set_max_num_final_iterations(int32_t value);
  public:

  // double global_sampling_ratio = 5;
  void clear_global_sampling_ratio();
  double global_sampling_ratio() const;
  void set_global_sampling_ratio(double value);
  private:
  double _internal_global_sampling_ratio() const;
  void _internal_set_global_sampling_ratio(double value);
  public:

  // double matcher_translation_weight = 7;
  void clear_matcher_translation_weight();
  double matcher_translation_weight() const;
  void set_matcher_translation_weight(double value);
  private:
  double _internal_matcher_translation_weight() const;
  void _internal_set_matcher_translation_weight(double value);
  public:

  // double matcher_rotation_weight = 8;
  void clear_matcher_rotation_weight();
  double matcher_rotation_weight() const;
  void set_matcher_rotation_weight(double value);
  private:
  double _internal_matcher_rotation_weight() const;
  void _internal_set_matcher_rotation_weight(double value);
  public:

  // double global_constraint_search_after_n_seconds = 10;
  void clear_global_constraint_search_after_n_seconds();
  double global_constraint_search_after_n_seconds() const;
  void set_global_constraint_search_after_n_seconds(double value);
  private:
  double _internal_global_constraint_search_after_n_seconds() const;
  void _internal_set_global_constraint_search_after_n_seconds(double value);
  public:

  // bool log_residual_histograms = 9;
  void clear_log_residual_histograms();
  bool log_residual_histograms() const;
  void set_log_residual_histograms(bool value);
  private:
  bool _internal_log_residual_histograms() const;
  void _internal_set_log_residual_histograms(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraphOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options_;
    ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options_;
    ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d_;
    int32_t optimize_every_n_nodes_;
    int32_t max_num_final_iterations_;
    double global_sampling_ratio_;
    double matcher_translation_weight_;
    double matcher_rotation_weight_;
    double global_constraint_search_after_n_seconds_;
    bool log_residual_histograms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D

// int32 fresh_submaps_count = 1;
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::clear_fresh_submaps_count() {
  _impl_.fresh_submaps_count_ = 0;
}
inline int32_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_fresh_submaps_count() const {
  return _impl_.fresh_submaps_count_;
}
inline int32_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::fresh_submaps_count() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.fresh_submaps_count)
  return _internal_fresh_submaps_count();
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_set_fresh_submaps_count(int32_t value) {
  
  _impl_.fresh_submaps_count_ = value;
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::set_fresh_submaps_count(int32_t value) {
  _internal_set_fresh_submaps_count(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.fresh_submaps_count)
}

// double min_covered_area = 2;
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_covered_area() {
  _impl_.min_covered_area_ = 0;
}
inline double PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_min_covered_area() const {
  return _impl_.min_covered_area_;
}
inline double PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::min_covered_area() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.min_covered_area)
  return _internal_min_covered_area();
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_set_min_covered_area(double value) {
  
  _impl_.min_covered_area_ = value;
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::set_min_covered_area(double value) {
  _internal_set_min_covered_area(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.min_covered_area)
}

// int32 min_added_submaps_count = 3;
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_added_submaps_count() {
  _impl_.min_added_submaps_count_ = 0;
}
inline int32_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_min_added_submaps_count() const {
  return _impl_.min_added_submaps_count_;
}
inline int32_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::min_added_submaps_count() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.min_added_submaps_count)
  return _internal_min_added_submaps_count();
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_internal_set_min_added_submaps_count(int32_t value) {
  
  _impl_.min_added_submaps_count_ = value;
}
inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::set_min_added_submaps_count(int32_t value) {
  _internal_set_min_added_submaps_count(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D.min_added_submaps_count)
}

// -------------------------------------------------------------------

// PoseGraphOptions

// int32 optimize_every_n_nodes = 1;
inline void PoseGraphOptions::clear_optimize_every_n_nodes() {
  _impl_.optimize_every_n_nodes_ = 0;
}
inline int32_t PoseGraphOptions::_internal_optimize_every_n_nodes() const {
  return _impl_.optimize_every_n_nodes_;
}
inline int32_t PoseGraphOptions::optimize_every_n_nodes() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
  return _internal_optimize_every_n_nodes();
}
inline void PoseGraphOptions::_internal_set_optimize_every_n_nodes(int32_t value) {
  
  _impl_.optimize_every_n_nodes_ = value;
}
inline void PoseGraphOptions::set_optimize_every_n_nodes(int32_t value) {
  _internal_set_optimize_every_n_nodes(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
}

// .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
inline bool PoseGraphOptions::_internal_has_constraint_builder_options() const {
  return this != internal_default_instance() && _impl_.constraint_builder_options_ != nullptr;
}
inline bool PoseGraphOptions::has_constraint_builder_options() const {
  return _internal_has_constraint_builder_options();
}
inline const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& PoseGraphOptions::_internal_constraint_builder_options() const {
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* p = _impl_.constraint_builder_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions&>(
      ::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_);
}
inline const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& PoseGraphOptions::constraint_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return _internal_constraint_builder_options();
}
inline void PoseGraphOptions::unsafe_arena_set_allocated_constraint_builder_options(
    ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constraint_builder_options_);
  }
  _impl_.constraint_builder_options_ = constraint_builder_options;
  if (constraint_builder_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::release_constraint_builder_options() {
  
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* temp = _impl_.constraint_builder_options_;
  _impl_.constraint_builder_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::unsafe_arena_release_constraint_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* temp = _impl_.constraint_builder_options_;
  _impl_.constraint_builder_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::_internal_mutable_constraint_builder_options() {
  
  if (_impl_.constraint_builder_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::constraints::proto::ConstraintBuilderOptions>(GetArenaForAllocation());
    _impl_.constraint_builder_options_ = p;
  }
  return _impl_.constraint_builder_options_;
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::mutable_constraint_builder_options() {
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* _msg = _internal_mutable_constraint_builder_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return _msg;
}
inline void PoseGraphOptions::set_allocated_constraint_builder_options(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constraint_builder_options_);
  }
  if (constraint_builder_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_builder_options));
    if (message_arena != submessage_arena) {
      constraint_builder_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint_builder_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.constraint_builder_options_ = constraint_builder_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
}

// double matcher_translation_weight = 7;
inline void PoseGraphOptions::clear_matcher_translation_weight() {
  _impl_.matcher_translation_weight_ = 0;
}
inline double PoseGraphOptions::_internal_matcher_translation_weight() const {
  return _impl_.matcher_translation_weight_;
}
inline double PoseGraphOptions::matcher_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
  return _internal_matcher_translation_weight();
}
inline void PoseGraphOptions::_internal_set_matcher_translation_weight(double value) {
  
  _impl_.matcher_translation_weight_ = value;
}
inline void PoseGraphOptions::set_matcher_translation_weight(double value) {
  _internal_set_matcher_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
}

// double matcher_rotation_weight = 8;
inline void PoseGraphOptions::clear_matcher_rotation_weight() {
  _impl_.matcher_rotation_weight_ = 0;
}
inline double PoseGraphOptions::_internal_matcher_rotation_weight() const {
  return _impl_.matcher_rotation_weight_;
}
inline double PoseGraphOptions::matcher_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
  return _internal_matcher_rotation_weight();
}
inline void PoseGraphOptions::_internal_set_matcher_rotation_weight(double value) {
  
  _impl_.matcher_rotation_weight_ = value;
}
inline void PoseGraphOptions::set_matcher_rotation_weight(double value) {
  _internal_set_matcher_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
}

// .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
inline bool PoseGraphOptions::_internal_has_optimization_problem_options() const {
  return this != internal_default_instance() && _impl_.optimization_problem_options_ != nullptr;
}
inline bool PoseGraphOptions::has_optimization_problem_options() const {
  return _internal_has_optimization_problem_options();
}
inline const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& PoseGraphOptions::_internal_optimization_problem_options() const {
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* p = _impl_.optimization_problem_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions&>(
      ::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_);
}
inline const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& PoseGraphOptions::optimization_problem_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return _internal_optimization_problem_options();
}
inline void PoseGraphOptions::unsafe_arena_set_allocated_optimization_problem_options(
    ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimization_problem_options_);
  }
  _impl_.optimization_problem_options_ = optimization_problem_options;
  if (optimization_problem_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::release_optimization_problem_options() {
  
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* temp = _impl_.optimization_problem_options_;
  _impl_.optimization_problem_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::unsafe_arena_release_optimization_problem_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* temp = _impl_.optimization_problem_options_;
  _impl_.optimization_problem_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::_internal_mutable_optimization_problem_options() {
  
  if (_impl_.optimization_problem_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::optimization::proto::OptimizationProblemOptions>(GetArenaForAllocation());
    _impl_.optimization_problem_options_ = p;
  }
  return _impl_.optimization_problem_options_;
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::mutable_optimization_problem_options() {
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* _msg = _internal_mutable_optimization_problem_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return _msg;
}
inline void PoseGraphOptions::set_allocated_optimization_problem_options(::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimization_problem_options_);
  }
  if (optimization_problem_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimization_problem_options));
    if (message_arena != submessage_arena) {
      optimization_problem_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimization_problem_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optimization_problem_options_ = optimization_problem_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
}

// int32 max_num_final_iterations = 6;
inline void PoseGraphOptions::clear_max_num_final_iterations() {
  _impl_.max_num_final_iterations_ = 0;
}
inline int32_t PoseGraphOptions::_internal_max_num_final_iterations() const {
  return _impl_.max_num_final_iterations_;
}
inline int32_t PoseGraphOptions::max_num_final_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
  return _internal_max_num_final_iterations();
}
inline void PoseGraphOptions::_internal_set_max_num_final_iterations(int32_t value) {
  
  _impl_.max_num_final_iterations_ = value;
}
inline void PoseGraphOptions::set_max_num_final_iterations(int32_t value) {
  _internal_set_max_num_final_iterations(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
}

// double global_sampling_ratio = 5;
inline void PoseGraphOptions::clear_global_sampling_ratio() {
  _impl_.global_sampling_ratio_ = 0;
}
inline double PoseGraphOptions::_internal_global_sampling_ratio() const {
  return _impl_.global_sampling_ratio_;
}
inline double PoseGraphOptions::global_sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
  return _internal_global_sampling_ratio();
}
inline void PoseGraphOptions::_internal_set_global_sampling_ratio(double value) {
  
  _impl_.global_sampling_ratio_ = value;
}
inline void PoseGraphOptions::set_global_sampling_ratio(double value) {
  _internal_set_global_sampling_ratio(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
}

// bool log_residual_histograms = 9;
inline void PoseGraphOptions::clear_log_residual_histograms() {
  _impl_.log_residual_histograms_ = false;
}
inline bool PoseGraphOptions::_internal_log_residual_histograms() const {
  return _impl_.log_residual_histograms_;
}
inline bool PoseGraphOptions::log_residual_histograms() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
  return _internal_log_residual_histograms();
}
inline void PoseGraphOptions::_internal_set_log_residual_histograms(bool value) {
  
  _impl_.log_residual_histograms_ = value;
}
inline void PoseGraphOptions::set_log_residual_histograms(bool value) {
  _internal_set_log_residual_histograms(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
}

// double global_constraint_search_after_n_seconds = 10;
inline void PoseGraphOptions::clear_global_constraint_search_after_n_seconds() {
  _impl_.global_constraint_search_after_n_seconds_ = 0;
}
inline double PoseGraphOptions::_internal_global_constraint_search_after_n_seconds() const {
  return _impl_.global_constraint_search_after_n_seconds_;
}
inline double PoseGraphOptions::global_constraint_search_after_n_seconds() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
  return _internal_global_constraint_search_after_n_seconds();
}
inline void PoseGraphOptions::_internal_set_global_constraint_search_after_n_seconds(double value) {
  
  _impl_.global_constraint_search_after_n_seconds_ = value;
}
inline void PoseGraphOptions::set_global_constraint_search_after_n_seconds(double value) {
  _internal_set_global_constraint_search_after_n_seconds(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
}

// .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
inline bool PoseGraphOptions::_internal_has_overlapping_submaps_trimmer_2d() const {
  return this != internal_default_instance() && _impl_.overlapping_submaps_trimmer_2d_ != nullptr;
}
inline bool PoseGraphOptions::has_overlapping_submaps_trimmer_2d() const {
  return _internal_has_overlapping_submaps_trimmer_2d();
}
inline void PoseGraphOptions::clear_overlapping_submaps_trimmer_2d() {
  if (GetArenaForAllocation() == nullptr && _impl_.overlapping_submaps_trimmer_2d_ != nullptr) {
    delete _impl_.overlapping_submaps_trimmer_2d_;
  }
  _impl_.overlapping_submaps_trimmer_2d_ = nullptr;
}
inline const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& PoseGraphOptions::_internal_overlapping_submaps_trimmer_2d() const {
  const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* p = _impl_.overlapping_submaps_trimmer_2d_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D&>(
      ::cartographer::mapping::proto::_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_);
}
inline const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& PoseGraphOptions::overlapping_submaps_trimmer_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.overlapping_submaps_trimmer_2d)
  return _internal_overlapping_submaps_trimmer_2d();
}
inline void PoseGraphOptions::unsafe_arena_set_allocated_overlapping_submaps_trimmer_2d(
    ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlapping_submaps_trimmer_2d_);
  }
  _impl_.overlapping_submaps_trimmer_2d_ = overlapping_submaps_trimmer_2d;
  if (overlapping_submaps_trimmer_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.PoseGraphOptions.overlapping_submaps_trimmer_2d)
}
inline ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* PoseGraphOptions::release_overlapping_submaps_trimmer_2d() {
  
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* temp = _impl_.overlapping_submaps_trimmer_2d_;
  _impl_.overlapping_submaps_trimmer_2d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* PoseGraphOptions::unsafe_arena_release_overlapping_submaps_trimmer_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.overlapping_submaps_trimmer_2d)
  
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* temp = _impl_.overlapping_submaps_trimmer_2d_;
  _impl_.overlapping_submaps_trimmer_2d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* PoseGraphOptions::_internal_mutable_overlapping_submaps_trimmer_2d() {
  
  if (_impl_.overlapping_submaps_trimmer_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D>(GetArenaForAllocation());
    _impl_.overlapping_submaps_trimmer_2d_ = p;
  }
  return _impl_.overlapping_submaps_trimmer_2d_;
}
inline ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* PoseGraphOptions::mutable_overlapping_submaps_trimmer_2d() {
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* _msg = _internal_mutable_overlapping_submaps_trimmer_2d();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.overlapping_submaps_trimmer_2d)
  return _msg;
}
inline void PoseGraphOptions::set_allocated_overlapping_submaps_trimmer_2d(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overlapping_submaps_trimmer_2d_;
  }
  if (overlapping_submaps_trimmer_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlapping_submaps_trimmer_2d);
    if (message_arena != submessage_arena) {
      overlapping_submaps_trimmer_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlapping_submaps_trimmer_2d, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.overlapping_submaps_trimmer_2d_ = overlapping_submaps_trimmer_2d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.overlapping_submaps_trimmer_2d)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
