// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class SubmapList;
struct SubmapListDefaultTypeInternal;
extern SubmapListDefaultTypeInternal _SubmapList_default_instance_;
class SubmapList_SubmapEntry;
struct SubmapList_SubmapEntryDefaultTypeInternal;
extern SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
class SubmapList_TrajectorySubmapList;
struct SubmapList_TrajectorySubmapListDefaultTypeInternal;
extern SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
class SubmapQuery;
struct SubmapQueryDefaultTypeInternal;
extern SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
class SubmapQuery_Request;
struct SubmapQuery_RequestDefaultTypeInternal;
extern SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
class SubmapQuery_Response;
struct SubmapQuery_ResponseDefaultTypeInternal;
extern SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
class SubmapQuery_Response_SubmapTexture;
struct SubmapQuery_Response_SubmapTextureDefaultTypeInternal;
extern SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::SubmapList* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList>(Arena*);
template<> ::cartographer::mapping::proto::SubmapList_SubmapEntry* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList_SubmapEntry>(Arena*);
template<> ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList_TrajectorySubmapList>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Request* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Request>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Response* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class SubmapList_SubmapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList.SubmapEntry) */ {
 public:
  inline SubmapList_SubmapEntry() : SubmapList_SubmapEntry(nullptr) {}
  ~SubmapList_SubmapEntry() override;
  explicit PROTOBUF_CONSTEXPR SubmapList_SubmapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from);
  SubmapList_SubmapEntry(SubmapList_SubmapEntry&& from) noexcept
    : SubmapList_SubmapEntry() {
    *this = ::std::move(from);
  }

  inline SubmapList_SubmapEntry& operator=(const SubmapList_SubmapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapList_SubmapEntry& operator=(SubmapList_SubmapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapList_SubmapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapList_SubmapEntry* internal_default_instance() {
    return reinterpret_cast<const SubmapList_SubmapEntry*>(
               &_SubmapList_SubmapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmapList_SubmapEntry& a, SubmapList_SubmapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapList_SubmapEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapList_SubmapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapList_SubmapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapList_SubmapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapList_SubmapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapList_SubmapEntry& from) {
    SubmapList_SubmapEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList_SubmapEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapList.SubmapEntry";
  }
  protected:
  explicit SubmapList_SubmapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 3,
    kSubmapVersionFieldNumber = 1,
  };
  // .cartographer.transform.proto.Rigid3d pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::cartographer::transform::proto::Rigid3d* pose);
  ::cartographer::transform::proto::Rigid3d* unsafe_arena_release_pose();

  // int32 submap_version = 1;
  void clear_submap_version();
  int32_t submap_version() const;
  void set_submap_version(int32_t value);
  private:
  int32_t _internal_submap_version() const;
  void _internal_set_submap_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.SubmapEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::transform::proto::Rigid3d* pose_;
    int32_t submap_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapList_TrajectorySubmapList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList.TrajectorySubmapList) */ {
 public:
  inline SubmapList_TrajectorySubmapList() : SubmapList_TrajectorySubmapList(nullptr) {}
  ~SubmapList_TrajectorySubmapList() override;
  explicit PROTOBUF_CONSTEXPR SubmapList_TrajectorySubmapList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from);
  SubmapList_TrajectorySubmapList(SubmapList_TrajectorySubmapList&& from) noexcept
    : SubmapList_TrajectorySubmapList() {
    *this = ::std::move(from);
  }

  inline SubmapList_TrajectorySubmapList& operator=(const SubmapList_TrajectorySubmapList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapList_TrajectorySubmapList& operator=(SubmapList_TrajectorySubmapList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapList_TrajectorySubmapList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapList_TrajectorySubmapList* internal_default_instance() {
    return reinterpret_cast<const SubmapList_TrajectorySubmapList*>(
               &_SubmapList_TrajectorySubmapList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubmapList_TrajectorySubmapList& a, SubmapList_TrajectorySubmapList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapList_TrajectorySubmapList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapList_TrajectorySubmapList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapList_TrajectorySubmapList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapList_TrajectorySubmapList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapList_TrajectorySubmapList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapList_TrajectorySubmapList& from) {
    SubmapList_TrajectorySubmapList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList_TrajectorySubmapList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapList.TrajectorySubmapList";
  }
  protected:
  explicit SubmapList_TrajectorySubmapList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapFieldNumber = 1,
  };
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  int submap_size() const;
  private:
  int _internal_submap_size() const;
  public:
  void clear_submap();
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* mutable_submap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
      mutable_submap();
  private:
  const ::cartographer::mapping::proto::SubmapList_SubmapEntry& _internal_submap(int index) const;
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* _internal_add_submap();
  public:
  const ::cartographer::mapping::proto::SubmapList_SubmapEntry& submap(int index) const;
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* add_submap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
      submap() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry > submap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList) */ {
 public:
  inline SubmapList() : SubmapList(nullptr) {}
  ~SubmapList() override;
  explicit PROTOBUF_CONSTEXPR SubmapList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapList(const SubmapList& from);
  SubmapList(SubmapList&& from) noexcept
    : SubmapList() {
    *this = ::std::move(from);
  }

  inline SubmapList& operator=(const SubmapList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapList& operator=(SubmapList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapList* internal_default_instance() {
    return reinterpret_cast<const SubmapList*>(
               &_SubmapList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubmapList& a, SubmapList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapList& from) {
    SubmapList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapList";
  }
  protected:
  explicit SubmapList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapList_SubmapEntry SubmapEntry;
  typedef SubmapList_TrajectorySubmapList TrajectorySubmapList;

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 2,
  };
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  int trajectory_size() const;
  private:
  int _internal_trajectory_size() const;
  public:
  void clear_trajectory();
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* mutable_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
      mutable_trajectory();
  private:
  const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& _internal_trajectory(int index) const;
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* _internal_add_trajectory();
  public:
  const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& trajectory(int index) const;
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* add_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
      trajectory() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList > trajectory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapQuery_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Request) */ {
 public:
  inline SubmapQuery_Request() : SubmapQuery_Request(nullptr) {}
  ~SubmapQuery_Request() override;
  explicit PROTOBUF_CONSTEXPR SubmapQuery_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQuery_Request(const SubmapQuery_Request& from);
  SubmapQuery_Request(SubmapQuery_Request&& from) noexcept
    : SubmapQuery_Request() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Request& operator=(const SubmapQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQuery_Request& operator=(SubmapQuery_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQuery_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQuery_Request* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Request*>(
               &_SubmapQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubmapQuery_Request& a, SubmapQuery_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQuery_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQuery_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQuery_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQuery_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQuery_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQuery_Request& from) {
    SubmapQuery_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapQuery.Request";
  }
  protected:
  explicit SubmapQuery_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapIndexFieldNumber = 1,
    kTrajectoryIdFieldNumber = 2,
  };
  // int32 submap_index = 1;
  void clear_submap_index();
  int32_t submap_index() const;
  void set_submap_index(int32_t value);
  private:
  int32_t _internal_submap_index() const;
  void _internal_set_submap_index(int32_t value);
  public:

  // int32 trajectory_id = 2;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t submap_index_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapQuery_Response_SubmapTexture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture) */ {
 public:
  inline SubmapQuery_Response_SubmapTexture() : SubmapQuery_Response_SubmapTexture(nullptr) {}
  ~SubmapQuery_Response_SubmapTexture() override;
  explicit PROTOBUF_CONSTEXPR SubmapQuery_Response_SubmapTexture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from);
  SubmapQuery_Response_SubmapTexture(SubmapQuery_Response_SubmapTexture&& from) noexcept
    : SubmapQuery_Response_SubmapTexture() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Response_SubmapTexture& operator=(const SubmapQuery_Response_SubmapTexture& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQuery_Response_SubmapTexture& operator=(SubmapQuery_Response_SubmapTexture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQuery_Response_SubmapTexture& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQuery_Response_SubmapTexture* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Response_SubmapTexture*>(
               &_SubmapQuery_Response_SubmapTexture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubmapQuery_Response_SubmapTexture& a, SubmapQuery_Response_SubmapTexture& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQuery_Response_SubmapTexture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQuery_Response_SubmapTexture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQuery_Response_SubmapTexture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQuery_Response_SubmapTexture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQuery_Response_SubmapTexture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQuery_Response_SubmapTexture& from) {
    SubmapQuery_Response_SubmapTexture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Response_SubmapTexture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture";
  }
  protected:
  explicit SubmapQuery_Response_SubmapTexture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
    kSlicePoseFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kResolutionFieldNumber = 4,
  };
  // bytes cells = 1;
  void clear_cells();
  const std::string& cells() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cells(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cells();
  PROTOBUF_NODISCARD std::string* release_cells();
  void set_allocated_cells(std::string* cells);
  private:
  const std::string& _internal_cells() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cells(const std::string& value);
  std::string* _internal_mutable_cells();
  public:

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  bool has_slice_pose() const;
  private:
  bool _internal_has_slice_pose() const;
  public:
  void clear_slice_pose();
  const ::cartographer::transform::proto::Rigid3d& slice_pose() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Rigid3d* release_slice_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_slice_pose();
  void set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_slice_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_slice_pose();
  public:
  void unsafe_arena_set_allocated_slice_pose(
      ::cartographer::transform::proto::Rigid3d* slice_pose);
  ::cartographer::transform::proto::Rigid3d* unsafe_arena_release_slice_pose();

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // double resolution = 4;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cells_;
    ::cartographer::transform::proto::Rigid3d* slice_pose_;
    int32_t width_;
    int32_t height_;
    double resolution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapQuery_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Response) */ {
 public:
  inline SubmapQuery_Response() : SubmapQuery_Response(nullptr) {}
  ~SubmapQuery_Response() override;
  explicit PROTOBUF_CONSTEXPR SubmapQuery_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQuery_Response(const SubmapQuery_Response& from);
  SubmapQuery_Response(SubmapQuery_Response&& from) noexcept
    : SubmapQuery_Response() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Response& operator=(const SubmapQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQuery_Response& operator=(SubmapQuery_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQuery_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQuery_Response* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Response*>(
               &_SubmapQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubmapQuery_Response& a, SubmapQuery_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQuery_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQuery_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQuery_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQuery_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQuery_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQuery_Response& from) {
    SubmapQuery_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapQuery.Response";
  }
  protected:
  explicit SubmapQuery_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapQuery_Response_SubmapTexture SubmapTexture;

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 10,
    kErrorMessageFieldNumber = 8,
    kSubmapVersionFieldNumber = 2,
  };
  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >*
      mutable_textures();
  private:
  const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& _internal_textures(int index) const;
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* _internal_add_textures();
  public:
  const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& textures(int index) const;
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >&
      textures() const;

  // string error_message = 8;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int32 submap_version = 2;
  void clear_submap_version();
  int32_t submap_version() const;
  void set_submap_version(int32_t value);
  private:
  int32_t _internal_submap_version() const;
  void _internal_set_submap_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture > textures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int32_t submap_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// -------------------------------------------------------------------

class SubmapQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery) */ {
 public:
  inline SubmapQuery() : SubmapQuery(nullptr) {}
  ~SubmapQuery() override;
  explicit PROTOBUF_CONSTEXPR SubmapQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQuery(const SubmapQuery& from);
  SubmapQuery(SubmapQuery&& from) noexcept
    : SubmapQuery() {
    *this = ::std::move(from);
  }

  inline SubmapQuery& operator=(const SubmapQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQuery& operator=(SubmapQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQuery* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery*>(
               &_SubmapQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubmapQuery& a, SubmapQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQuery& from) {
    SubmapQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SubmapQuery";
  }
  protected:
  explicit SubmapQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapQuery_Request Request;
  typedef SubmapQuery_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::cartographer::mapping::proto::SubmapQuery_Request& request() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::SubmapQuery_Request* release_request();
  ::cartographer::mapping::proto::SubmapQuery_Request* mutable_request();
  void set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request);
  private:
  const ::cartographer::mapping::proto::SubmapQuery_Request& _internal_request() const;
  ::cartographer::mapping::proto::SubmapQuery_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::cartographer::mapping::proto::SubmapQuery_Request* request);
  ::cartographer::mapping::proto::SubmapQuery_Request* unsafe_arena_release_request();

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::cartographer::mapping::proto::SubmapQuery_Response& response() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::SubmapQuery_Response* release_response();
  ::cartographer::mapping::proto::SubmapQuery_Response* mutable_response();
  void set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response);
  private:
  const ::cartographer::mapping::proto::SubmapQuery_Response& _internal_response() const;
  ::cartographer::mapping::proto::SubmapQuery_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::cartographer::mapping::proto::SubmapQuery_Response* response);
  ::cartographer::mapping::proto::SubmapQuery_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::proto::SubmapQuery_Request* request_;
    ::cartographer::mapping::proto::SubmapQuery_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapList_SubmapEntry

// int32 submap_version = 1;
inline void SubmapList_SubmapEntry::clear_submap_version() {
  _impl_.submap_version_ = 0;
}
inline int32_t SubmapList_SubmapEntry::_internal_submap_version() const {
  return _impl_.submap_version_;
}
inline int32_t SubmapList_SubmapEntry::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
  return _internal_submap_version();
}
inline void SubmapList_SubmapEntry::_internal_set_submap_version(int32_t value) {
  
  _impl_.submap_version_ = value;
}
inline void SubmapList_SubmapEntry::set_submap_version(int32_t value) {
  _internal_set_submap_version(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
}

// .cartographer.transform.proto.Rigid3d pose = 3;
inline bool SubmapList_SubmapEntry::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool SubmapList_SubmapEntry::has_pose() const {
  return _internal_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::_internal_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Rigid3d&>(
      ::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return _internal_pose();
}
inline void SubmapList_SubmapEntry::unsafe_arena_set_allocated_pose(
    ::cartographer::transform::proto::Rigid3d* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::release_pose() {
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::mutable_pose() {
  ::cartographer::transform::proto::Rigid3d* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return _msg;
}
inline void SubmapList_SubmapEntry::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
}

// -------------------------------------------------------------------

// SubmapList_TrajectorySubmapList

// repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
inline int SubmapList_TrajectorySubmapList::_internal_submap_size() const {
  return _impl_.submap_.size();
}
inline int SubmapList_TrajectorySubmapList::submap_size() const {
  return _internal_submap_size();
}
inline void SubmapList_TrajectorySubmapList::clear_submap() {
  _impl_.submap_.Clear();
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return _impl_.submap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
SubmapList_TrajectorySubmapList::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return &_impl_.submap_;
}
inline const ::cartographer::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::_internal_submap(int index) const {
  return _impl_.submap_.Get(index);
}
inline const ::cartographer::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return _internal_submap(index);
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::_internal_add_submap() {
  return _impl_.submap_.Add();
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::add_submap() {
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* _add = _internal_add_submap();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
SubmapList_TrajectorySubmapList::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return _impl_.submap_;
}

// -------------------------------------------------------------------

// SubmapList

// repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
inline int SubmapList::_internal_trajectory_size() const {
  return _impl_.trajectory_.size();
}
inline int SubmapList::trajectory_size() const {
  return _internal_trajectory_size();
}
inline void SubmapList::clear_trajectory() {
  _impl_.trajectory_.Clear();
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.trajectory)
  return _impl_.trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
SubmapList::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.trajectory)
  return &_impl_.trajectory_;
}
inline const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::_internal_trajectory(int index) const {
  return _impl_.trajectory_.Get(index);
}
inline const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.trajectory)
  return _internal_trajectory(index);
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::_internal_add_trajectory() {
  return _impl_.trajectory_.Add();
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::add_trajectory() {
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* _add = _internal_add_trajectory();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.trajectory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
SubmapList::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.trajectory)
  return _impl_.trajectory_;
}

// -------------------------------------------------------------------

// SubmapQuery_Request

// int32 submap_index = 1;
inline void SubmapQuery_Request::clear_submap_index() {
  _impl_.submap_index_ = 0;
}
inline int32_t SubmapQuery_Request::_internal_submap_index() const {
  return _impl_.submap_index_;
}
inline int32_t SubmapQuery_Request::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
  return _internal_submap_index();
}
inline void SubmapQuery_Request::_internal_set_submap_index(int32_t value) {
  
  _impl_.submap_index_ = value;
}
inline void SubmapQuery_Request::set_submap_index(int32_t value) {
  _internal_set_submap_index(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
}

// int32 trajectory_id = 2;
inline void SubmapQuery_Request::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t SubmapQuery_Request::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t SubmapQuery_Request::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
  return _internal_trajectory_id();
}
inline void SubmapQuery_Request::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void SubmapQuery_Request::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
}

// -------------------------------------------------------------------

// SubmapQuery_Response_SubmapTexture

// bytes cells = 1;
inline void SubmapQuery_Response_SubmapTexture::clear_cells() {
  _impl_.cells_.ClearToEmpty();
}
inline const std::string& SubmapQuery_Response_SubmapTexture::cells() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return _internal_cells();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubmapQuery_Response_SubmapTexture::set_cells(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cells_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
inline std::string* SubmapQuery_Response_SubmapTexture::mutable_cells() {
  std::string* _s = _internal_mutable_cells();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return _s;
}
inline const std::string& SubmapQuery_Response_SubmapTexture::_internal_cells() const {
  return _impl_.cells_.Get();
}
inline void SubmapQuery_Response_SubmapTexture::_internal_set_cells(const std::string& value) {
  
  _impl_.cells_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmapQuery_Response_SubmapTexture::_internal_mutable_cells() {
  
  return _impl_.cells_.Mutable(GetArenaForAllocation());
}
inline std::string* SubmapQuery_Response_SubmapTexture::release_cells() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return _impl_.cells_.Release();
}
inline void SubmapQuery_Response_SubmapTexture::set_allocated_cells(std::string* cells) {
  if (cells != nullptr) {
    
  } else {
    
  }
  _impl_.cells_.SetAllocated(cells, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cells_.IsDefault()) {
    _impl_.cells_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}

// int32 width = 2;
inline void SubmapQuery_Response_SubmapTexture::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t SubmapQuery_Response_SubmapTexture::_internal_width() const {
  return _impl_.width_;
}
inline int32_t SubmapQuery_Response_SubmapTexture::width() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
  return _internal_width();
}
inline void SubmapQuery_Response_SubmapTexture::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void SubmapQuery_Response_SubmapTexture::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
}

// int32 height = 3;
inline void SubmapQuery_Response_SubmapTexture::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t SubmapQuery_Response_SubmapTexture::_internal_height() const {
  return _impl_.height_;
}
inline int32_t SubmapQuery_Response_SubmapTexture::height() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
  return _internal_height();
}
inline void SubmapQuery_Response_SubmapTexture::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void SubmapQuery_Response_SubmapTexture::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
}

// double resolution = 4;
inline void SubmapQuery_Response_SubmapTexture::clear_resolution() {
  _impl_.resolution_ = 0;
}
inline double SubmapQuery_Response_SubmapTexture::_internal_resolution() const {
  return _impl_.resolution_;
}
inline double SubmapQuery_Response_SubmapTexture::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
  return _internal_resolution();
}
inline void SubmapQuery_Response_SubmapTexture::_internal_set_resolution(double value) {
  
  _impl_.resolution_ = value;
}
inline void SubmapQuery_Response_SubmapTexture::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
}

// .cartographer.transform.proto.Rigid3d slice_pose = 5;
inline bool SubmapQuery_Response_SubmapTexture::_internal_has_slice_pose() const {
  return this != internal_default_instance() && _impl_.slice_pose_ != nullptr;
}
inline bool SubmapQuery_Response_SubmapTexture::has_slice_pose() const {
  return _internal_has_slice_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::_internal_slice_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = _impl_.slice_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Rigid3d&>(
      ::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::slice_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return _internal_slice_pose();
}
inline void SubmapQuery_Response_SubmapTexture::unsafe_arena_set_allocated_slice_pose(
    ::cartographer::transform::proto::Rigid3d* slice_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_pose_);
  }
  _impl_.slice_pose_ = slice_pose;
  if (slice_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::release_slice_pose() {
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.slice_pose_;
  _impl_.slice_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::unsafe_arena_release_slice_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.slice_pose_;
  _impl_.slice_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::_internal_mutable_slice_pose() {
  
  if (_impl_.slice_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaForAllocation());
    _impl_.slice_pose_ = p;
  }
  return _impl_.slice_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::mutable_slice_pose() {
  ::cartographer::transform::proto::Rigid3d* _msg = _internal_mutable_slice_pose();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return _msg;
}
inline void SubmapQuery_Response_SubmapTexture::set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_pose_);
  }
  if (slice_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_pose));
    if (message_arena != submessage_arena) {
      slice_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.slice_pose_ = slice_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
}

// -------------------------------------------------------------------

// SubmapQuery_Response

// int32 submap_version = 2;
inline void SubmapQuery_Response::clear_submap_version() {
  _impl_.submap_version_ = 0;
}
inline int32_t SubmapQuery_Response::_internal_submap_version() const {
  return _impl_.submap_version_;
}
inline int32_t SubmapQuery_Response::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
  return _internal_submap_version();
}
inline void SubmapQuery_Response::_internal_set_submap_version(int32_t value) {
  
  _impl_.submap_version_ = value;
}
inline void SubmapQuery_Response::set_submap_version(int32_t value) {
  _internal_set_submap_version(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
}

// repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
inline int SubmapQuery_Response::_internal_textures_size() const {
  return _impl_.textures_.size();
}
inline int SubmapQuery_Response::textures_size() const {
  return _internal_textures_size();
}
inline void SubmapQuery_Response::clear_textures() {
  _impl_.textures_.Clear();
}
inline ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return _impl_.textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >*
SubmapQuery_Response::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return &_impl_.textures_;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& SubmapQuery_Response::_internal_textures(int index) const {
  return _impl_.textures_.Get(index);
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& SubmapQuery_Response::textures(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return _internal_textures(index);
}
inline ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::_internal_add_textures() {
  return _impl_.textures_.Add();
}
inline ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::add_textures() {
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* _add = _internal_add_textures();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >&
SubmapQuery_Response::textures() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return _impl_.textures_;
}

// string error_message = 8;
inline void SubmapQuery_Response::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& SubmapQuery_Response::error_message() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubmapQuery_Response::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
inline std::string* SubmapQuery_Response::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return _s;
}
inline const std::string& SubmapQuery_Response::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void SubmapQuery_Response::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmapQuery_Response::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SubmapQuery_Response::release_error_message() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return _impl_.error_message_.Release();
}
inline void SubmapQuery_Response::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}

// -------------------------------------------------------------------

// SubmapQuery

// .cartographer.mapping.proto.SubmapQuery.Request request = 1;
inline bool SubmapQuery::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool SubmapQuery::has_request() const {
  return _internal_has_request();
}
inline void SubmapQuery::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::_internal_request() const {
  const ::cartographer::mapping::proto::SubmapQuery_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::SubmapQuery_Request&>(
      ::cartographer::mapping::proto::_SubmapQuery_Request_default_instance_);
}
inline const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::request() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.request)
  return _internal_request();
}
inline void SubmapQuery::unsafe_arena_set_allocated_request(
    ::cartographer::mapping::proto::SubmapQuery_Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SubmapQuery.request)
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::release_request() {
  
  ::cartographer::mapping::proto::SubmapQuery_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.request)
  
  ::cartographer::mapping::proto::SubmapQuery_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::mutable_request() {
  ::cartographer::mapping::proto::SubmapQuery_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.request)
  return _msg;
}
inline void SubmapQuery::set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.request)
}

// .cartographer.mapping.proto.SubmapQuery.Response response = 2;
inline bool SubmapQuery::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool SubmapQuery::has_response() const {
  return _internal_has_response();
}
inline void SubmapQuery::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::_internal_response() const {
  const ::cartographer::mapping::proto::SubmapQuery_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::SubmapQuery_Response&>(
      ::cartographer::mapping::proto::_SubmapQuery_Response_default_instance_);
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::response() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.response)
  return _internal_response();
}
inline void SubmapQuery::unsafe_arena_set_allocated_response(
    ::cartographer::mapping::proto::SubmapQuery_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SubmapQuery.response)
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::release_response() {
  
  ::cartographer::mapping::proto::SubmapQuery_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.response)
  
  ::cartographer::mapping::proto::SubmapQuery_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::mutable_response() {
  ::cartographer::mapping::proto::SubmapQuery_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.response)
  return _msg;
}
inline void SubmapQuery::set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
