// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fserialization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fserialization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph.pb.h"
#include "cartographer/mapping/proto/submap.pb.h"
#include "cartographer/mapping/proto/trajectory_node_data.pb.h"
#include "cartographer/sensor/proto/sensor.pb.h"
#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class FixedFramePoseData;
struct FixedFramePoseDataDefaultTypeInternal;
extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
class ImuData;
struct ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class LandmarkData;
struct LandmarkDataDefaultTypeInternal;
extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
class LocalSlamResultData;
struct LocalSlamResultDataDefaultTypeInternal;
extern LocalSlamResultDataDefaultTypeInternal _LocalSlamResultData_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class OdometryData;
struct OdometryDataDefaultTypeInternal;
extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
class SerializationHeader;
struct SerializationHeaderDefaultTypeInternal;
extern SerializationHeaderDefaultTypeInternal _SerializationHeader_default_instance_;
class SerializedData;
struct SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class Submap;
struct SubmapDefaultTypeInternal;
extern SubmapDefaultTypeInternal _Submap_default_instance_;
class TrajectoryData;
struct TrajectoryDataDefaultTypeInternal;
extern TrajectoryDataDefaultTypeInternal _TrajectoryData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::FixedFramePoseData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::FixedFramePoseData>(Arena*);
template<> ::cartographer::mapping::proto::ImuData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::ImuData>(Arena*);
template<> ::cartographer::mapping::proto::LandmarkData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LandmarkData>(Arena*);
template<> ::cartographer::mapping::proto::LocalSlamResultData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LocalSlamResultData>(Arena*);
template<> ::cartographer::mapping::proto::Node* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Node>(Arena*);
template<> ::cartographer::mapping::proto::OdometryData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::OdometryData>(Arena*);
template<> ::cartographer::mapping::proto::SerializationHeader* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SerializationHeader>(Arena*);
template<> ::cartographer::mapping::proto::SerializedData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SerializedData>(Arena*);
template<> ::cartographer::mapping::proto::Submap* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Submap>(Arena*);
template<> ::cartographer::mapping::proto::TrajectoryData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class Submap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap) */ {
 public:
  inline Submap() : Submap(nullptr) {}
  ~Submap() override;
  explicit PROTOBUF_CONSTEXPR Submap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Submap(const Submap& from);
  Submap(Submap&& from) noexcept
    : Submap() {
    *this = ::std::move(from);
  }

  inline Submap& operator=(const Submap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submap& operator=(Submap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Submap& default_instance() {
    return *internal_default_instance();
  }
  static inline const Submap* internal_default_instance() {
    return reinterpret_cast<const Submap*>(
               &_Submap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Submap& a, Submap& b) {
    a.Swap(&b);
  }
  inline void Swap(Submap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Submap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Submap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Submap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Submap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Submap& from) {
    Submap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Submap";
  }
  protected:
  explicit Submap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapIdFieldNumber = 1,
    kSubmap2DFieldNumber = 2,
    kSubmap3DFieldNumber = 3,
  };
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  private:
  bool _internal_has_submap_id() const;
  public:
  void clear_submap_id();
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::SubmapId* release_submap_id();
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);
  private:
  const ::cartographer::mapping::proto::SubmapId& _internal_submap_id() const;
  ::cartographer::mapping::proto::SubmapId* _internal_mutable_submap_id();
  public:
  void unsafe_arena_set_allocated_submap_id(
      ::cartographer::mapping::proto::SubmapId* submap_id);
  ::cartographer::mapping::proto::SubmapId* unsafe_arena_release_submap_id();

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  bool has_submap_2d() const;
  private:
  bool _internal_has_submap_2d() const;
  public:
  void clear_submap_2d();
  const ::cartographer::mapping::proto::Submap2D& submap_2d() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::Submap2D* release_submap_2d();
  ::cartographer::mapping::proto::Submap2D* mutable_submap_2d();
  void set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d);
  private:
  const ::cartographer::mapping::proto::Submap2D& _internal_submap_2d() const;
  ::cartographer::mapping::proto::Submap2D* _internal_mutable_submap_2d();
  public:
  void unsafe_arena_set_allocated_submap_2d(
      ::cartographer::mapping::proto::Submap2D* submap_2d);
  ::cartographer::mapping::proto::Submap2D* unsafe_arena_release_submap_2d();

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  bool has_submap_3d() const;
  private:
  bool _internal_has_submap_3d() const;
  public:
  void clear_submap_3d();
  const ::cartographer::mapping::proto::Submap3D& submap_3d() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::Submap3D* release_submap_3d();
  ::cartographer::mapping::proto::Submap3D* mutable_submap_3d();
  void set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d);
  private:
  const ::cartographer::mapping::proto::Submap3D& _internal_submap_3d() const;
  ::cartographer::mapping::proto::Submap3D* _internal_mutable_submap_3d();
  public:
  void unsafe_arena_set_allocated_submap_3d(
      ::cartographer::mapping::proto::Submap3D* submap_3d);
  ::cartographer::mapping::proto::Submap3D* unsafe_arena_release_submap_3d();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::proto::SubmapId* submap_id_;
    ::cartographer::mapping::proto::Submap2D* submap_2d_;
    ::cartographer::mapping::proto::Submap3D* submap_3d_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kNodeDataFieldNumber = 5,
  };
  // .cartographer.mapping.proto.NodeId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::cartographer::mapping::proto::NodeId& node_id() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::NodeId* release_node_id();
  ::cartographer::mapping::proto::NodeId* mutable_node_id();
  void set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id);
  private:
  const ::cartographer::mapping::proto::NodeId& _internal_node_id() const;
  ::cartographer::mapping::proto::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::cartographer::mapping::proto::NodeId* node_id);
  ::cartographer::mapping::proto::NodeId* unsafe_arena_release_node_id();

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  bool has_node_data() const;
  private:
  bool _internal_has_node_data() const;
  public:
  void clear_node_data();
  const ::cartographer::mapping::proto::TrajectoryNodeData& node_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::TrajectoryNodeData* release_node_data();
  ::cartographer::mapping::proto::TrajectoryNodeData* mutable_node_data();
  void set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data);
  private:
  const ::cartographer::mapping::proto::TrajectoryNodeData& _internal_node_data() const;
  ::cartographer::mapping::proto::TrajectoryNodeData* _internal_mutable_node_data();
  public:
  void unsafe_arena_set_allocated_node_data(
      ::cartographer::mapping::proto::TrajectoryNodeData* node_data);
  ::cartographer::mapping::proto::TrajectoryNodeData* unsafe_arena_release_node_data();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::mapping::proto::NodeId* node_id_;
    ::cartographer::mapping::proto::TrajectoryNodeData* node_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class ImuData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ImuData) */ {
 public:
  inline ImuData() : ImuData(nullptr) {}
  ~ImuData() override;
  explicit PROTOBUF_CONSTEXPR ImuData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuData(const ImuData& from);
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuData& from) {
    ImuData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.ImuData";
  }
  protected:
  explicit ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuDataFieldNumber = 2,
    kTrajectoryIdFieldNumber = 1,
  };
  // .cartographer.sensor.proto.ImuData imu_data = 2;
  bool has_imu_data() const;
  private:
  bool _internal_has_imu_data() const;
  public:
  void clear_imu_data();
  const ::cartographer::sensor::proto::ImuData& imu_data() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::ImuData* release_imu_data();
  ::cartographer::sensor::proto::ImuData* mutable_imu_data();
  void set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data);
  private:
  const ::cartographer::sensor::proto::ImuData& _internal_imu_data() const;
  ::cartographer::sensor::proto::ImuData* _internal_mutable_imu_data();
  public:
  void unsafe_arena_set_allocated_imu_data(
      ::cartographer::sensor::proto::ImuData* imu_data);
  ::cartographer::sensor::proto::ImuData* unsafe_arena_release_imu_data();

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ImuData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::sensor::proto::ImuData* imu_data_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class OdometryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.OdometryData) */ {
 public:
  inline OdometryData() : OdometryData(nullptr) {}
  ~OdometryData() override;
  explicit PROTOBUF_CONSTEXPR OdometryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OdometryData(const OdometryData& from);
  OdometryData(OdometryData&& from) noexcept
    : OdometryData() {
    *this = ::std::move(from);
  }

  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryData& operator=(OdometryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OdometryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OdometryData* internal_default_instance() {
    return reinterpret_cast<const OdometryData*>(
               &_OdometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OdometryData& a, OdometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdometryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OdometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OdometryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OdometryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OdometryData& from) {
    OdometryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.OdometryData";
  }
  protected:
  explicit OdometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryDataFieldNumber = 2,
    kTrajectoryIdFieldNumber = 1,
  };
  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  bool has_odometry_data() const;
  private:
  bool _internal_has_odometry_data() const;
  public:
  void clear_odometry_data();
  const ::cartographer::sensor::proto::OdometryData& odometry_data() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::OdometryData* release_odometry_data();
  ::cartographer::sensor::proto::OdometryData* mutable_odometry_data();
  void set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data);
  private:
  const ::cartographer::sensor::proto::OdometryData& _internal_odometry_data() const;
  ::cartographer::sensor::proto::OdometryData* _internal_mutable_odometry_data();
  public:
  void unsafe_arena_set_allocated_odometry_data(
      ::cartographer::sensor::proto::OdometryData* odometry_data);
  ::cartographer::sensor::proto::OdometryData* unsafe_arena_release_odometry_data();

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.OdometryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::sensor::proto::OdometryData* odometry_data_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class FixedFramePoseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.FixedFramePoseData) */ {
 public:
  inline FixedFramePoseData() : FixedFramePoseData(nullptr) {}
  ~FixedFramePoseData() override;
  explicit PROTOBUF_CONSTEXPR FixedFramePoseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedFramePoseData(const FixedFramePoseData& from);
  FixedFramePoseData(FixedFramePoseData&& from) noexcept
    : FixedFramePoseData() {
    *this = ::std::move(from);
  }

  inline FixedFramePoseData& operator=(const FixedFramePoseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedFramePoseData& operator=(FixedFramePoseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedFramePoseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedFramePoseData* internal_default_instance() {
    return reinterpret_cast<const FixedFramePoseData*>(
               &_FixedFramePoseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FixedFramePoseData& a, FixedFramePoseData& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedFramePoseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedFramePoseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedFramePoseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedFramePoseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedFramePoseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FixedFramePoseData& from) {
    FixedFramePoseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedFramePoseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.FixedFramePoseData";
  }
  protected:
  explicit FixedFramePoseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedFramePoseDataFieldNumber = 2,
    kTrajectoryIdFieldNumber = 1,
  };
  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  bool has_fixed_frame_pose_data() const;
  private:
  bool _internal_has_fixed_frame_pose_data() const;
  public:
  void clear_fixed_frame_pose_data();
  const ::cartographer::sensor::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  ::cartographer::sensor::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data);
  private:
  const ::cartographer::sensor::proto::FixedFramePoseData& _internal_fixed_frame_pose_data() const;
  ::cartographer::sensor::proto::FixedFramePoseData* _internal_mutable_fixed_frame_pose_data();
  public:
  void unsafe_arena_set_allocated_fixed_frame_pose_data(
      ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data);
  ::cartographer::sensor::proto::FixedFramePoseData* unsafe_arena_release_fixed_frame_pose_data();

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.FixedFramePoseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class LandmarkData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LandmarkData) */ {
 public:
  inline LandmarkData() : LandmarkData(nullptr) {}
  ~LandmarkData() override;
  explicit PROTOBUF_CONSTEXPR LandmarkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandmarkData(const LandmarkData& from);
  LandmarkData(LandmarkData&& from) noexcept
    : LandmarkData() {
    *this = ::std::move(from);
  }

  inline LandmarkData& operator=(const LandmarkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkData& operator=(LandmarkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandmarkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandmarkData* internal_default_instance() {
    return reinterpret_cast<const LandmarkData*>(
               &_LandmarkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LandmarkData& a, LandmarkData& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandmarkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandmarkData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandmarkData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LandmarkData& from) {
    LandmarkData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.LandmarkData";
  }
  protected:
  explicit LandmarkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkDataFieldNumber = 2,
    kTrajectoryIdFieldNumber = 1,
  };
  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  bool has_landmark_data() const;
  private:
  bool _internal_has_landmark_data() const;
  public:
  void clear_landmark_data();
  const ::cartographer::sensor::proto::LandmarkData& landmark_data() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::LandmarkData* release_landmark_data();
  ::cartographer::sensor::proto::LandmarkData* mutable_landmark_data();
  void set_allocated_landmark_data(::cartographer::sensor::proto::LandmarkData* landmark_data);
  private:
  const ::cartographer::sensor::proto::LandmarkData& _internal_landmark_data() const;
  ::cartographer::sensor::proto::LandmarkData* _internal_mutable_landmark_data();
  public:
  void unsafe_arena_set_allocated_landmark_data(
      ::cartographer::sensor::proto::LandmarkData* landmark_data);
  ::cartographer::sensor::proto::LandmarkData* unsafe_arena_release_landmark_data();

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LandmarkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::sensor::proto::LandmarkData* landmark_data_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryData) */ {
 public:
  inline TrajectoryData() : TrajectoryData(nullptr) {}
  ~TrajectoryData() override;
  explicit PROTOBUF_CONSTEXPR TrajectoryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrajectoryData(const TrajectoryData& from);
  TrajectoryData(TrajectoryData&& from) noexcept
    : TrajectoryData() {
    *this = ::std::move(from);
  }

  inline TrajectoryData& operator=(const TrajectoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryData& operator=(TrajectoryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrajectoryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrajectoryData* internal_default_instance() {
    return reinterpret_cast<const TrajectoryData*>(
               &_TrajectoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrajectoryData& a, TrajectoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrajectoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrajectoryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrajectoryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrajectoryData& from) {
    TrajectoryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TrajectoryData";
  }
  protected:
  explicit TrajectoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuCalibrationFieldNumber = 3,
    kFixedFrameOriginInMapFieldNumber = 4,
    kGravityConstantFieldNumber = 2,
    kTrajectoryIdFieldNumber = 1,
  };
  // .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  bool has_imu_calibration() const;
  private:
  bool _internal_has_imu_calibration() const;
  public:
  void clear_imu_calibration();
  const ::cartographer::transform::proto::Quaterniond& imu_calibration() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Quaterniond* release_imu_calibration();
  ::cartographer::transform::proto::Quaterniond* mutable_imu_calibration();
  void set_allocated_imu_calibration(::cartographer::transform::proto::Quaterniond* imu_calibration);
  private:
  const ::cartographer::transform::proto::Quaterniond& _internal_imu_calibration() const;
  ::cartographer::transform::proto::Quaterniond* _internal_mutable_imu_calibration();
  public:
  void unsafe_arena_set_allocated_imu_calibration(
      ::cartographer::transform::proto::Quaterniond* imu_calibration);
  ::cartographer::transform::proto::Quaterniond* unsafe_arena_release_imu_calibration();

  // .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  bool has_fixed_frame_origin_in_map() const;
  private:
  bool _internal_has_fixed_frame_origin_in_map() const;
  public:
  void clear_fixed_frame_origin_in_map();
  const ::cartographer::transform::proto::Rigid3d& fixed_frame_origin_in_map() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Rigid3d* release_fixed_frame_origin_in_map();
  ::cartographer::transform::proto::Rigid3d* mutable_fixed_frame_origin_in_map();
  void set_allocated_fixed_frame_origin_in_map(::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_fixed_frame_origin_in_map() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_fixed_frame_origin_in_map();
  public:
  void unsafe_arena_set_allocated_fixed_frame_origin_in_map(
      ::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map);
  ::cartographer::transform::proto::Rigid3d* unsafe_arena_release_fixed_frame_origin_in_map();

  // double gravity_constant = 2;
  void clear_gravity_constant();
  double gravity_constant() const;
  void set_gravity_constant(double value);
  private:
  double _internal_gravity_constant() const;
  void _internal_set_gravity_constant(double value);
  public:

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::transform::proto::Quaterniond* imu_calibration_;
    ::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map_;
    double gravity_constant_;
    int32_t trajectory_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class LocalSlamResultData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LocalSlamResultData) */ {
 public:
  inline LocalSlamResultData() : LocalSlamResultData(nullptr) {}
  ~LocalSlamResultData() override;
  explicit PROTOBUF_CONSTEXPR LocalSlamResultData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalSlamResultData(const LocalSlamResultData& from);
  LocalSlamResultData(LocalSlamResultData&& from) noexcept
    : LocalSlamResultData() {
    *this = ::std::move(from);
  }

  inline LocalSlamResultData& operator=(const LocalSlamResultData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalSlamResultData& operator=(LocalSlamResultData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalSlamResultData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalSlamResultData* internal_default_instance() {
    return reinterpret_cast<const LocalSlamResultData*>(
               &_LocalSlamResultData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LocalSlamResultData& a, LocalSlamResultData& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalSlamResultData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalSlamResultData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalSlamResultData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalSlamResultData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalSlamResultData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalSlamResultData& from) {
    LocalSlamResultData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalSlamResultData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.LocalSlamResultData";
  }
  protected:
  explicit LocalSlamResultData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapsFieldNumber = 3,
    kNodeDataFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  int submaps_size() const;
  private:
  int _internal_submaps_size() const;
  public:
  void clear_submaps();
  ::cartographer::mapping::proto::Submap* mutable_submaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Submap >*
      mutable_submaps();
  private:
  const ::cartographer::mapping::proto::Submap& _internal_submaps(int index) const;
  ::cartographer::mapping::proto::Submap* _internal_add_submaps();
  public:
  const ::cartographer::mapping::proto::Submap& submaps(int index) const;
  ::cartographer::mapping::proto::Submap* add_submaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Submap >&
      submaps() const;

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  bool has_node_data() const;
  private:
  bool _internal_has_node_data() const;
  public:
  void clear_node_data();
  const ::cartographer::mapping::proto::TrajectoryNodeData& node_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::TrajectoryNodeData* release_node_data();
  ::cartographer::mapping::proto::TrajectoryNodeData* mutable_node_data();
  void set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data);
  private:
  const ::cartographer::mapping::proto::TrajectoryNodeData& _internal_node_data() const;
  ::cartographer::mapping::proto::TrajectoryNodeData* _internal_mutable_node_data();
  public:
  void unsafe_arena_set_allocated_node_data(
      ::cartographer::mapping::proto::TrajectoryNodeData* node_data);
  ::cartographer::mapping::proto::TrajectoryNodeData* unsafe_arena_release_node_data();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LocalSlamResultData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Submap > submaps_;
    ::cartographer::mapping::proto::TrajectoryNodeData* node_data_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class SerializationHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializationHeader) */ {
 public:
  inline SerializationHeader() : SerializationHeader(nullptr) {}
  ~SerializationHeader() override;
  explicit PROTOBUF_CONSTEXPR SerializationHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializationHeader(const SerializationHeader& from);
  SerializationHeader(SerializationHeader&& from) noexcept
    : SerializationHeader() {
    *this = ::std::move(from);
  }

  inline SerializationHeader& operator=(const SerializationHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializationHeader& operator=(SerializationHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializationHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializationHeader* internal_default_instance() {
    return reinterpret_cast<const SerializationHeader*>(
               &_SerializationHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SerializationHeader& a, SerializationHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializationHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializationHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializationHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializationHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializationHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializationHeader& from) {
    SerializationHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializationHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SerializationHeader";
  }
  protected:
  explicit SerializationHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatVersionFieldNumber = 1,
  };
  // uint32 format_version = 1;
  void clear_format_version();
  uint32_t format_version() const;
  void set_format_version(uint32_t value);
  private:
  uint32_t _internal_format_version() const;
  void _internal_set_format_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializationHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t format_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// -------------------------------------------------------------------

class SerializedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializedData) */ {
 public:
  inline SerializedData() : SerializedData(nullptr) {}
  ~SerializedData() override;
  explicit PROTOBUF_CONSTEXPR SerializedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedData(const SerializedData& from);
  SerializedData(SerializedData&& from) noexcept
    : SerializedData() {
    *this = ::std::move(from);
  }

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedData& operator=(SerializedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedData& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPoseGraph = 1,
    kAllTrajectoryBuilderOptions = 2,
    kSubmap = 3,
    kNode = 4,
    kTrajectoryData = 5,
    kImuData = 6,
    kOdometryData = 7,
    kFixedFramePoseData = 8,
    kLandmarkData = 9,
    DATA_NOT_SET = 0,
  };

  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SerializedData& a, SerializedData& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedData& from) {
    SerializedData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SerializedData";
  }
  protected:
  explicit SerializedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseGraphFieldNumber = 1,
    kAllTrajectoryBuilderOptionsFieldNumber = 2,
    kSubmapFieldNumber = 3,
    kNodeFieldNumber = 4,
    kTrajectoryDataFieldNumber = 5,
    kImuDataFieldNumber = 6,
    kOdometryDataFieldNumber = 7,
    kFixedFramePoseDataFieldNumber = 8,
    kLandmarkDataFieldNumber = 9,
  };
  // .cartographer.mapping.proto.PoseGraph pose_graph = 1;
  bool has_pose_graph() const;
  private:
  bool _internal_has_pose_graph() const;
  public:
  void clear_pose_graph();
  const ::cartographer::mapping::proto::PoseGraph& pose_graph() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::PoseGraph* release_pose_graph();
  ::cartographer::mapping::proto::PoseGraph* mutable_pose_graph();
  void set_allocated_pose_graph(::cartographer::mapping::proto::PoseGraph* pose_graph);
  private:
  const ::cartographer::mapping::proto::PoseGraph& _internal_pose_graph() const;
  ::cartographer::mapping::proto::PoseGraph* _internal_mutable_pose_graph();
  public:
  void unsafe_arena_set_allocated_pose_graph(
      ::cartographer::mapping::proto::PoseGraph* pose_graph);
  ::cartographer::mapping::proto::PoseGraph* unsafe_arena_release_pose_graph();

  // .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
  bool has_all_trajectory_builder_options() const;
  private:
  bool _internal_has_all_trajectory_builder_options() const;
  public:
  void clear_all_trajectory_builder_options();
  const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& all_trajectory_builder_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* release_all_trajectory_builder_options();
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* mutable_all_trajectory_builder_options();
  void set_allocated_all_trajectory_builder_options(::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options);
  private:
  const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& _internal_all_trajectory_builder_options() const;
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* _internal_mutable_all_trajectory_builder_options();
  public:
  void unsafe_arena_set_allocated_all_trajectory_builder_options(
      ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options);
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* unsafe_arena_release_all_trajectory_builder_options();

  // .cartographer.mapping.proto.Submap submap = 3;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::cartographer::mapping::proto::Submap& submap() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::Submap* release_submap();
  ::cartographer::mapping::proto::Submap* mutable_submap();
  void set_allocated_submap(::cartographer::mapping::proto::Submap* submap);
  private:
  const ::cartographer::mapping::proto::Submap& _internal_submap() const;
  ::cartographer::mapping::proto::Submap* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::cartographer::mapping::proto::Submap* submap);
  ::cartographer::mapping::proto::Submap* unsafe_arena_release_submap();

  // .cartographer.mapping.proto.Node node = 4;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::cartographer::mapping::proto::Node& node() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::Node* release_node();
  ::cartographer::mapping::proto::Node* mutable_node();
  void set_allocated_node(::cartographer::mapping::proto::Node* node);
  private:
  const ::cartographer::mapping::proto::Node& _internal_node() const;
  ::cartographer::mapping::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::cartographer::mapping::proto::Node* node);
  ::cartographer::mapping::proto::Node* unsafe_arena_release_node();

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
  bool has_trajectory_data() const;
  private:
  bool _internal_has_trajectory_data() const;
  public:
  void clear_trajectory_data();
  const ::cartographer::mapping::proto::TrajectoryData& trajectory_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::TrajectoryData* release_trajectory_data();
  ::cartographer::mapping::proto::TrajectoryData* mutable_trajectory_data();
  void set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data);
  private:
  const ::cartographer::mapping::proto::TrajectoryData& _internal_trajectory_data() const;
  ::cartographer::mapping::proto::TrajectoryData* _internal_mutable_trajectory_data();
  public:
  void unsafe_arena_set_allocated_trajectory_data(
      ::cartographer::mapping::proto::TrajectoryData* trajectory_data);
  ::cartographer::mapping::proto::TrajectoryData* unsafe_arena_release_trajectory_data();

  // .cartographer.mapping.proto.ImuData imu_data = 6;
  bool has_imu_data() const;
  private:
  bool _internal_has_imu_data() const;
  public:
  void clear_imu_data();
  const ::cartographer::mapping::proto::ImuData& imu_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::ImuData* release_imu_data();
  ::cartographer::mapping::proto::ImuData* mutable_imu_data();
  void set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data);
  private:
  const ::cartographer::mapping::proto::ImuData& _internal_imu_data() const;
  ::cartographer::mapping::proto::ImuData* _internal_mutable_imu_data();
  public:
  void unsafe_arena_set_allocated_imu_data(
      ::cartographer::mapping::proto::ImuData* imu_data);
  ::cartographer::mapping::proto::ImuData* unsafe_arena_release_imu_data();

  // .cartographer.mapping.proto.OdometryData odometry_data = 7;
  bool has_odometry_data() const;
  private:
  bool _internal_has_odometry_data() const;
  public:
  void clear_odometry_data();
  const ::cartographer::mapping::proto::OdometryData& odometry_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::OdometryData* release_odometry_data();
  ::cartographer::mapping::proto::OdometryData* mutable_odometry_data();
  void set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data);
  private:
  const ::cartographer::mapping::proto::OdometryData& _internal_odometry_data() const;
  ::cartographer::mapping::proto::OdometryData* _internal_mutable_odometry_data();
  public:
  void unsafe_arena_set_allocated_odometry_data(
      ::cartographer::mapping::proto::OdometryData* odometry_data);
  ::cartographer::mapping::proto::OdometryData* unsafe_arena_release_odometry_data();

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
  bool has_fixed_frame_pose_data() const;
  private:
  bool _internal_has_fixed_frame_pose_data() const;
  public:
  void clear_fixed_frame_pose_data();
  const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  ::cartographer::mapping::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);
  private:
  const ::cartographer::mapping::proto::FixedFramePoseData& _internal_fixed_frame_pose_data() const;
  ::cartographer::mapping::proto::FixedFramePoseData* _internal_mutable_fixed_frame_pose_data();
  public:
  void unsafe_arena_set_allocated_fixed_frame_pose_data(
      ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);
  ::cartographer::mapping::proto::FixedFramePoseData* unsafe_arena_release_fixed_frame_pose_data();

  // .cartographer.mapping.proto.LandmarkData landmark_data = 9;
  bool has_landmark_data() const;
  private:
  bool _internal_has_landmark_data() const;
  public:
  void clear_landmark_data();
  const ::cartographer::mapping::proto::LandmarkData& landmark_data() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::LandmarkData* release_landmark_data();
  ::cartographer::mapping::proto::LandmarkData* mutable_landmark_data();
  void set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data);
  private:
  const ::cartographer::mapping::proto::LandmarkData& _internal_landmark_data() const;
  ::cartographer::mapping::proto::LandmarkData* _internal_mutable_landmark_data();
  public:
  void unsafe_arena_set_allocated_landmark_data(
      ::cartographer::mapping::proto::LandmarkData* landmark_data);
  ::cartographer::mapping::proto::LandmarkData* unsafe_arena_release_landmark_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializedData)
 private:
  class _Internal;
  void set_has_pose_graph();
  void set_has_all_trajectory_builder_options();
  void set_has_submap();
  void set_has_node();
  void set_has_trajectory_data();
  void set_has_imu_data();
  void set_has_odometry_data();
  void set_has_fixed_frame_pose_data();
  void set_has_landmark_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cartographer::mapping::proto::PoseGraph* pose_graph_;
      ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options_;
      ::cartographer::mapping::proto::Submap* submap_;
      ::cartographer::mapping::proto::Node* node_;
      ::cartographer::mapping::proto::TrajectoryData* trajectory_data_;
      ::cartographer::mapping::proto::ImuData* imu_data_;
      ::cartographer::mapping::proto::OdometryData* odometry_data_;
      ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
      ::cartographer::mapping::proto::LandmarkData* landmark_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Submap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool Submap::_internal_has_submap_id() const {
  return this != internal_default_instance() && _impl_.submap_id_ != nullptr;
}
inline bool Submap::has_submap_id() const {
  return _internal_has_submap_id();
}
inline const ::cartographer::mapping::proto::SubmapId& Submap::_internal_submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = _impl_.submap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::SubmapId&>(
      ::cartographer::mapping::proto::_SubmapId_default_instance_);
}
inline const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return _internal_submap_id();
}
inline void Submap::unsafe_arena_set_allocated_submap_id(
    ::cartographer::mapping::proto::SubmapId* submap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_id_);
  }
  _impl_.submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}
inline ::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  
  ::cartographer::mapping::proto::SubmapId* temp = _impl_.submap_id_;
  _impl_.submap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::SubmapId* Submap::unsafe_arena_release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = _impl_.submap_id_;
  _impl_.submap_id_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapId* Submap::_internal_mutable_submap_id() {
  
  if (_impl_.submap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapId>(GetArenaForAllocation());
    _impl_.submap_id_ = p;
  }
  return _impl_.submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  ::cartographer::mapping::proto::SubmapId* _msg = _internal_mutable_submap_id();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return _msg;
}
inline void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_id_);
  }
  if (submap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_id));
    if (message_arena != submessage_arena) {
      submap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submap_id_ = submap_id;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// .cartographer.mapping.proto.Submap2D submap_2d = 2;
inline bool Submap::_internal_has_submap_2d() const {
  return this != internal_default_instance() && _impl_.submap_2d_ != nullptr;
}
inline bool Submap::has_submap_2d() const {
  return _internal_has_submap_2d();
}
inline const ::cartographer::mapping::proto::Submap2D& Submap::_internal_submap_2d() const {
  const ::cartographer::mapping::proto::Submap2D* p = _impl_.submap_2d_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::Submap2D&>(
      ::cartographer::mapping::proto::_Submap2D_default_instance_);
}
inline const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return _internal_submap_2d();
}
inline void Submap::unsafe_arena_set_allocated_submap_2d(
    ::cartographer::mapping::proto::Submap2D* submap_2d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_2d_);
  }
  _impl_.submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}
inline ::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  
  ::cartographer::mapping::proto::Submap2D* temp = _impl_.submap_2d_;
  _impl_.submap_2d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::Submap2D* Submap::unsafe_arena_release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  
  ::cartographer::mapping::proto::Submap2D* temp = _impl_.submap_2d_;
  _impl_.submap_2d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::Submap2D* Submap::_internal_mutable_submap_2d() {
  
  if (_impl_.submap_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::Submap2D>(GetArenaForAllocation());
    _impl_.submap_2d_ = p;
  }
  return _impl_.submap_2d_;
}
inline ::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  ::cartographer::mapping::proto::Submap2D* _msg = _internal_mutable_submap_2d();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return _msg;
}
inline void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_2d_);
  }
  if (submap_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_2d));
    if (message_arena != submessage_arena) {
      submap_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap_2d, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submap_2d_ = submap_2d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// .cartographer.mapping.proto.Submap3D submap_3d = 3;
inline bool Submap::_internal_has_submap_3d() const {
  return this != internal_default_instance() && _impl_.submap_3d_ != nullptr;
}
inline bool Submap::has_submap_3d() const {
  return _internal_has_submap_3d();
}
inline const ::cartographer::mapping::proto::Submap3D& Submap::_internal_submap_3d() const {
  const ::cartographer::mapping::proto::Submap3D* p = _impl_.submap_3d_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::Submap3D&>(
      ::cartographer::mapping::proto::_Submap3D_default_instance_);
}
inline const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return _internal_submap_3d();
}
inline void Submap::unsafe_arena_set_allocated_submap_3d(
    ::cartographer::mapping::proto::Submap3D* submap_3d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_3d_);
  }
  _impl_.submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}
inline ::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  
  ::cartographer::mapping::proto::Submap3D* temp = _impl_.submap_3d_;
  _impl_.submap_3d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::Submap3D* Submap::unsafe_arena_release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  
  ::cartographer::mapping::proto::Submap3D* temp = _impl_.submap_3d_;
  _impl_.submap_3d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::Submap3D* Submap::_internal_mutable_submap_3d() {
  
  if (_impl_.submap_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::Submap3D>(GetArenaForAllocation());
    _impl_.submap_3d_ = p;
  }
  return _impl_.submap_3d_;
}
inline ::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  ::cartographer::mapping::proto::Submap3D* _msg = _internal_mutable_submap_3d();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return _msg;
}
inline void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submap_3d_);
  }
  if (submap_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_3d));
    if (message_arena != submessage_arena) {
      submap_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap_3d, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submap_3d_ = submap_3d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

// -------------------------------------------------------------------

// Node

// .cartographer.mapping.proto.NodeId node_id = 1;
inline bool Node::_internal_has_node_id() const {
  return this != internal_default_instance() && _impl_.node_id_ != nullptr;
}
inline bool Node::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::cartographer::mapping::proto::NodeId& Node::_internal_node_id() const {
  const ::cartographer::mapping::proto::NodeId* p = _impl_.node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::NodeId&>(
      ::cartographer::mapping::proto::_NodeId_default_instance_);
}
inline const ::cartographer::mapping::proto::NodeId& Node::node_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return _internal_node_id();
}
inline void Node::unsafe_arena_set_allocated_node_id(
    ::cartographer::mapping::proto::NodeId* node_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_id_);
  }
  _impl_.node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Node.node_id)
}
inline ::cartographer::mapping::proto::NodeId* Node::release_node_id() {
  
  ::cartographer::mapping::proto::NodeId* temp = _impl_.node_id_;
  _impl_.node_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::NodeId* Node::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = _impl_.node_id_;
  _impl_.node_id_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::NodeId* Node::_internal_mutable_node_id() {
  
  if (_impl_.node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::NodeId>(GetArenaForAllocation());
    _impl_.node_id_ = p;
  }
  return _impl_.node_id_;
}
inline ::cartographer::mapping::proto::NodeId* Node::mutable_node_id() {
  ::cartographer::mapping::proto::NodeId* _msg = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return _msg;
}
inline void Node::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id));
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
inline bool Node::_internal_has_node_data() const {
  return this != internal_default_instance() && _impl_.node_data_ != nullptr;
}
inline bool Node::has_node_data() const {
  return _internal_has_node_data();
}
inline const ::cartographer::mapping::proto::TrajectoryNodeData& Node::_internal_node_data() const {
  const ::cartographer::mapping::proto::TrajectoryNodeData* p = _impl_.node_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryNodeData&>(
      ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_);
}
inline const ::cartographer::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return _internal_node_data();
}
inline void Node::unsafe_arena_set_allocated_node_data(
    ::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_data_);
  }
  _impl_.node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.Node.node_data)
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = _impl_.node_data_;
  _impl_.node_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::unsafe_arena_release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = _impl_.node_data_;
  _impl_.node_data_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::_internal_mutable_node_data() {
  
  if (_impl_.node_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryNodeData>(GetArenaForAllocation());
    _impl_.node_data_ = p;
  }
  return _impl_.node_data_;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  ::cartographer::mapping::proto::TrajectoryNodeData* _msg = _internal_mutable_node_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return _msg;
}
inline void Node::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_data_);
  }
  if (node_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_data));
    if (message_arena != submessage_arena) {
      node_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_data_ = node_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

// -------------------------------------------------------------------

// ImuData

// int32 trajectory_id = 1;
inline void ImuData::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t ImuData::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t ImuData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.trajectory_id)
  return _internal_trajectory_id();
}
inline void ImuData::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void ImuData::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuData.trajectory_id)
}

// .cartographer.sensor.proto.ImuData imu_data = 2;
inline bool ImuData::_internal_has_imu_data() const {
  return this != internal_default_instance() && _impl_.imu_data_ != nullptr;
}
inline bool ImuData::has_imu_data() const {
  return _internal_has_imu_data();
}
inline const ::cartographer::sensor::proto::ImuData& ImuData::_internal_imu_data() const {
  const ::cartographer::sensor::proto::ImuData* p = _impl_.imu_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::ImuData&>(
      ::cartographer::sensor::proto::_ImuData_default_instance_);
}
inline const ::cartographer::sensor::proto::ImuData& ImuData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.imu_data)
  return _internal_imu_data();
}
inline void ImuData::unsafe_arena_set_allocated_imu_data(
    ::cartographer::sensor::proto::ImuData* imu_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_data_);
  }
  _impl_.imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}
inline ::cartographer::sensor::proto::ImuData* ImuData::release_imu_data() {
  
  ::cartographer::sensor::proto::ImuData* temp = _impl_.imu_data_;
  _impl_.imu_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::ImuData* ImuData::unsafe_arena_release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuData.imu_data)
  
  ::cartographer::sensor::proto::ImuData* temp = _impl_.imu_data_;
  _impl_.imu_data_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::ImuData* ImuData::_internal_mutable_imu_data() {
  
  if (_impl_.imu_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::ImuData>(GetArenaForAllocation());
    _impl_.imu_data_ = p;
  }
  return _impl_.imu_data_;
}
inline ::cartographer::sensor::proto::ImuData* ImuData::mutable_imu_data() {
  ::cartographer::sensor::proto::ImuData* _msg = _internal_mutable_imu_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuData.imu_data)
  return _msg;
}
inline void ImuData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_data_);
  }
  if (imu_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_data));
    if (message_arena != submessage_arena) {
      imu_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.imu_data_ = imu_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}

// -------------------------------------------------------------------

// OdometryData

// int32 trajectory_id = 1;
inline void OdometryData::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t OdometryData::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t OdometryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.trajectory_id)
  return _internal_trajectory_id();
}
inline void OdometryData::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void OdometryData::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.OdometryData.trajectory_id)
}

// .cartographer.sensor.proto.OdometryData odometry_data = 2;
inline bool OdometryData::_internal_has_odometry_data() const {
  return this != internal_default_instance() && _impl_.odometry_data_ != nullptr;
}
inline bool OdometryData::has_odometry_data() const {
  return _internal_has_odometry_data();
}
inline const ::cartographer::sensor::proto::OdometryData& OdometryData::_internal_odometry_data() const {
  const ::cartographer::sensor::proto::OdometryData* p = _impl_.odometry_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::OdometryData&>(
      ::cartographer::sensor::proto::_OdometryData_default_instance_);
}
inline const ::cartographer::sensor::proto::OdometryData& OdometryData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.odometry_data)
  return _internal_odometry_data();
}
inline void OdometryData::unsafe_arena_set_allocated_odometry_data(
    ::cartographer::sensor::proto::OdometryData* odometry_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odometry_data_);
  }
  _impl_.odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::release_odometry_data() {
  
  ::cartographer::sensor::proto::OdometryData* temp = _impl_.odometry_data_;
  _impl_.odometry_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::unsafe_arena_release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.OdometryData.odometry_data)
  
  ::cartographer::sensor::proto::OdometryData* temp = _impl_.odometry_data_;
  _impl_.odometry_data_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::_internal_mutable_odometry_data() {
  
  if (_impl_.odometry_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::OdometryData>(GetArenaForAllocation());
    _impl_.odometry_data_ = p;
  }
  return _impl_.odometry_data_;
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::mutable_odometry_data() {
  ::cartographer::sensor::proto::OdometryData* _msg = _internal_mutable_odometry_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.OdometryData.odometry_data)
  return _msg;
}
inline void OdometryData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odometry_data_);
  }
  if (odometry_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_data));
    if (message_arena != submessage_arena) {
      odometry_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.odometry_data_ = odometry_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}

// -------------------------------------------------------------------

// FixedFramePoseData

// int32 trajectory_id = 1;
inline void FixedFramePoseData::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t FixedFramePoseData::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t FixedFramePoseData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
  return _internal_trajectory_id();
}
inline void FixedFramePoseData::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void FixedFramePoseData::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
}

// .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
inline bool FixedFramePoseData::_internal_has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && _impl_.fixed_frame_pose_data_ != nullptr;
}
inline bool FixedFramePoseData::has_fixed_frame_pose_data() const {
  return _internal_has_fixed_frame_pose_data();
}
inline const ::cartographer::sensor::proto::FixedFramePoseData& FixedFramePoseData::_internal_fixed_frame_pose_data() const {
  const ::cartographer::sensor::proto::FixedFramePoseData* p = _impl_.fixed_frame_pose_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::FixedFramePoseData&>(
      ::cartographer::sensor::proto::_FixedFramePoseData_default_instance_);
}
inline const ::cartographer::sensor::proto::FixedFramePoseData& FixedFramePoseData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return _internal_fixed_frame_pose_data();
}
inline void FixedFramePoseData::unsafe_arena_set_allocated_fixed_frame_pose_data(
    ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_frame_pose_data_);
  }
  _impl_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::release_fixed_frame_pose_data() {
  
  ::cartographer::sensor::proto::FixedFramePoseData* temp = _impl_.fixed_frame_pose_data_;
  _impl_.fixed_frame_pose_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::unsafe_arena_release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  
  ::cartographer::sensor::proto::FixedFramePoseData* temp = _impl_.fixed_frame_pose_data_;
  _impl_.fixed_frame_pose_data_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::_internal_mutable_fixed_frame_pose_data() {
  
  if (_impl_.fixed_frame_pose_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::FixedFramePoseData>(GetArenaForAllocation());
    _impl_.fixed_frame_pose_data_ = p;
  }
  return _impl_.fixed_frame_pose_data_;
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::mutable_fixed_frame_pose_data() {
  ::cartographer::sensor::proto::FixedFramePoseData* _msg = _internal_mutable_fixed_frame_pose_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return _msg;
}
inline void FixedFramePoseData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_frame_pose_data_);
  }
  if (fixed_frame_pose_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_frame_pose_data));
    if (message_arena != submessage_arena) {
      fixed_frame_pose_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_frame_pose_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}

// -------------------------------------------------------------------

// LandmarkData

// int32 trajectory_id = 1;
inline void LandmarkData::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t LandmarkData::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t LandmarkData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.trajectory_id)
  return _internal_trajectory_id();
}
inline void LandmarkData::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void LandmarkData::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LandmarkData.trajectory_id)
}

// .cartographer.sensor.proto.LandmarkData landmark_data = 2;
inline bool LandmarkData::_internal_has_landmark_data() const {
  return this != internal_default_instance() && _impl_.landmark_data_ != nullptr;
}
inline bool LandmarkData::has_landmark_data() const {
  return _internal_has_landmark_data();
}
inline const ::cartographer::sensor::proto::LandmarkData& LandmarkData::_internal_landmark_data() const {
  const ::cartographer::sensor::proto::LandmarkData* p = _impl_.landmark_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::LandmarkData&>(
      ::cartographer::sensor::proto::_LandmarkData_default_instance_);
}
inline const ::cartographer::sensor::proto::LandmarkData& LandmarkData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.landmark_data)
  return _internal_landmark_data();
}
inline void LandmarkData::unsafe_arena_set_allocated_landmark_data(
    ::cartographer::sensor::proto::LandmarkData* landmark_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.landmark_data_);
  }
  _impl_.landmark_data_ = landmark_data;
  if (landmark_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LandmarkData.landmark_data)
}
inline ::cartographer::sensor::proto::LandmarkData* LandmarkData::release_landmark_data() {
  
  ::cartographer::sensor::proto::LandmarkData* temp = _impl_.landmark_data_;
  _impl_.landmark_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::LandmarkData* LandmarkData::unsafe_arena_release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LandmarkData.landmark_data)
  
  ::cartographer::sensor::proto::LandmarkData* temp = _impl_.landmark_data_;
  _impl_.landmark_data_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::LandmarkData* LandmarkData::_internal_mutable_landmark_data() {
  
  if (_impl_.landmark_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::LandmarkData>(GetArenaForAllocation());
    _impl_.landmark_data_ = p;
  }
  return _impl_.landmark_data_;
}
inline ::cartographer::sensor::proto::LandmarkData* LandmarkData::mutable_landmark_data() {
  ::cartographer::sensor::proto::LandmarkData* _msg = _internal_mutable_landmark_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LandmarkData.landmark_data)
  return _msg;
}
inline void LandmarkData::set_allocated_landmark_data(::cartographer::sensor::proto::LandmarkData* landmark_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.landmark_data_);
  }
  if (landmark_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmark_data));
    if (message_arena != submessage_arena) {
      landmark_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.landmark_data_ = landmark_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LandmarkData.landmark_data)
}

// -------------------------------------------------------------------

// TrajectoryData

// int32 trajectory_id = 1;
inline void TrajectoryData::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t TrajectoryData::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t TrajectoryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.trajectory_id)
  return _internal_trajectory_id();
}
inline void TrajectoryData::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void TrajectoryData::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.trajectory_id)
}

// double gravity_constant = 2;
inline void TrajectoryData::clear_gravity_constant() {
  _impl_.gravity_constant_ = 0;
}
inline double TrajectoryData::_internal_gravity_constant() const {
  return _impl_.gravity_constant_;
}
inline double TrajectoryData::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.gravity_constant)
  return _internal_gravity_constant();
}
inline void TrajectoryData::_internal_set_gravity_constant(double value) {
  
  _impl_.gravity_constant_ = value;
}
inline void TrajectoryData::set_gravity_constant(double value) {
  _internal_set_gravity_constant(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.gravity_constant)
}

// .cartographer.transform.proto.Quaterniond imu_calibration = 3;
inline bool TrajectoryData::_internal_has_imu_calibration() const {
  return this != internal_default_instance() && _impl_.imu_calibration_ != nullptr;
}
inline bool TrajectoryData::has_imu_calibration() const {
  return _internal_has_imu_calibration();
}
inline const ::cartographer::transform::proto::Quaterniond& TrajectoryData::_internal_imu_calibration() const {
  const ::cartographer::transform::proto::Quaterniond* p = _impl_.imu_calibration_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Quaterniond&>(
      ::cartographer::transform::proto::_Quaterniond_default_instance_);
}
inline const ::cartographer::transform::proto::Quaterniond& TrajectoryData::imu_calibration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return _internal_imu_calibration();
}
inline void TrajectoryData::unsafe_arena_set_allocated_imu_calibration(
    ::cartographer::transform::proto::Quaterniond* imu_calibration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_calibration_);
  }
  _impl_.imu_calibration_ = imu_calibration;
  if (imu_calibration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.TrajectoryData.imu_calibration)
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryData::release_imu_calibration() {
  
  ::cartographer::transform::proto::Quaterniond* temp = _impl_.imu_calibration_;
  _impl_.imu_calibration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryData::unsafe_arena_release_imu_calibration() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  
  ::cartographer::transform::proto::Quaterniond* temp = _impl_.imu_calibration_;
  _impl_.imu_calibration_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryData::_internal_mutable_imu_calibration() {
  
  if (_impl_.imu_calibration_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Quaterniond>(GetArenaForAllocation());
    _impl_.imu_calibration_ = p;
  }
  return _impl_.imu_calibration_;
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryData::mutable_imu_calibration() {
  ::cartographer::transform::proto::Quaterniond* _msg = _internal_mutable_imu_calibration();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return _msg;
}
inline void TrajectoryData::set_allocated_imu_calibration(::cartographer::transform::proto::Quaterniond* imu_calibration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_calibration_);
  }
  if (imu_calibration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_calibration));
    if (message_arena != submessage_arena) {
      imu_calibration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_calibration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.imu_calibration_ = imu_calibration;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.imu_calibration)
}

// .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
inline bool TrajectoryData::_internal_has_fixed_frame_origin_in_map() const {
  return this != internal_default_instance() && _impl_.fixed_frame_origin_in_map_ != nullptr;
}
inline bool TrajectoryData::has_fixed_frame_origin_in_map() const {
  return _internal_has_fixed_frame_origin_in_map();
}
inline const ::cartographer::transform::proto::Rigid3d& TrajectoryData::_internal_fixed_frame_origin_in_map() const {
  const ::cartographer::transform::proto::Rigid3d* p = _impl_.fixed_frame_origin_in_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Rigid3d&>(
      ::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& TrajectoryData::fixed_frame_origin_in_map() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return _internal_fixed_frame_origin_in_map();
}
inline void TrajectoryData::unsafe_arena_set_allocated_fixed_frame_origin_in_map(
    ::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_frame_origin_in_map_);
  }
  _impl_.fixed_frame_origin_in_map_ = fixed_frame_origin_in_map;
  if (fixed_frame_origin_in_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryData::release_fixed_frame_origin_in_map() {
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.fixed_frame_origin_in_map_;
  _impl_.fixed_frame_origin_in_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryData::unsafe_arena_release_fixed_frame_origin_in_map() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  
  ::cartographer::transform::proto::Rigid3d* temp = _impl_.fixed_frame_origin_in_map_;
  _impl_.fixed_frame_origin_in_map_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryData::_internal_mutable_fixed_frame_origin_in_map() {
  
  if (_impl_.fixed_frame_origin_in_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaForAllocation());
    _impl_.fixed_frame_origin_in_map_ = p;
  }
  return _impl_.fixed_frame_origin_in_map_;
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryData::mutable_fixed_frame_origin_in_map() {
  ::cartographer::transform::proto::Rigid3d* _msg = _internal_mutable_fixed_frame_origin_in_map();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return _msg;
}
inline void TrajectoryData::set_allocated_fixed_frame_origin_in_map(::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_frame_origin_in_map_);
  }
  if (fixed_frame_origin_in_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_frame_origin_in_map));
    if (message_arena != submessage_arena) {
      fixed_frame_origin_in_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_frame_origin_in_map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fixed_frame_origin_in_map_ = fixed_frame_origin_in_map;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
}

// -------------------------------------------------------------------

// LocalSlamResultData

// int64 timestamp = 1;
inline void LocalSlamResultData::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t LocalSlamResultData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t LocalSlamResultData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.timestamp)
  return _internal_timestamp();
}
inline void LocalSlamResultData::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void LocalSlamResultData::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalSlamResultData.timestamp)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
inline bool LocalSlamResultData::_internal_has_node_data() const {
  return this != internal_default_instance() && _impl_.node_data_ != nullptr;
}
inline bool LocalSlamResultData::has_node_data() const {
  return _internal_has_node_data();
}
inline const ::cartographer::mapping::proto::TrajectoryNodeData& LocalSlamResultData::_internal_node_data() const {
  const ::cartographer::mapping::proto::TrajectoryNodeData* p = _impl_.node_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryNodeData&>(
      ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_);
}
inline const ::cartographer::mapping::proto::TrajectoryNodeData& LocalSlamResultData::node_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return _internal_node_data();
}
inline void LocalSlamResultData::unsafe_arena_set_allocated_node_data(
    ::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_data_);
  }
  _impl_.node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalSlamResultData.node_data)
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::release_node_data() {
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = _impl_.node_data_;
  _impl_.node_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::unsafe_arena_release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalSlamResultData.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = _impl_.node_data_;
  _impl_.node_data_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::_internal_mutable_node_data() {
  
  if (_impl_.node_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryNodeData>(GetArenaForAllocation());
    _impl_.node_data_ = p;
  }
  return _impl_.node_data_;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::mutable_node_data() {
  ::cartographer::mapping::proto::TrajectoryNodeData* _msg = _internal_mutable_node_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return _msg;
}
inline void LocalSlamResultData::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_data_);
  }
  if (node_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_data));
    if (message_arena != submessage_arena) {
      node_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_data_ = node_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalSlamResultData.node_data)
}

// repeated .cartographer.mapping.proto.Submap submaps = 3;
inline int LocalSlamResultData::_internal_submaps_size() const {
  return _impl_.submaps_.size();
}
inline int LocalSlamResultData::submaps_size() const {
  return _internal_submaps_size();
}
inline void LocalSlamResultData::clear_submaps() {
  _impl_.submaps_.Clear();
}
inline ::cartographer::mapping::proto::Submap* LocalSlamResultData::mutable_submaps(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return _impl_.submaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Submap >*
LocalSlamResultData::mutable_submaps() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return &_impl_.submaps_;
}
inline const ::cartographer::mapping::proto::Submap& LocalSlamResultData::_internal_submaps(int index) const {
  return _impl_.submaps_.Get(index);
}
inline const ::cartographer::mapping::proto::Submap& LocalSlamResultData::submaps(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return _internal_submaps(index);
}
inline ::cartographer::mapping::proto::Submap* LocalSlamResultData::_internal_add_submaps() {
  return _impl_.submaps_.Add();
}
inline ::cartographer::mapping::proto::Submap* LocalSlamResultData::add_submaps() {
  ::cartographer::mapping::proto::Submap* _add = _internal_add_submaps();
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Submap >&
LocalSlamResultData::submaps() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return _impl_.submaps_;
}

// -------------------------------------------------------------------

// SerializationHeader

// uint32 format_version = 1;
inline void SerializationHeader::clear_format_version() {
  _impl_.format_version_ = 0u;
}
inline uint32_t SerializationHeader::_internal_format_version() const {
  return _impl_.format_version_;
}
inline uint32_t SerializationHeader::format_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializationHeader.format_version)
  return _internal_format_version();
}
inline void SerializationHeader::_internal_set_format_version(uint32_t value) {
  
  _impl_.format_version_ = value;
}
inline void SerializationHeader::set_format_version(uint32_t value) {
  _internal_set_format_version(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SerializationHeader.format_version)
}

// -------------------------------------------------------------------

// SerializedData

// .cartographer.mapping.proto.PoseGraph pose_graph = 1;
inline bool SerializedData::_internal_has_pose_graph() const {
  return data_case() == kPoseGraph;
}
inline bool SerializedData::has_pose_graph() const {
  return _internal_has_pose_graph();
}
inline void SerializedData::set_has_pose_graph() {
  _impl_._oneof_case_[0] = kPoseGraph;
}
inline ::cartographer::mapping::proto::PoseGraph* SerializedData::release_pose_graph() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.pose_graph)
  if (_internal_has_pose_graph()) {
    clear_has_data();
    ::cartographer::mapping::proto::PoseGraph* temp = _impl_.data_.pose_graph_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.pose_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::PoseGraph& SerializedData::_internal_pose_graph() const {
  return _internal_has_pose_graph()
      ? *_impl_.data_.pose_graph_
      : reinterpret_cast< ::cartographer::mapping::proto::PoseGraph&>(::cartographer::mapping::proto::_PoseGraph_default_instance_);
}
inline const ::cartographer::mapping::proto::PoseGraph& SerializedData::pose_graph() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.pose_graph)
  return _internal_pose_graph();
}
inline ::cartographer::mapping::proto::PoseGraph* SerializedData::unsafe_arena_release_pose_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.pose_graph)
  if (_internal_has_pose_graph()) {
    clear_has_data();
    ::cartographer::mapping::proto::PoseGraph* temp = _impl_.data_.pose_graph_;
    _impl_.data_.pose_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_pose_graph(::cartographer::mapping::proto::PoseGraph* pose_graph) {
  clear_data();
  if (pose_graph) {
    set_has_pose_graph();
    _impl_.data_.pose_graph_ = pose_graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.pose_graph)
}
inline ::cartographer::mapping::proto::PoseGraph* SerializedData::_internal_mutable_pose_graph() {
  if (!_internal_has_pose_graph()) {
    clear_data();
    set_has_pose_graph();
    _impl_.data_.pose_graph_ = CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph >(GetArenaForAllocation());
  }
  return _impl_.data_.pose_graph_;
}
inline ::cartographer::mapping::proto::PoseGraph* SerializedData::mutable_pose_graph() {
  ::cartographer::mapping::proto::PoseGraph* _msg = _internal_mutable_pose_graph();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.pose_graph)
  return _msg;
}

// .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
inline bool SerializedData::_internal_has_all_trajectory_builder_options() const {
  return data_case() == kAllTrajectoryBuilderOptions;
}
inline bool SerializedData::has_all_trajectory_builder_options() const {
  return _internal_has_all_trajectory_builder_options();
}
inline void SerializedData::set_has_all_trajectory_builder_options() {
  _impl_._oneof_case_[0] = kAllTrajectoryBuilderOptions;
}
inline ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::release_all_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  if (_internal_has_all_trajectory_builder_options()) {
    clear_has_data();
    ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* temp = _impl_.data_.all_trajectory_builder_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.all_trajectory_builder_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& SerializedData::_internal_all_trajectory_builder_options() const {
  return _internal_has_all_trajectory_builder_options()
      ? *_impl_.data_.all_trajectory_builder_options_
      : reinterpret_cast< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions&>(::cartographer::mapping::proto::_AllTrajectoryBuilderOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& SerializedData::all_trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return _internal_all_trajectory_builder_options();
}
inline ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::unsafe_arena_release_all_trajectory_builder_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  if (_internal_has_all_trajectory_builder_options()) {
    clear_has_data();
    ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* temp = _impl_.data_.all_trajectory_builder_options_;
    _impl_.data_.all_trajectory_builder_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_all_trajectory_builder_options(::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options) {
  clear_data();
  if (all_trajectory_builder_options) {
    set_has_all_trajectory_builder_options();
    _impl_.data_.all_trajectory_builder_options_ = all_trajectory_builder_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
}
inline ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::_internal_mutable_all_trajectory_builder_options() {
  if (!_internal_has_all_trajectory_builder_options()) {
    clear_data();
    set_has_all_trajectory_builder_options();
    _impl_.data_.all_trajectory_builder_options_ = CreateMaybeMessage< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions >(GetArenaForAllocation());
  }
  return _impl_.data_.all_trajectory_builder_options_;
}
inline ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::mutable_all_trajectory_builder_options() {
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* _msg = _internal_mutable_all_trajectory_builder_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return _msg;
}

// .cartographer.mapping.proto.Submap submap = 3;
inline bool SerializedData::_internal_has_submap() const {
  return data_case() == kSubmap;
}
inline bool SerializedData::has_submap() const {
  return _internal_has_submap();
}
inline void SerializedData::set_has_submap() {
  _impl_._oneof_case_[0] = kSubmap;
}
inline void SerializedData::clear_submap() {
  if (_internal_has_submap()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.submap_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  if (_internal_has_submap()) {
    clear_has_data();
    ::cartographer::mapping::proto::Submap* temp = _impl_.data_.submap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.submap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::Submap& SerializedData::_internal_submap() const {
  return _internal_has_submap()
      ? *_impl_.data_.submap_
      : reinterpret_cast< ::cartographer::mapping::proto::Submap&>(::cartographer::mapping::proto::_Submap_default_instance_);
}
inline const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return _internal_submap();
}
inline ::cartographer::mapping::proto::Submap* SerializedData::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.submap)
  if (_internal_has_submap()) {
    clear_has_data();
    ::cartographer::mapping::proto::Submap* temp = _impl_.data_.submap_;
    _impl_.data_.submap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  clear_data();
  if (submap) {
    set_has_submap();
    _impl_.data_.submap_ = submap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}
inline ::cartographer::mapping::proto::Submap* SerializedData::_internal_mutable_submap() {
  if (!_internal_has_submap()) {
    clear_data();
    set_has_submap();
    _impl_.data_.submap_ = CreateMaybeMessage< ::cartographer::mapping::proto::Submap >(GetArenaForAllocation());
  }
  return _impl_.data_.submap_;
}
inline ::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  ::cartographer::mapping::proto::Submap* _msg = _internal_mutable_submap();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return _msg;
}

// .cartographer.mapping.proto.Node node = 4;
inline bool SerializedData::_internal_has_node() const {
  return data_case() == kNode;
}
inline bool SerializedData::has_node() const {
  return _internal_has_node();
}
inline void SerializedData::set_has_node() {
  _impl_._oneof_case_[0] = kNode;
}
inline void SerializedData::clear_node() {
  if (_internal_has_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.node_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  if (_internal_has_node()) {
    clear_has_data();
    ::cartographer::mapping::proto::Node* temp = _impl_.data_.node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::Node& SerializedData::_internal_node() const {
  return _internal_has_node()
      ? *_impl_.data_.node_
      : reinterpret_cast< ::cartographer::mapping::proto::Node&>(::cartographer::mapping::proto::_Node_default_instance_);
}
inline const ::cartographer::mapping::proto::Node& SerializedData::node() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return _internal_node();
}
inline ::cartographer::mapping::proto::Node* SerializedData::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.node)
  if (_internal_has_node()) {
    clear_has_data();
    ::cartographer::mapping::proto::Node* temp = _impl_.data_.node_;
    _impl_.data_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_node(::cartographer::mapping::proto::Node* node) {
  clear_data();
  if (node) {
    set_has_node();
    _impl_.data_.node_ = node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.node)
}
inline ::cartographer::mapping::proto::Node* SerializedData::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_data();
    set_has_node();
    _impl_.data_.node_ = CreateMaybeMessage< ::cartographer::mapping::proto::Node >(GetArenaForAllocation());
  }
  return _impl_.data_.node_;
}
inline ::cartographer::mapping::proto::Node* SerializedData::mutable_node() {
  ::cartographer::mapping::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return _msg;
}

// .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
inline bool SerializedData::_internal_has_trajectory_data() const {
  return data_case() == kTrajectoryData;
}
inline bool SerializedData::has_trajectory_data() const {
  return _internal_has_trajectory_data();
}
inline void SerializedData::set_has_trajectory_data() {
  _impl_._oneof_case_[0] = kTrajectoryData;
}
inline void SerializedData::clear_trajectory_data() {
  if (_internal_has_trajectory_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.trajectory_data_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::TrajectoryData* SerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.trajectory_data)
  if (_internal_has_trajectory_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::TrajectoryData* temp = _impl_.data_.trajectory_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.trajectory_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::TrajectoryData& SerializedData::_internal_trajectory_data() const {
  return _internal_has_trajectory_data()
      ? *_impl_.data_.trajectory_data_
      : reinterpret_cast< ::cartographer::mapping::proto::TrajectoryData&>(::cartographer::mapping::proto::_TrajectoryData_default_instance_);
}
inline const ::cartographer::mapping::proto::TrajectoryData& SerializedData::trajectory_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.trajectory_data)
  return _internal_trajectory_data();
}
inline ::cartographer::mapping::proto::TrajectoryData* SerializedData::unsafe_arena_release_trajectory_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.trajectory_data)
  if (_internal_has_trajectory_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::TrajectoryData* temp = _impl_.data_.trajectory_data_;
    _impl_.data_.trajectory_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  clear_data();
  if (trajectory_data) {
    set_has_trajectory_data();
    _impl_.data_.trajectory_data_ = trajectory_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.trajectory_data)
}
inline ::cartographer::mapping::proto::TrajectoryData* SerializedData::_internal_mutable_trajectory_data() {
  if (!_internal_has_trajectory_data()) {
    clear_data();
    set_has_trajectory_data();
    _impl_.data_.trajectory_data_ = CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryData >(GetArenaForAllocation());
  }
  return _impl_.data_.trajectory_data_;
}
inline ::cartographer::mapping::proto::TrajectoryData* SerializedData::mutable_trajectory_data() {
  ::cartographer::mapping::proto::TrajectoryData* _msg = _internal_mutable_trajectory_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.trajectory_data)
  return _msg;
}

// .cartographer.mapping.proto.ImuData imu_data = 6;
inline bool SerializedData::_internal_has_imu_data() const {
  return data_case() == kImuData;
}
inline bool SerializedData::has_imu_data() const {
  return _internal_has_imu_data();
}
inline void SerializedData::set_has_imu_data() {
  _impl_._oneof_case_[0] = kImuData;
}
inline void SerializedData::clear_imu_data() {
  if (_internal_has_imu_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.imu_data_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.imu_data)
  if (_internal_has_imu_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::ImuData* temp = _impl_.data_.imu_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.imu_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::ImuData& SerializedData::_internal_imu_data() const {
  return _internal_has_imu_data()
      ? *_impl_.data_.imu_data_
      : reinterpret_cast< ::cartographer::mapping::proto::ImuData&>(::cartographer::mapping::proto::_ImuData_default_instance_);
}
inline const ::cartographer::mapping::proto::ImuData& SerializedData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.imu_data)
  return _internal_imu_data();
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::unsafe_arena_release_imu_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.imu_data)
  if (_internal_has_imu_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::ImuData* temp = _impl_.data_.imu_data_;
    _impl_.data_.imu_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  clear_data();
  if (imu_data) {
    set_has_imu_data();
    _impl_.data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::_internal_mutable_imu_data() {
  if (!_internal_has_imu_data()) {
    clear_data();
    set_has_imu_data();
    _impl_.data_.imu_data_ = CreateMaybeMessage< ::cartographer::mapping::proto::ImuData >(GetArenaForAllocation());
  }
  return _impl_.data_.imu_data_;
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::mutable_imu_data() {
  ::cartographer::mapping::proto::ImuData* _msg = _internal_mutable_imu_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.imu_data)
  return _msg;
}

// .cartographer.mapping.proto.OdometryData odometry_data = 7;
inline bool SerializedData::_internal_has_odometry_data() const {
  return data_case() == kOdometryData;
}
inline bool SerializedData::has_odometry_data() const {
  return _internal_has_odometry_data();
}
inline void SerializedData::set_has_odometry_data() {
  _impl_._oneof_case_[0] = kOdometryData;
}
inline void SerializedData::clear_odometry_data() {
  if (_internal_has_odometry_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.odometry_data_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.odometry_data)
  if (_internal_has_odometry_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::OdometryData* temp = _impl_.data_.odometry_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.odometry_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::OdometryData& SerializedData::_internal_odometry_data() const {
  return _internal_has_odometry_data()
      ? *_impl_.data_.odometry_data_
      : reinterpret_cast< ::cartographer::mapping::proto::OdometryData&>(::cartographer::mapping::proto::_OdometryData_default_instance_);
}
inline const ::cartographer::mapping::proto::OdometryData& SerializedData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.odometry_data)
  return _internal_odometry_data();
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::unsafe_arena_release_odometry_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.odometry_data)
  if (_internal_has_odometry_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::OdometryData* temp = _impl_.data_.odometry_data_;
    _impl_.data_.odometry_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  clear_data();
  if (odometry_data) {
    set_has_odometry_data();
    _impl_.data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::_internal_mutable_odometry_data() {
  if (!_internal_has_odometry_data()) {
    clear_data();
    set_has_odometry_data();
    _impl_.data_.odometry_data_ = CreateMaybeMessage< ::cartographer::mapping::proto::OdometryData >(GetArenaForAllocation());
  }
  return _impl_.data_.odometry_data_;
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::mutable_odometry_data() {
  ::cartographer::mapping::proto::OdometryData* _msg = _internal_mutable_odometry_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.odometry_data)
  return _msg;
}

// .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
inline bool SerializedData::_internal_has_fixed_frame_pose_data() const {
  return data_case() == kFixedFramePoseData;
}
inline bool SerializedData::has_fixed_frame_pose_data() const {
  return _internal_has_fixed_frame_pose_data();
}
inline void SerializedData::set_has_fixed_frame_pose_data() {
  _impl_._oneof_case_[0] = kFixedFramePoseData;
}
inline void SerializedData::clear_fixed_frame_pose_data() {
  if (_internal_has_fixed_frame_pose_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.fixed_frame_pose_data_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  if (_internal_has_fixed_frame_pose_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::FixedFramePoseData* temp = _impl_.data_.fixed_frame_pose_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.fixed_frame_pose_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& SerializedData::_internal_fixed_frame_pose_data() const {
  return _internal_has_fixed_frame_pose_data()
      ? *_impl_.data_.fixed_frame_pose_data_
      : reinterpret_cast< ::cartographer::mapping::proto::FixedFramePoseData&>(::cartographer::mapping::proto::_FixedFramePoseData_default_instance_);
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& SerializedData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return _internal_fixed_frame_pose_data();
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::unsafe_arena_release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  if (_internal_has_fixed_frame_pose_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::FixedFramePoseData* temp = _impl_.data_.fixed_frame_pose_data_;
    _impl_.data_.fixed_frame_pose_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  clear_data();
  if (fixed_frame_pose_data) {
    set_has_fixed_frame_pose_data();
    _impl_.data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::_internal_mutable_fixed_frame_pose_data() {
  if (!_internal_has_fixed_frame_pose_data()) {
    clear_data();
    set_has_fixed_frame_pose_data();
    _impl_.data_.fixed_frame_pose_data_ = CreateMaybeMessage< ::cartographer::mapping::proto::FixedFramePoseData >(GetArenaForAllocation());
  }
  return _impl_.data_.fixed_frame_pose_data_;
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::mutable_fixed_frame_pose_data() {
  ::cartographer::mapping::proto::FixedFramePoseData* _msg = _internal_mutable_fixed_frame_pose_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return _msg;
}

// .cartographer.mapping.proto.LandmarkData landmark_data = 9;
inline bool SerializedData::_internal_has_landmark_data() const {
  return data_case() == kLandmarkData;
}
inline bool SerializedData::has_landmark_data() const {
  return _internal_has_landmark_data();
}
inline void SerializedData::set_has_landmark_data() {
  _impl_._oneof_case_[0] = kLandmarkData;
}
inline void SerializedData::clear_landmark_data() {
  if (_internal_has_landmark_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.landmark_data_;
    }
    clear_has_data();
  }
}
inline ::cartographer::mapping::proto::LandmarkData* SerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.landmark_data)
  if (_internal_has_landmark_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::LandmarkData* temp = _impl_.data_.landmark_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.landmark_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cartographer::mapping::proto::LandmarkData& SerializedData::_internal_landmark_data() const {
  return _internal_has_landmark_data()
      ? *_impl_.data_.landmark_data_
      : reinterpret_cast< ::cartographer::mapping::proto::LandmarkData&>(::cartographer::mapping::proto::_LandmarkData_default_instance_);
}
inline const ::cartographer::mapping::proto::LandmarkData& SerializedData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.landmark_data)
  return _internal_landmark_data();
}
inline ::cartographer::mapping::proto::LandmarkData* SerializedData::unsafe_arena_release_landmark_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cartographer.mapping.proto.SerializedData.landmark_data)
  if (_internal_has_landmark_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::LandmarkData* temp = _impl_.data_.landmark_data_;
    _impl_.data_.landmark_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedData::unsafe_arena_set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  clear_data();
  if (landmark_data) {
    set_has_landmark_data();
    _impl_.data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.SerializedData.landmark_data)
}
inline ::cartographer::mapping::proto::LandmarkData* SerializedData::_internal_mutable_landmark_data() {
  if (!_internal_has_landmark_data()) {
    clear_data();
    set_has_landmark_data();
    _impl_.data_.landmark_data_ = CreateMaybeMessage< ::cartographer::mapping::proto::LandmarkData >(GetArenaForAllocation());
  }
  return _impl_.data_.landmark_data_;
}
inline ::cartographer::mapping::proto::LandmarkData* SerializedData::mutable_landmark_data() {
  ::cartographer::mapping::proto::LandmarkData* _msg = _internal_mutable_landmark_data();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.landmark_data)
  return _msg;
}

inline bool SerializedData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SerializedData::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline SerializedData::DataCase SerializedData::data_case() const {
  return SerializedData::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fserialization_2eproto
