// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/local_trajectory_builder_options_2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/motion_filter_options.pb.h"
#include "cartographer/mapping/proto/pose_extrapolator_options.pb.h"
#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h"
#include "cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h"
#include "cartographer/mapping/proto/submaps_options_2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class LocalTrajectoryBuilderOptions2D;
struct LocalTrajectoryBuilderOptions2DDefaultTypeInternal;
extern LocalTrajectoryBuilderOptions2DDefaultTypeInternal _LocalTrajectoryBuilderOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class LocalTrajectoryBuilderOptions2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D) */ {
 public:
  inline LocalTrajectoryBuilderOptions2D() : LocalTrajectoryBuilderOptions2D(nullptr) {}
  ~LocalTrajectoryBuilderOptions2D() override;
  explicit PROTOBUF_CONSTEXPR LocalTrajectoryBuilderOptions2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTrajectoryBuilderOptions2D(const LocalTrajectoryBuilderOptions2D& from);
  LocalTrajectoryBuilderOptions2D(LocalTrajectoryBuilderOptions2D&& from) noexcept
    : LocalTrajectoryBuilderOptions2D() {
    *this = ::std::move(from);
  }

  inline LocalTrajectoryBuilderOptions2D& operator=(const LocalTrajectoryBuilderOptions2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrajectoryBuilderOptions2D& operator=(LocalTrajectoryBuilderOptions2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalTrajectoryBuilderOptions2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTrajectoryBuilderOptions2D* internal_default_instance() {
    return reinterpret_cast<const LocalTrajectoryBuilderOptions2D*>(
               &_LocalTrajectoryBuilderOptions2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalTrajectoryBuilderOptions2D& a, LocalTrajectoryBuilderOptions2D& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTrajectoryBuilderOptions2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTrajectoryBuilderOptions2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTrajectoryBuilderOptions2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTrajectoryBuilderOptions2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalTrajectoryBuilderOptions2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalTrajectoryBuilderOptions2D& from) {
    LocalTrajectoryBuilderOptions2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalTrajectoryBuilderOptions2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D";
  }
  protected:
  explicit LocalTrajectoryBuilderOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdaptiveVoxelFilterOptionsFieldNumber = 6,
    kRealTimeCorrelativeScanMatcherOptionsFieldNumber = 7,
    kCeresScanMatcherOptionsFieldNumber = 8,
    kSubmapsOptionsFieldNumber = 11,
    kMotionFilterOptionsFieldNumber = 13,
    kLoopClosureAdaptiveVoxelFilterOptionsFieldNumber = 20,
    kPoseExtrapolatorOptionsFieldNumber = 21,
    kMinZFieldNumber = 1,
    kMaxZFieldNumber = 2,
    kVoxelFilterSizeFieldNumber = 3,
    kUseOnlineCorrelativeScanMatchingFieldNumber = 5,
    kUseImuDataFieldNumber = 12,
    kMinRangeFieldNumber = 14,
    kMaxRangeFieldNumber = 15,
    kImuGravityTimeConstantFieldNumber = 17,
    kMissingDataRayLengthFieldNumber = 16,
    kNumAccumulatedRangeDataFieldNumber = 19,
  };
  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  bool has_adaptive_voxel_filter_options() const;
  private:
  bool _internal_has_adaptive_voxel_filter_options() const;
  public:
  void clear_adaptive_voxel_filter_options();
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& adaptive_voxel_filter_options() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_adaptive_voxel_filter_options();
  void set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options);
  private:
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& _internal_adaptive_voxel_filter_options() const;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* _internal_mutable_adaptive_voxel_filter_options();
  public:
  void unsafe_arena_set_allocated_adaptive_voxel_filter_options(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options);
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* unsafe_arena_release_adaptive_voxel_filter_options();

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  bool has_real_time_correlative_scan_matcher_options() const;
  private:
  bool _internal_has_real_time_correlative_scan_matcher_options() const;
  public:
  void clear_real_time_correlative_scan_matcher_options();
  const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* release_real_time_correlative_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* mutable_real_time_correlative_scan_matcher_options();
  void set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options);
  private:
  const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& _internal_real_time_correlative_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* _internal_mutable_real_time_correlative_scan_matcher_options();
  public:
  void unsafe_arena_set_allocated_real_time_correlative_scan_matcher_options(
      ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options);
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* unsafe_arena_release_real_time_correlative_scan_matcher_options();

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  bool has_ceres_scan_matcher_options() const;
  private:
  bool _internal_has_ceres_scan_matcher_options() const;
  public:
  void clear_ceres_scan_matcher_options();
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* release_ceres_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* mutable_ceres_scan_matcher_options();
  void set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options);
  private:
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& _internal_ceres_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* _internal_mutable_ceres_scan_matcher_options();
  public:
  void unsafe_arena_set_allocated_ceres_scan_matcher_options(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options);
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* unsafe_arena_release_ceres_scan_matcher_options();

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  bool has_submaps_options() const;
  private:
  bool _internal_has_submaps_options() const;
  public:
  void clear_submaps_options();
  const ::cartographer::mapping::proto::SubmapsOptions2D& submaps_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::SubmapsOptions2D* release_submaps_options();
  ::cartographer::mapping::proto::SubmapsOptions2D* mutable_submaps_options();
  void set_allocated_submaps_options(::cartographer::mapping::proto::SubmapsOptions2D* submaps_options);
  private:
  const ::cartographer::mapping::proto::SubmapsOptions2D& _internal_submaps_options() const;
  ::cartographer::mapping::proto::SubmapsOptions2D* _internal_mutable_submaps_options();
  public:
  void unsafe_arena_set_allocated_submaps_options(
      ::cartographer::mapping::proto::SubmapsOptions2D* submaps_options);
  ::cartographer::mapping::proto::SubmapsOptions2D* unsafe_arena_release_submaps_options();

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  bool has_motion_filter_options() const;
  private:
  bool _internal_has_motion_filter_options() const;
  public:
  void clear_motion_filter_options();
  const ::cartographer::mapping::proto::MotionFilterOptions& motion_filter_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::MotionFilterOptions* release_motion_filter_options();
  ::cartographer::mapping::proto::MotionFilterOptions* mutable_motion_filter_options();
  void set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options);
  private:
  const ::cartographer::mapping::proto::MotionFilterOptions& _internal_motion_filter_options() const;
  ::cartographer::mapping::proto::MotionFilterOptions* _internal_mutable_motion_filter_options();
  public:
  void unsafe_arena_set_allocated_motion_filter_options(
      ::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options);
  ::cartographer::mapping::proto::MotionFilterOptions* unsafe_arena_release_motion_filter_options();

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  bool has_loop_closure_adaptive_voxel_filter_options() const;
  private:
  bool _internal_has_loop_closure_adaptive_voxel_filter_options() const;
  public:
  void clear_loop_closure_adaptive_voxel_filter_options();
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& loop_closure_adaptive_voxel_filter_options() const;
  PROTOBUF_NODISCARD ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_loop_closure_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_loop_closure_adaptive_voxel_filter_options();
  void set_allocated_loop_closure_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options);
  private:
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& _internal_loop_closure_adaptive_voxel_filter_options() const;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* _internal_mutable_loop_closure_adaptive_voxel_filter_options();
  public:
  void unsafe_arena_set_allocated_loop_closure_adaptive_voxel_filter_options(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options);
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* unsafe_arena_release_loop_closure_adaptive_voxel_filter_options();

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  bool has_pose_extrapolator_options() const;
  private:
  bool _internal_has_pose_extrapolator_options() const;
  public:
  void clear_pose_extrapolator_options();
  const ::cartographer::mapping::proto::PoseExtrapolatorOptions& pose_extrapolator_options() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::PoseExtrapolatorOptions* release_pose_extrapolator_options();
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* mutable_pose_extrapolator_options();
  void set_allocated_pose_extrapolator_options(::cartographer::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options);
  private:
  const ::cartographer::mapping::proto::PoseExtrapolatorOptions& _internal_pose_extrapolator_options() const;
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* _internal_mutable_pose_extrapolator_options();
  public:
  void unsafe_arena_set_allocated_pose_extrapolator_options(
      ::cartographer::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options);
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* unsafe_arena_release_pose_extrapolator_options();

  // float min_z = 1;
  void clear_min_z();
  float min_z() const;
  void set_min_z(float value);
  private:
  float _internal_min_z() const;
  void _internal_set_min_z(float value);
  public:

  // float max_z = 2;
  void clear_max_z();
  float max_z() const;
  void set_max_z(float value);
  private:
  float _internal_max_z() const;
  void _internal_set_max_z(float value);
  public:

  // float voxel_filter_size = 3;
  void clear_voxel_filter_size();
  float voxel_filter_size() const;
  void set_voxel_filter_size(float value);
  private:
  float _internal_voxel_filter_size() const;
  void _internal_set_voxel_filter_size(float value);
  public:

  // bool use_online_correlative_scan_matching = 5;
  void clear_use_online_correlative_scan_matching();
  bool use_online_correlative_scan_matching() const;
  void set_use_online_correlative_scan_matching(bool value);
  private:
  bool _internal_use_online_correlative_scan_matching() const;
  void _internal_set_use_online_correlative_scan_matching(bool value);
  public:

  // bool use_imu_data = 12;
  void clear_use_imu_data();
  bool use_imu_data() const;
  void set_use_imu_data(bool value);
  private:
  bool _internal_use_imu_data() const;
  void _internal_set_use_imu_data(bool value);
  public:

  // float min_range = 14;
  void clear_min_range();
  float min_range() const;
  void set_min_range(float value);
  private:
  float _internal_min_range() const;
  void _internal_set_min_range(float value);
  public:

  // float max_range = 15;
  void clear_max_range();
  float max_range() const;
  void set_max_range(float value);
  private:
  float _internal_max_range() const;
  void _internal_set_max_range(float value);
  public:

  // double imu_gravity_time_constant = 17;
  void clear_imu_gravity_time_constant();
  double imu_gravity_time_constant() const;
  void set_imu_gravity_time_constant(double value);
  private:
  double _internal_imu_gravity_time_constant() const;
  void _internal_set_imu_gravity_time_constant(double value);
  public:

  // float missing_data_ray_length = 16;
  void clear_missing_data_ray_length();
  float missing_data_ray_length() const;
  void set_missing_data_ray_length(float value);
  private:
  float _internal_missing_data_ray_length() const;
  void _internal_set_missing_data_ray_length(float value);
  public:

  // int32 num_accumulated_range_data = 19;
  void clear_num_accumulated_range_data();
  int32_t num_accumulated_range_data() const;
  void set_num_accumulated_range_data(int32_t value);
  private:
  int32_t _internal_num_accumulated_range_data() const;
  void _internal_set_num_accumulated_range_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options_;
    ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options_;
    ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options_;
    ::cartographer::mapping::proto::SubmapsOptions2D* submaps_options_;
    ::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options_;
    ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options_;
    ::cartographer::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options_;
    float min_z_;
    float max_z_;
    float voxel_filter_size_;
    bool use_online_correlative_scan_matching_;
    bool use_imu_data_;
    float min_range_;
    float max_range_;
    double imu_gravity_time_constant_;
    float missing_data_ray_length_;
    int32_t num_accumulated_range_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalTrajectoryBuilderOptions2D

// float min_range = 14;
inline void LocalTrajectoryBuilderOptions2D::clear_min_range() {
  _impl_.min_range_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_min_range() const {
  return _impl_.min_range_;
}
inline float LocalTrajectoryBuilderOptions2D::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
  return _internal_min_range();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_min_range(float value) {
  
  _impl_.min_range_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_min_range(float value) {
  _internal_set_min_range(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
}

// float max_range = 15;
inline void LocalTrajectoryBuilderOptions2D::clear_max_range() {
  _impl_.max_range_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_max_range() const {
  return _impl_.max_range_;
}
inline float LocalTrajectoryBuilderOptions2D::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
  return _internal_max_range();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_max_range(float value) {
  
  _impl_.max_range_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_max_range(float value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
}

// float min_z = 1;
inline void LocalTrajectoryBuilderOptions2D::clear_min_z() {
  _impl_.min_z_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_min_z() const {
  return _impl_.min_z_;
}
inline float LocalTrajectoryBuilderOptions2D::min_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
  return _internal_min_z();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_min_z(float value) {
  
  _impl_.min_z_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_min_z(float value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
}

// float max_z = 2;
inline void LocalTrajectoryBuilderOptions2D::clear_max_z() {
  _impl_.max_z_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_max_z() const {
  return _impl_.max_z_;
}
inline float LocalTrajectoryBuilderOptions2D::max_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
  return _internal_max_z();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_max_z(float value) {
  
  _impl_.max_z_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_max_z(float value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
}

// float missing_data_ray_length = 16;
inline void LocalTrajectoryBuilderOptions2D::clear_missing_data_ray_length() {
  _impl_.missing_data_ray_length_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_missing_data_ray_length() const {
  return _impl_.missing_data_ray_length_;
}
inline float LocalTrajectoryBuilderOptions2D::missing_data_ray_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
  return _internal_missing_data_ray_length();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_missing_data_ray_length(float value) {
  
  _impl_.missing_data_ray_length_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_missing_data_ray_length(float value) {
  _internal_set_missing_data_ray_length(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
}

// int32 num_accumulated_range_data = 19;
inline void LocalTrajectoryBuilderOptions2D::clear_num_accumulated_range_data() {
  _impl_.num_accumulated_range_data_ = 0;
}
inline int32_t LocalTrajectoryBuilderOptions2D::_internal_num_accumulated_range_data() const {
  return _impl_.num_accumulated_range_data_;
}
inline int32_t LocalTrajectoryBuilderOptions2D::num_accumulated_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
  return _internal_num_accumulated_range_data();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_num_accumulated_range_data(int32_t value) {
  
  _impl_.num_accumulated_range_data_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_num_accumulated_range_data(int32_t value) {
  _internal_set_num_accumulated_range_data(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
}

// float voxel_filter_size = 3;
inline void LocalTrajectoryBuilderOptions2D::clear_voxel_filter_size() {
  _impl_.voxel_filter_size_ = 0;
}
inline float LocalTrajectoryBuilderOptions2D::_internal_voxel_filter_size() const {
  return _impl_.voxel_filter_size_;
}
inline float LocalTrajectoryBuilderOptions2D::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
  return _internal_voxel_filter_size();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_voxel_filter_size(float value) {
  
  _impl_.voxel_filter_size_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_voxel_filter_size(float value) {
  _internal_set_voxel_filter_size(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && _impl_.adaptive_voxel_filter_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_adaptive_voxel_filter_options() const {
  return _internal_has_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::_internal_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = _impl_.adaptive_voxel_filter_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&>(
      ::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::adaptive_voxel_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return _internal_adaptive_voxel_filter_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_adaptive_voxel_filter_options(
    ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaptive_voxel_filter_options_);
  }
  _impl_.adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_adaptive_voxel_filter_options() {
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = _impl_.adaptive_voxel_filter_options_;
  _impl_.adaptive_voxel_filter_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = _impl_.adaptive_voxel_filter_options_;
  _impl_.adaptive_voxel_filter_options_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::_internal_mutable_adaptive_voxel_filter_options() {
  
  if (_impl_.adaptive_voxel_filter_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::AdaptiveVoxelFilterOptions>(GetArenaForAllocation());
    _impl_.adaptive_voxel_filter_options_ = p;
  }
  return _impl_.adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_adaptive_voxel_filter_options() {
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* _msg = _internal_mutable_adaptive_voxel_filter_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaptive_voxel_filter_options_);
  }
  if (adaptive_voxel_filter_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adaptive_voxel_filter_options));
    if (message_arena != submessage_arena) {
      adaptive_voxel_filter_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaptive_voxel_filter_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_loop_closure_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && _impl_.loop_closure_adaptive_voxel_filter_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_loop_closure_adaptive_voxel_filter_options() const {
  return _internal_has_loop_closure_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::_internal_loop_closure_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = _impl_.loop_closure_adaptive_voxel_filter_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&>(
      ::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::loop_closure_adaptive_voxel_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return _internal_loop_closure_adaptive_voxel_filter_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_loop_closure_adaptive_voxel_filter_options(
    ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loop_closure_adaptive_voxel_filter_options_);
  }
  _impl_.loop_closure_adaptive_voxel_filter_options_ = loop_closure_adaptive_voxel_filter_options;
  if (loop_closure_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_loop_closure_adaptive_voxel_filter_options() {
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = _impl_.loop_closure_adaptive_voxel_filter_options_;
  _impl_.loop_closure_adaptive_voxel_filter_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_loop_closure_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = _impl_.loop_closure_adaptive_voxel_filter_options_;
  _impl_.loop_closure_adaptive_voxel_filter_options_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::_internal_mutable_loop_closure_adaptive_voxel_filter_options() {
  
  if (_impl_.loop_closure_adaptive_voxel_filter_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::AdaptiveVoxelFilterOptions>(GetArenaForAllocation());
    _impl_.loop_closure_adaptive_voxel_filter_options_ = p;
  }
  return _impl_.loop_closure_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_loop_closure_adaptive_voxel_filter_options() {
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* _msg = _internal_mutable_loop_closure_adaptive_voxel_filter_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_loop_closure_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loop_closure_adaptive_voxel_filter_options_);
  }
  if (loop_closure_adaptive_voxel_filter_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loop_closure_adaptive_voxel_filter_options));
    if (message_arena != submessage_arena) {
      loop_closure_adaptive_voxel_filter_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loop_closure_adaptive_voxel_filter_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loop_closure_adaptive_voxel_filter_options_ = loop_closure_adaptive_voxel_filter_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
}

// bool use_online_correlative_scan_matching = 5;
inline void LocalTrajectoryBuilderOptions2D::clear_use_online_correlative_scan_matching() {
  _impl_.use_online_correlative_scan_matching_ = false;
}
inline bool LocalTrajectoryBuilderOptions2D::_internal_use_online_correlative_scan_matching() const {
  return _impl_.use_online_correlative_scan_matching_;
}
inline bool LocalTrajectoryBuilderOptions2D::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
  return _internal_use_online_correlative_scan_matching();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_use_online_correlative_scan_matching(bool value) {
  
  _impl_.use_online_correlative_scan_matching_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_use_online_correlative_scan_matching(bool value) {
  _internal_set_use_online_correlative_scan_matching(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
}

// .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_real_time_correlative_scan_matcher_options() const {
  return this != internal_default_instance() && _impl_.real_time_correlative_scan_matcher_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_real_time_correlative_scan_matcher_options() const {
  return _internal_has_real_time_correlative_scan_matcher_options();
}
inline const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions2D::_internal_real_time_correlative_scan_matcher_options() const {
  const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* p = _impl_.real_time_correlative_scan_matcher_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions&>(
      ::cartographer::mapping::scan_matching::proto::_RealTimeCorrelativeScanMatcherOptions_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions2D::real_time_correlative_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return _internal_real_time_correlative_scan_matcher_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_real_time_correlative_scan_matcher_options(
    ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.real_time_correlative_scan_matcher_options_);
  }
  _impl_.real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
}
inline ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::release_real_time_correlative_scan_matcher_options() {
  
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = _impl_.real_time_correlative_scan_matcher_options_;
  _impl_.real_time_correlative_scan_matcher_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = _impl_.real_time_correlative_scan_matcher_options_;
  _impl_.real_time_correlative_scan_matcher_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::_internal_mutable_real_time_correlative_scan_matcher_options() {
  
  if (_impl_.real_time_correlative_scan_matcher_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions>(GetArenaForAllocation());
    _impl_.real_time_correlative_scan_matcher_options_ = p;
  }
  return _impl_.real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::mutable_real_time_correlative_scan_matcher_options() {
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* _msg = _internal_mutable_real_time_correlative_scan_matcher_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.real_time_correlative_scan_matcher_options_);
  }
  if (real_time_correlative_scan_matcher_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(real_time_correlative_scan_matcher_options));
    if (message_arena != submessage_arena) {
      real_time_correlative_scan_matcher_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, real_time_correlative_scan_matcher_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
}

// .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_ceres_scan_matcher_options() const {
  return this != internal_default_instance() && _impl_.ceres_scan_matcher_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_ceres_scan_matcher_options() const {
  return _internal_has_ceres_scan_matcher_options();
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& LocalTrajectoryBuilderOptions2D::_internal_ceres_scan_matcher_options() const {
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* p = _impl_.ceres_scan_matcher_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D&>(
      ::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions2D_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& LocalTrajectoryBuilderOptions2D::ceres_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return _internal_ceres_scan_matcher_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_ceres_scan_matcher_options(
    ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ceres_scan_matcher_options_);
  }
  _impl_.ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::release_ceres_scan_matcher_options() {
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = _impl_.ceres_scan_matcher_options_;
  _impl_.ceres_scan_matcher_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = _impl_.ceres_scan_matcher_options_;
  _impl_.ceres_scan_matcher_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::_internal_mutable_ceres_scan_matcher_options() {
  
  if (_impl_.ceres_scan_matcher_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D>(GetArenaForAllocation());
    _impl_.ceres_scan_matcher_options_ = p;
  }
  return _impl_.ceres_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::mutable_ceres_scan_matcher_options() {
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* _msg = _internal_mutable_ceres_scan_matcher_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ceres_scan_matcher_options_);
  }
  if (ceres_scan_matcher_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_scan_matcher_options));
    if (message_arena != submessage_arena) {
      ceres_scan_matcher_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ceres_scan_matcher_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
}

// .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_motion_filter_options() const {
  return this != internal_default_instance() && _impl_.motion_filter_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_motion_filter_options() const {
  return _internal_has_motion_filter_options();
}
inline const ::cartographer::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions2D::_internal_motion_filter_options() const {
  const ::cartographer::mapping::proto::MotionFilterOptions* p = _impl_.motion_filter_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::MotionFilterOptions&>(
      ::cartographer::mapping::proto::_MotionFilterOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions2D::motion_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return _internal_motion_filter_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_motion_filter_options(
    ::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_filter_options_);
  }
  _impl_.motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::release_motion_filter_options() {
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = _impl_.motion_filter_options_;
  _impl_.motion_filter_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = _impl_.motion_filter_options_;
  _impl_.motion_filter_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::_internal_mutable_motion_filter_options() {
  
  if (_impl_.motion_filter_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::MotionFilterOptions>(GetArenaForAllocation());
    _impl_.motion_filter_options_ = p;
  }
  return _impl_.motion_filter_options_;
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_motion_filter_options() {
  ::cartographer::mapping::proto::MotionFilterOptions* _msg = _internal_mutable_motion_filter_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_filter_options_);
  }
  if (motion_filter_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_filter_options));
    if (message_arena != submessage_arena) {
      motion_filter_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_filter_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_filter_options_ = motion_filter_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
}

// double imu_gravity_time_constant = 17;
inline void LocalTrajectoryBuilderOptions2D::clear_imu_gravity_time_constant() {
  _impl_.imu_gravity_time_constant_ = 0;
}
inline double LocalTrajectoryBuilderOptions2D::_internal_imu_gravity_time_constant() const {
  return _impl_.imu_gravity_time_constant_;
}
inline double LocalTrajectoryBuilderOptions2D::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
  return _internal_imu_gravity_time_constant();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_imu_gravity_time_constant(double value) {
  
  _impl_.imu_gravity_time_constant_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_imu_gravity_time_constant(double value) {
  _internal_set_imu_gravity_time_constant(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
}

// .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_pose_extrapolator_options() const {
  return this != internal_default_instance() && _impl_.pose_extrapolator_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_pose_extrapolator_options() const {
  return _internal_has_pose_extrapolator_options();
}
inline const ::cartographer::mapping::proto::PoseExtrapolatorOptions& LocalTrajectoryBuilderOptions2D::_internal_pose_extrapolator_options() const {
  const ::cartographer::mapping::proto::PoseExtrapolatorOptions* p = _impl_.pose_extrapolator_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::PoseExtrapolatorOptions&>(
      ::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::PoseExtrapolatorOptions& LocalTrajectoryBuilderOptions2D::pose_extrapolator_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  return _internal_pose_extrapolator_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_pose_extrapolator_options(
    ::cartographer::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_extrapolator_options_);
  }
  _impl_.pose_extrapolator_options_ = pose_extrapolator_options;
  if (pose_extrapolator_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
}
inline ::cartographer::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::release_pose_extrapolator_options() {
  
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* temp = _impl_.pose_extrapolator_options_;
  _impl_.pose_extrapolator_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_pose_extrapolator_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* temp = _impl_.pose_extrapolator_options_;
  _impl_.pose_extrapolator_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::_internal_mutable_pose_extrapolator_options() {
  
  if (_impl_.pose_extrapolator_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::PoseExtrapolatorOptions>(GetArenaForAllocation());
    _impl_.pose_extrapolator_options_ = p;
  }
  return _impl_.pose_extrapolator_options_;
}
inline ::cartographer::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::mutable_pose_extrapolator_options() {
  ::cartographer::mapping::proto::PoseExtrapolatorOptions* _msg = _internal_mutable_pose_extrapolator_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_pose_extrapolator_options(::cartographer::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_extrapolator_options_);
  }
  if (pose_extrapolator_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_extrapolator_options));
    if (message_arena != submessage_arena) {
      pose_extrapolator_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_extrapolator_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_extrapolator_options_ = pose_extrapolator_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
}

// .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
inline bool LocalTrajectoryBuilderOptions2D::_internal_has_submaps_options() const {
  return this != internal_default_instance() && _impl_.submaps_options_ != nullptr;
}
inline bool LocalTrajectoryBuilderOptions2D::has_submaps_options() const {
  return _internal_has_submaps_options();
}
inline const ::cartographer::mapping::proto::SubmapsOptions2D& LocalTrajectoryBuilderOptions2D::_internal_submaps_options() const {
  const ::cartographer::mapping::proto::SubmapsOptions2D* p = _impl_.submaps_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::SubmapsOptions2D&>(
      ::cartographer::mapping::proto::_SubmapsOptions2D_default_instance_);
}
inline const ::cartographer::mapping::proto::SubmapsOptions2D& LocalTrajectoryBuilderOptions2D::submaps_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return _internal_submaps_options();
}
inline void LocalTrajectoryBuilderOptions2D::unsafe_arena_set_allocated_submaps_options(
    ::cartographer::mapping::proto::SubmapsOptions2D* submaps_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submaps_options_);
  }
  _impl_.submaps_options_ = submaps_options;
  if (submaps_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
}
inline ::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::release_submaps_options() {
  
  ::cartographer::mapping::proto::SubmapsOptions2D* temp = _impl_.submaps_options_;
  _impl_.submaps_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::unsafe_arena_release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  
  ::cartographer::mapping::proto::SubmapsOptions2D* temp = _impl_.submaps_options_;
  _impl_.submaps_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::_internal_mutable_submaps_options() {
  
  if (_impl_.submaps_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapsOptions2D>(GetArenaForAllocation());
    _impl_.submaps_options_ = p;
  }
  return _impl_.submaps_options_;
}
inline ::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::mutable_submaps_options() {
  ::cartographer::mapping::proto::SubmapsOptions2D* _msg = _internal_mutable_submaps_options();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return _msg;
}
inline void LocalTrajectoryBuilderOptions2D::set_allocated_submaps_options(::cartographer::mapping::proto::SubmapsOptions2D* submaps_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submaps_options_);
  }
  if (submaps_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submaps_options));
    if (message_arena != submessage_arena) {
      submaps_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submaps_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submaps_options_ = submaps_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
}

// bool use_imu_data = 12;
inline void LocalTrajectoryBuilderOptions2D::clear_use_imu_data() {
  _impl_.use_imu_data_ = false;
}
inline bool LocalTrajectoryBuilderOptions2D::_internal_use_imu_data() const {
  return _impl_.use_imu_data_;
}
inline bool LocalTrajectoryBuilderOptions2D::use_imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
  return _internal_use_imu_data();
}
inline void LocalTrajectoryBuilderOptions2D::_internal_set_use_imu_data(bool value) {
  
  _impl_.use_imu_data_ = value;
}
inline void LocalTrajectoryBuilderOptions2D::set_use_imu_data(bool value) {
  _internal_set_use_imu_data(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto
