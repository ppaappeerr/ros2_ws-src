// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/ground_truth/proto/relations.proto

#include "cartographer/ground_truth/proto/relations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace ground_truth {
namespace proto {
PROTOBUF_CONSTEXPR Relation::Relation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expected_)*/nullptr
  , /*decltype(_impl_.timestamp1_)*/int64_t{0}
  , /*decltype(_impl_.timestamp2_)*/int64_t{0}
  , /*decltype(_impl_.covered_distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationDefaultTypeInternal() {}
  union {
    Relation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationDefaultTypeInternal _Relation_default_instance_;
PROTOBUF_CONSTEXPR GroundTruth::GroundTruth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroundTruthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroundTruthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroundTruthDefaultTypeInternal() {}
  union {
    GroundTruth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _impl_.timestamp1_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _impl_.timestamp2_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _impl_.expected_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _impl_.covered_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, _impl_.relation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::ground_truth::proto::Relation)},
  { 10, -1, -1, sizeof(::cartographer::ground_truth::proto::GroundTruth)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::ground_truth::proto::_Relation_default_instance_._instance,
  &::cartographer::ground_truth::proto::_GroundTruth_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/cartographer/ground_truth/proto/relati"
  "ons.proto\022\037cartographer.ground_truth.pro"
  "to\032,cartographer/transform/proto/transfo"
  "rm.proto\"\205\001\n\010Relation\022\022\n\ntimestamp1\030\001 \001("
  "\003\022\022\n\ntimestamp2\030\002 \001(\003\0227\n\010expected\030\003 \001(\0132"
  "%.cartographer.transform.proto.Rigid3d\022\030"
  "\n\020covered_distance\030\004 \001(\001\"J\n\013GroundTruth\022"
  ";\n\010relation\030\001 \003(\0132).cartographer.ground_"
  "truth.proto.Relationb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = {
    false, false, 348, descriptor_table_protodef_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto,
    "cartographer/ground_truth/proto/relations.proto",
    &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once, descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::offsets,
    file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto, file_level_enum_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto,
    file_level_service_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_getter() {
  return &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto(&descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto);
namespace cartographer {
namespace ground_truth {
namespace proto {

// ===================================================================

class Relation::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& expected(const Relation* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Relation::_Internal::expected(const Relation* msg) {
  return *msg->_impl_.expected_;
}
void Relation::clear_expected() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_ != nullptr) {
    delete _impl_.expected_;
  }
  _impl_.expected_ = nullptr;
}
Relation::Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.ground_truth.proto.Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Relation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expected_){nullptr}
    , decltype(_impl_.timestamp1_){}
    , decltype(_impl_.timestamp2_){}
    , decltype(_impl_.covered_distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expected()) {
    _this->_impl_.expected_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.expected_);
  }
  ::memcpy(&_impl_.timestamp1_, &from._impl_.timestamp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.covered_distance_) -
    reinterpret_cast<char*>(&_impl_.timestamp1_)) + sizeof(_impl_.covered_distance_));
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.Relation)
}

inline void Relation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expected_){nullptr}
    , decltype(_impl_.timestamp1_){int64_t{0}}
    , decltype(_impl_.timestamp2_){int64_t{0}}
    , decltype(_impl_.covered_distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.Relation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expected_;
}

void Relation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.Relation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expected_ != nullptr) {
    delete _impl_.expected_;
  }
  _impl_.expected_ = nullptr;
  ::memset(&_impl_.timestamp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.covered_distance_) -
      reinterpret_cast<char*>(&_impl_.timestamp1_)) + sizeof(_impl_.covered_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d expected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double covered_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.covered_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Relation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.Relation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp1 = 1;
  if (this->_internal_timestamp1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp1(), target);
  }

  // int64 timestamp2 = 2;
  if (this->_internal_timestamp2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp2(), target);
  }

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->_internal_has_expected()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expected(this),
        _Internal::expected(this).GetCachedSize(), target, stream);
  }

  // double covered_distance = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_covered_distance = this->_internal_covered_distance();
  uint64_t raw_covered_distance;
  memcpy(&raw_covered_distance, &tmp_covered_distance, sizeof(tmp_covered_distance));
  if (raw_covered_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_covered_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.Relation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->_internal_has_expected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_);
  }

  // int64 timestamp1 = 1;
  if (this->_internal_timestamp1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp1());
  }

  // int64 timestamp2 = 2;
  if (this->_internal_timestamp2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp2());
  }

  // double covered_distance = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_covered_distance = this->_internal_covered_distance();
  uint64_t raw_covered_distance;
  memcpy(&raw_covered_distance, &tmp_covered_distance, sizeof(tmp_covered_distance));
  if (raw_covered_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Relation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Relation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Relation::GetClassData() const { return &_class_data_; }


void Relation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Relation*>(&to_msg);
  auto& from = static_cast<const Relation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.Relation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expected()) {
    _this->_internal_mutable_expected()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_expected());
  }
  if (from._internal_timestamp1() != 0) {
    _this->_internal_set_timestamp1(from._internal_timestamp1());
  }
  if (from._internal_timestamp2() != 0) {
    _this->_internal_set_timestamp2(from._internal_timestamp2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_covered_distance = from._internal_covered_distance();
  uint64_t raw_covered_distance;
  memcpy(&raw_covered_distance, &tmp_covered_distance, sizeof(tmp_covered_distance));
  if (raw_covered_distance != 0) {
    _this->_internal_set_covered_distance(from._internal_covered_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Relation, _impl_.covered_distance_)
      + sizeof(Relation::_impl_.covered_distance_)
      - PROTOBUF_FIELD_OFFSET(Relation, _impl_.expected_)>(
          reinterpret_cast<char*>(&_impl_.expected_),
          reinterpret_cast<char*>(&other->_impl_.expected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_getter, &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once,
      file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[0]);
}

// ===================================================================

class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.ground_truth.proto.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroundTruth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_){from._impl_.relation_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.GroundTruth)
}

inline void GroundTruth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.GroundTruth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroundTruth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relation_.~RepeatedPtrField();
}

void GroundTruth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.GroundTruth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cartographer.ground_truth.proto.Relation relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroundTruth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.GroundTruth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relation_size()); i < n; i++) {
    const auto& repfield = this->_internal_relation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.GroundTruth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  total_size += 1UL * this->_internal_relation_size();
  for (const auto& msg : this->_impl_.relation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroundTruth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroundTruth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroundTruth::GetClassData() const { return &_class_data_; }


void GroundTruth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroundTruth*>(&to_msg);
  auto& from = static_cast<const GroundTruth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relation_.MergeFrom(from._impl_.relation_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.relation_.InternalSwap(&other->_impl_.relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_getter, &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once,
      file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::ground_truth::proto::Relation*
Arena::CreateMaybeMessage< ::cartographer::ground_truth::proto::Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::ground_truth::proto::Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::ground_truth::proto::GroundTruth*
Arena::CreateMaybeMessage< ::cartographer::ground_truth::proto::GroundTruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::ground_truth::proto::GroundTruth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
