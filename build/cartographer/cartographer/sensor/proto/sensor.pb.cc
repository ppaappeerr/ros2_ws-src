// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cartographer {
namespace sensor {
namespace proto {
PROTOBUF_CONSTEXPR RangefinderPoint::RangefinderPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangefinderPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangefinderPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangefinderPointDefaultTypeInternal() {}
  union {
    RangefinderPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangefinderPointDefaultTypeInternal _RangefinderPoint_default_instance_;
PROTOBUF_CONSTEXPR TimedRangefinderPoint::TimedRangefinderPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimedRangefinderPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedRangefinderPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedRangefinderPointDefaultTypeInternal() {}
  union {
    TimedRangefinderPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedRangefinderPointDefaultTypeInternal _TimedRangefinderPoint_default_instance_;
PROTOBUF_CONSTEXPR CompressedPointCloud::CompressedPointCloud(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_data_)*/{}
  , /*decltype(_impl_._point_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.num_points_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompressedPointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedPointCloudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedPointCloudDefaultTypeInternal() {}
  union {
    CompressedPointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedPointCloudDefaultTypeInternal _CompressedPointCloud_default_instance_;
PROTOBUF_CONSTEXPR TimedPointCloudData::TimedPointCloudData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_data_legacy_)*/{}
  , /*decltype(_impl_.point_data_)*/{}
  , /*decltype(_impl_.intensities_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimedPointCloudDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedPointCloudDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedPointCloudDataDefaultTypeInternal() {}
  union {
    TimedPointCloudData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedPointCloudDataDefaultTypeInternal _TimedPointCloudData_default_instance_;
PROTOBUF_CONSTEXPR RangeData::RangeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.returns_legacy_)*/{}
  , /*decltype(_impl_.misses_legacy_)*/{}
  , /*decltype(_impl_.returns_)*/{}
  , /*decltype(_impl_.misses_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDataDefaultTypeInternal() {}
  union {
    RangeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDataDefaultTypeInternal _RangeData_default_instance_;
PROTOBUF_CONSTEXPR ImuData::ImuData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linear_acceleration_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImuDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDataDefaultTypeInternal() {}
  union {
    ImuData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDataDefaultTypeInternal _ImuData_default_instance_;
PROTOBUF_CONSTEXPR OdometryData::OdometryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OdometryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDataDefaultTypeInternal() {}
  union {
    OdometryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
PROTOBUF_CONSTEXPR FixedFramePoseData::FixedFramePoseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FixedFramePoseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FixedFramePoseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FixedFramePoseDataDefaultTypeInternal() {}
  union {
    FixedFramePoseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
PROTOBUF_CONSTEXPR LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.landmark_to_tracking_transform_)*/nullptr
  , /*decltype(_impl_.translation_weight_)*/0
  , /*decltype(_impl_.rotation_weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LandmarkData_LandmarkObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LandmarkData_LandmarkObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LandmarkData_LandmarkObservationDefaultTypeInternal() {}
  union {
    LandmarkData_LandmarkObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LandmarkData_LandmarkObservationDefaultTypeInternal _LandmarkData_LandmarkObservation_default_instance_;
PROTOBUF_CONSTEXPR LandmarkData::LandmarkData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.landmark_observations_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LandmarkDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LandmarkDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LandmarkDataDefaultTypeInternal() {}
  union {
    LandmarkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
static ::_pb::Metadata file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;

const uint32_t TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, _impl_.num_points_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, _impl_.point_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _impl_.point_data_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _impl_.point_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _impl_.intensities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _impl_.returns_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _impl_.misses_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _impl_.returns_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _impl_.misses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _impl_.linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _impl_.angular_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _impl_.landmark_to_tracking_transform_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _impl_.translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _impl_.rotation_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, _impl_.landmark_observations_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::sensor::proto::RangefinderPoint)},
  { 7, -1, -1, sizeof(::cartographer::sensor::proto::TimedRangefinderPoint)},
  { 15, -1, -1, sizeof(::cartographer::sensor::proto::CompressedPointCloud)},
  { 23, -1, -1, sizeof(::cartographer::sensor::proto::TimedPointCloudData)},
  { 34, -1, -1, sizeof(::cartographer::sensor::proto::RangeData)},
  { 45, -1, -1, sizeof(::cartographer::sensor::proto::ImuData)},
  { 54, -1, -1, sizeof(::cartographer::sensor::proto::OdometryData)},
  { 62, -1, -1, sizeof(::cartographer::sensor::proto::FixedFramePoseData)},
  { 70, -1, -1, sizeof(::cartographer::sensor::proto::LandmarkData_LandmarkObservation)},
  { 80, -1, -1, sizeof(::cartographer::sensor::proto::LandmarkData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cartographer::sensor::proto::_RangefinderPoint_default_instance_._instance,
  &::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_._instance,
  &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_._instance,
  &::cartographer::sensor::proto::_TimedPointCloudData_default_instance_._instance,
  &::cartographer::sensor::proto::_RangeData_default_instance_._instance,
  &::cartographer::sensor::proto::_ImuData_default_instance_._instance,
  &::cartographer::sensor::proto::_OdometryData_default_instance_._instance,
  &::cartographer::sensor::proto::_FixedFramePoseData_default_instance_._instance,
  &::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_._instance,
  &::cartographer::sensor::proto::_LandmarkData_default_instance_._instance,
};

const char descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&cartographer/sensor/proto/sensor.proto"
  "\022\031cartographer.sensor.proto\032,cartographe"
  "r/transform/proto/transform.proto\"L\n\020Ran"
  "gefinderPoint\0228\n\010position\030\001 \001(\0132&.cartog"
  "rapher.transform.proto.Vector3f\"_\n\025Timed"
  "RangefinderPoint\0228\n\010position\030\001 \001(\0132&.car"
  "tographer.transform.proto.Vector3f\022\014\n\004ti"
  "me\030\002 \001(\002\">\n\024CompressedPointCloud\022\022\n\nnum_"
  "points\030\001 \001(\005\022\022\n\npoint_data\030\003 \003(\005\"\376\001\n\023Tim"
  "edPointCloudData\022\021\n\ttimestamp\030\001 \001(\003\0226\n\006o"
  "rigin\030\002 \001(\0132&.cartographer.transform.pro"
  "to.Vector3f\022A\n\021point_data_legacy\030\003 \003(\0132&"
  ".cartographer.transform.proto.Vector4f\022D"
  "\n\npoint_data\030\004 \003(\01320.cartographer.sensor"
  ".proto.TimedRangefinderPoint\022\023\n\013intensit"
  "ies\030\005 \003(\002\"\275\002\n\tRangeData\0226\n\006origin\030\001 \001(\0132"
  "&.cartographer.transform.proto.Vector3f\022"
  ">\n\016returns_legacy\030\002 \003(\0132&.cartographer.t"
  "ransform.proto.Vector3f\022=\n\rmisses_legacy"
  "\030\003 \003(\0132&.cartographer.transform.proto.Ve"
  "ctor3f\022<\n\007returns\030\004 \003(\0132+.cartographer.s"
  "ensor.proto.RangefinderPoint\022;\n\006misses\030\005"
  " \003(\0132+.cartographer.sensor.proto.Rangefi"
  "nderPoint\"\243\001\n\007ImuData\022\021\n\ttimestamp\030\001 \001(\003"
  "\022C\n\023linear_acceleration\030\002 \001(\0132&.cartogra"
  "pher.transform.proto.Vector3d\022@\n\020angular"
  "_velocity\030\003 \001(\0132&.cartographer.transform"
  ".proto.Vector3d\"V\n\014OdometryData\022\021\n\ttimes"
  "tamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.cartographer."
  "transform.proto.Rigid3d\"\\\n\022FixedFramePos"
  "eData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%"
  ".cartographer.transform.proto.Rigid3d\"\245\002"
  "\n\014LandmarkData\022\021\n\ttimestamp\030\001 \001(\003\022Z\n\025lan"
  "dmark_observations\030\002 \003(\0132;.cartographer."
  "sensor.proto.LandmarkData.LandmarkObserv"
  "ation\032\245\001\n\023LandmarkObservation\022\n\n\002id\030\001 \001("
  "\014\022M\n\036landmark_to_tracking_transform\030\002 \001("
  "\0132%.cartographer.transform.proto.Rigid3d"
  "\022\032\n\022translation_weight\030\003 \001(\001\022\027\n\017rotation"
  "_weight\030\004 \001(\001B\010B\006Sensorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::_pbi::once_flag descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto = {
    false, false, 1591, descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto,
    "cartographer/sensor/proto/sensor.proto",
    &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once, descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets,
    file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto, file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto,
    file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter() {
  return &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fsensor_2fproto_2fsensor_2eproto(&descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

class RangefinderPoint::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const RangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangefinderPoint::_Internal::position(const RangefinderPoint* msg) {
  return *msg->_impl_.position_;
}
void RangefinderPoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
RangefinderPoint::RangefinderPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.RangefinderPoint)
}
RangefinderPoint::RangefinderPoint(const RangefinderPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangefinderPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::cartographer::transform::proto::Vector3f(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangefinderPoint)
}

inline void RangefinderPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangefinderPoint::~RangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangefinderPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangefinderPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void RangefinderPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangefinderPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangefinderPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangefinderPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangefinderPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangefinderPoint)
  return target;
}

size_t RangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangefinderPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangefinderPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangefinderPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangefinderPoint::GetClassData() const { return &_class_data_; }


void RangefinderPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangefinderPoint*>(&to_msg);
  auto& from = static_cast<const RangefinderPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangefinderPoint::CopyFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangefinderPoint::IsInitialized() const {
  return true;
}

void RangefinderPoint::InternalSwap(RangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangefinderPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[0]);
}

// ===================================================================

class TimedRangefinderPoint::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const TimedRangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedRangefinderPoint::_Internal::position(const TimedRangefinderPoint* msg) {
  return *msg->_impl_.position_;
}
void TimedRangefinderPoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
TimedRangefinderPoint::TimedRangefinderPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}
TimedRangefinderPoint::TimedRangefinderPoint(const TimedRangefinderPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimedRangefinderPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::cartographer::transform::proto::Vector3f(*from._impl_.position_);
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}

inline void TimedRangefinderPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimedRangefinderPoint::~TimedRangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedRangefinderPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimedRangefinderPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void TimedRangefinderPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimedRangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedRangefinderPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _impl_.time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedRangefinderPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimedRangefinderPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedRangefinderPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedRangefinderPoint)
  return target;
}

size_t TimedRangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedRangefinderPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // float time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimedRangefinderPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimedRangefinderPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimedRangefinderPoint::GetClassData() const { return &_class_data_; }


void TimedRangefinderPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimedRangefinderPoint*>(&to_msg);
  auto& from = static_cast<const TimedRangefinderPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimedRangefinderPoint::CopyFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedRangefinderPoint::IsInitialized() const {
  return true;
}

void TimedRangefinderPoint::InternalSwap(TimedRangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedRangefinderPoint, _impl_.time_)
      + sizeof(TimedRangefinderPoint::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(TimedRangefinderPoint, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedRangefinderPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[1]);
}

// ===================================================================

class CompressedPointCloud::_Internal {
 public:
};

CompressedPointCloud::CompressedPointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompressedPointCloud* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_data_){from._impl_.point_data_}
    , /*decltype(_impl_._point_data_cached_byte_size_)*/{0}
    , decltype(_impl_.num_points_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_points_ = from._impl_.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

inline void CompressedPointCloud::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_data_){arena}
    , /*decltype(_impl_._point_data_cached_byte_size_)*/{0}
    , decltype(_impl_.num_points_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompressedPointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_data_.~RepeatedField();
}

void CompressedPointCloud::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_data_.Clear();
  _impl_.num_points_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressedPointCloud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 point_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_point_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_point_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompressedPointCloud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->_internal_num_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_points(), target);
  }

  // repeated int32 point_data = 3;
  {
    int byte_size = _impl_._point_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_point_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 point_data = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._point_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 num_points = 1;
  if (this->_internal_num_points() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressedPointCloud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompressedPointCloud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressedPointCloud::GetClassData() const { return &_class_data_; }


void CompressedPointCloud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompressedPointCloud*>(&to_msg);
  auto& from = static_cast<const CompressedPointCloud&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.point_data_.MergeFrom(from._impl_.point_data_);
  if (from._internal_num_points() != 0) {
    _this->_internal_set_num_points(from._internal_num_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_data_.InternalSwap(&other->_impl_.point_data_);
  swap(_impl_.num_points_, other->_impl_.num_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedPointCloud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[2]);
}

// ===================================================================

class TimedPointCloudData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const TimedPointCloudData* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedPointCloudData::_Internal::origin(const TimedPointCloudData* msg) {
  return *msg->_impl_.origin_;
}
void TimedPointCloudData::clear_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
}
void TimedPointCloudData::clear_point_data_legacy() {
  _impl_.point_data_legacy_.Clear();
}
TimedPointCloudData::TimedPointCloudData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.TimedPointCloudData)
}
TimedPointCloudData::TimedPointCloudData(const TimedPointCloudData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimedPointCloudData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_data_legacy_){from._impl_.point_data_legacy_}
    , decltype(_impl_.point_data_){from._impl_.point_data_}
    , decltype(_impl_.intensities_){from._impl_.intensities_}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::cartographer::transform::proto::Vector3f(*from._impl_.origin_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedPointCloudData)
}

inline void TimedPointCloudData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_data_legacy_){arena}
    , decltype(_impl_.point_data_){arena}
    , decltype(_impl_.intensities_){arena}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimedPointCloudData::~TimedPointCloudData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedPointCloudData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimedPointCloudData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_data_legacy_.~RepeatedPtrField();
  _impl_.point_data_.~RepeatedPtrField();
  _impl_.intensities_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void TimedPointCloudData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimedPointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedPointCloudData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_data_legacy_.Clear();
  _impl_.point_data_.Clear();
  _impl_.intensities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedPointCloudData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3f origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_data_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float intensities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimedPointCloudData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedPointCloudData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_data_legacy_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_data_legacy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float intensities = 5;
  if (this->_internal_intensities_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_intensities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedPointCloudData)
  return target;
}

size_t TimedPointCloudData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedPointCloudData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  total_size += 1UL * this->_internal_point_data_legacy_size();
  for (const auto& msg : this->_impl_.point_data_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  total_size += 1UL * this->_internal_point_data_size();
  for (const auto& msg : this->_impl_.point_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float intensities = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimedPointCloudData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimedPointCloudData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimedPointCloudData::GetClassData() const { return &_class_data_; }


void TimedPointCloudData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimedPointCloudData*>(&to_msg);
  auto& from = static_cast<const TimedPointCloudData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.point_data_legacy_.MergeFrom(from._impl_.point_data_legacy_);
  _this->_impl_.point_data_.MergeFrom(from._impl_.point_data_);
  _this->_impl_.intensities_.MergeFrom(from._impl_.intensities_);
  if (from._internal_has_origin()) {
    _this->_internal_mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(
        from._internal_origin());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimedPointCloudData::CopyFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedPointCloudData::IsInitialized() const {
  return true;
}

void TimedPointCloudData::InternalSwap(TimedPointCloudData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_data_legacy_.InternalSwap(&other->_impl_.point_data_legacy_);
  _impl_.point_data_.InternalSwap(&other->_impl_.point_data_);
  _impl_.intensities_.InternalSwap(&other->_impl_.intensities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedPointCloudData, _impl_.timestamp_)
      + sizeof(TimedPointCloudData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(TimedPointCloudData, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedPointCloudData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[3]);
}

// ===================================================================

class RangeData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const RangeData* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangeData::_Internal::origin(const RangeData* msg) {
  return *msg->_impl_.origin_;
}
void RangeData::clear_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
}
void RangeData::clear_returns_legacy() {
  _impl_.returns_legacy_.Clear();
}
void RangeData::clear_misses_legacy() {
  _impl_.misses_legacy_.Clear();
}
RangeData::RangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.RangeData)
}
RangeData::RangeData(const RangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.returns_legacy_){from._impl_.returns_legacy_}
    , decltype(_impl_.misses_legacy_){from._impl_.misses_legacy_}
    , decltype(_impl_.returns_){from._impl_.returns_}
    , decltype(_impl_.misses_){from._impl_.misses_}
    , decltype(_impl_.origin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::cartographer::transform::proto::Vector3f(*from._impl_.origin_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangeData)
}

inline void RangeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.returns_legacy_){arena}
    , decltype(_impl_.misses_legacy_){arena}
    , decltype(_impl_.returns_){arena}
    , decltype(_impl_.misses_){arena}
    , decltype(_impl_.origin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeData::~RangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.returns_legacy_.~RepeatedPtrField();
  _impl_.misses_legacy_.~RepeatedPtrField();
  _impl_.returns_.~RepeatedPtrField();
  _impl_.misses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void RangeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.returns_legacy_.Clear();
  _impl_.misses_legacy_.Clear();
  _impl_.returns_.Clear();
  _impl_.misses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_returns_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misses_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_returns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_returns_legacy_size()); i < n; i++) {
    const auto& repfield = this->_internal_returns_legacy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_misses_legacy_size()); i < n; i++) {
    const auto& repfield = this->_internal_misses_legacy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_returns_size()); i < n; i++) {
    const auto& repfield = this->_internal_returns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_misses_size()); i < n; i++) {
    const auto& repfield = this->_internal_misses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangeData)
  return target;
}

size_t RangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  total_size += 1UL * this->_internal_returns_legacy_size();
  for (const auto& msg : this->_impl_.returns_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  total_size += 1UL * this->_internal_misses_legacy_size();
  for (const auto& msg : this->_impl_.misses_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  total_size += 1UL * this->_internal_returns_size();
  for (const auto& msg : this->_impl_.returns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  total_size += 1UL * this->_internal_misses_size();
  for (const auto& msg : this->_impl_.misses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeData::GetClassData() const { return &_class_data_; }


void RangeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeData*>(&to_msg);
  auto& from = static_cast<const RangeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.returns_legacy_.MergeFrom(from._impl_.returns_legacy_);
  _this->_impl_.misses_legacy_.MergeFrom(from._impl_.misses_legacy_);
  _this->_impl_.returns_.MergeFrom(from._impl_.returns_);
  _this->_impl_.misses_.MergeFrom(from._impl_.misses_);
  if (from._internal_has_origin()) {
    _this->_internal_mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(
        from._internal_origin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeData::CopyFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {
  return true;
}

void RangeData::InternalSwap(RangeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.returns_legacy_.InternalSwap(&other->_impl_.returns_legacy_);
  _impl_.misses_legacy_.InternalSwap(&other->_impl_.misses_legacy_);
  _impl_.returns_.InternalSwap(&other->_impl_.returns_);
  _impl_.misses_.InternalSwap(&other->_impl_.misses_);
  swap(_impl_.origin_, other->_impl_.origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[4]);
}

// ===================================================================

class ImuData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3d& linear_acceleration(const ImuData* msg);
  static const ::cartographer::transform::proto::Vector3d& angular_velocity(const ImuData* msg);
};

const ::cartographer::transform::proto::Vector3d&
ImuData::_Internal::linear_acceleration(const ImuData* msg) {
  return *msg->_impl_.linear_acceleration_;
}
const ::cartographer::transform::proto::Vector3d&
ImuData::_Internal::angular_velocity(const ImuData* msg) {
  return *msg->_impl_.angular_velocity_;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.linear_acceleration_ != nullptr) {
    delete _impl_.linear_acceleration_;
  }
  _impl_.linear_acceleration_ = nullptr;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
ImuData::ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImuData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_acceleration()) {
    _this->_impl_.linear_acceleration_ = new ::cartographer::transform::proto::Vector3d(*from._impl_.linear_acceleration_);
  }
  if (from._internal_has_angular_velocity()) {
    _this->_impl_.angular_velocity_ = new ::cartographer::transform::proto::Vector3d(*from._impl_.angular_velocity_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

inline void ImuData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImuData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linear_acceleration_ != nullptr) {
    delete _impl_.linear_acceleration_;
  }
  _impl_.linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImuData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->_internal_has_linear_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::linear_acceleration(this),
        _Internal::linear_acceleration(this).GetCachedSize(), target, stream);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->_internal_has_angular_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->_internal_has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linear_acceleration_);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_velocity_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImuData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuData::GetClassData() const { return &_class_data_; }


void ImuData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImuData*>(&to_msg);
  auto& from = static_cast<const ImuData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linear_acceleration()) {
    _this->_internal_mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(
        from._internal_linear_acceleration());
  }
  if (from._internal_has_angular_velocity()) {
    _this->_internal_mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(
        from._internal_angular_velocity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, _impl_.timestamp_)
      + sizeof(ImuData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ImuData, _impl_.linear_acceleration_)>(
          reinterpret_cast<char*>(&_impl_.linear_acceleration_),
          reinterpret_cast<char*>(&other->_impl_.linear_acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[5]);
}

// ===================================================================

class OdometryData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const OdometryData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
OdometryData::_Internal::pose(const OdometryData* msg) {
  return *msg->_impl_.pose_;
}
void OdometryData::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
OdometryData::OdometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OdometryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.pose_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

inline void OdometryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OdometryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void OdometryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdometryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OdometryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OdometryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OdometryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OdometryData::GetClassData() const { return &_class_data_; }


void OdometryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OdometryData*>(&to_msg);
  auto& from = static_cast<const OdometryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OdometryData, _impl_.timestamp_)
      + sizeof(OdometryData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(OdometryData, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[6]);
}

// ===================================================================

class FixedFramePoseData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const FixedFramePoseData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
FixedFramePoseData::_Internal::pose(const FixedFramePoseData* msg) {
  return *msg->_impl_.pose_;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
FixedFramePoseData::FixedFramePoseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FixedFramePoseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.pose_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

inline void FixedFramePoseData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FixedFramePoseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedFramePoseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FixedFramePoseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FixedFramePoseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FixedFramePoseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FixedFramePoseData::GetClassData() const { return &_class_data_; }


void FixedFramePoseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FixedFramePoseData*>(&to_msg);
  auto& from = static_cast<const FixedFramePoseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedFramePoseData, _impl_.timestamp_)
      + sizeof(FixedFramePoseData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(FixedFramePoseData, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedFramePoseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[7]);
}

// ===================================================================

class LandmarkData_LandmarkObservation::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LandmarkData_LandmarkObservation::_Internal::landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg) {
  return *msg->_impl_.landmark_to_tracking_transform_;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.landmark_to_tracking_transform_ != nullptr) {
    delete _impl_.landmark_to_tracking_transform_;
  }
  _impl_.landmark_to_tracking_transform_ = nullptr;
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LandmarkData_LandmarkObservation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.landmark_to_tracking_transform_){nullptr}
    , decltype(_impl_.translation_weight_){}
    , decltype(_impl_.rotation_weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_landmark_to_tracking_transform()) {
    _this->_impl_.landmark_to_tracking_transform_ = new ::cartographer::transform::proto::Rigid3d(*from._impl_.landmark_to_tracking_transform_);
  }
  ::memcpy(&_impl_.translation_weight_, &from._impl_.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotation_weight_) -
    reinterpret_cast<char*>(&_impl_.translation_weight_)) + sizeof(_impl_.rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

inline void LandmarkData_LandmarkObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.landmark_to_tracking_transform_){nullptr}
    , decltype(_impl_.translation_weight_){0}
    , decltype(_impl_.rotation_weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LandmarkData_LandmarkObservation::~LandmarkData_LandmarkObservation() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LandmarkData_LandmarkObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.landmark_to_tracking_transform_;
}

void LandmarkData_LandmarkObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LandmarkData_LandmarkObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.landmark_to_tracking_transform_ != nullptr) {
    delete _impl_.landmark_to_tracking_transform_;
  }
  _impl_.landmark_to_tracking_transform_ = nullptr;
  ::memset(&_impl_.translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotation_weight_) -
      reinterpret_cast<char*>(&_impl_.translation_weight_)) + sizeof(_impl_.rotation_weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkData_LandmarkObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_to_tracking_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double translation_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rotation_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandmarkData_LandmarkObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->_internal_has_landmark_to_tracking_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::landmark_to_tracking_transform(this),
        _Internal::landmark_to_tracking_transform(this).GetCachedSize(), target, stream);
  }

  // double translation_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = this->_internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_translation_weight(), target);
  }

  // double rotation_weight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rotation_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return target;
}

size_t LandmarkData_LandmarkObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->_internal_has_landmark_to_tracking_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.landmark_to_tracking_transform_);
  }

  // double translation_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = this->_internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = this->_internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarkData_LandmarkObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LandmarkData_LandmarkObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarkData_LandmarkObservation::GetClassData() const { return &_class_data_; }


void LandmarkData_LandmarkObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LandmarkData_LandmarkObservation*>(&to_msg);
  auto& from = static_cast<const LandmarkData_LandmarkObservation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_landmark_to_tracking_transform()) {
    _this->_internal_mutable_landmark_to_tracking_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(
        from._internal_landmark_to_tracking_transform());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_translation_weight = from._internal_translation_weight();
  uint64_t raw_translation_weight;
  memcpy(&raw_translation_weight, &tmp_translation_weight, sizeof(tmp_translation_weight));
  if (raw_translation_weight != 0) {
    _this->_internal_set_translation_weight(from._internal_translation_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_weight = from._internal_rotation_weight();
  uint64_t raw_rotation_weight;
  memcpy(&raw_rotation_weight, &tmp_rotation_weight, sizeof(tmp_rotation_weight));
  if (raw_rotation_weight != 0) {
    _this->_internal_set_rotation_weight(from._internal_rotation_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandmarkData_LandmarkObservation::CopyFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_LandmarkObservation::IsInitialized() const {
  return true;
}

void LandmarkData_LandmarkObservation::InternalSwap(LandmarkData_LandmarkObservation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandmarkData_LandmarkObservation, _impl_.rotation_weight_)
      + sizeof(LandmarkData_LandmarkObservation::_impl_.rotation_weight_)
      - PROTOBUF_FIELD_OFFSET(LandmarkData_LandmarkObservation, _impl_.landmark_to_tracking_transform_)>(
          reinterpret_cast<char*>(&_impl_.landmark_to_tracking_transform_),
          reinterpret_cast<char*>(&other->_impl_.landmark_to_tracking_transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkData_LandmarkObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[8]);
}

// ===================================================================

class LandmarkData::_Internal {
 public:
};

LandmarkData::LandmarkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cartographer.sensor.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LandmarkData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.landmark_observations_){from._impl_.landmark_observations_}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

inline void LandmarkData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.landmark_observations_){arena}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LandmarkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.landmark_observations_.~RepeatedPtrField();
}

void LandmarkData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landmark_observations_.Clear();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark_observations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LandmarkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_landmark_observations_size()); i < n; i++) {
    const auto& repfield = this->_internal_landmark_observations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  total_size += 1UL * this->_internal_landmark_observations_size();
  for (const auto& msg : this->_impl_.landmark_observations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LandmarkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LandmarkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LandmarkData::GetClassData() const { return &_class_data_; }


void LandmarkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LandmarkData*>(&to_msg);
  auto& from = static_cast<const LandmarkData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.landmark_observations_.MergeFrom(from._impl_.landmark_observations_);
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.landmark_observations_.InternalSwap(&other->_impl_.landmark_observations_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_getter, &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once,
      file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangefinderPoint*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangefinderPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::RangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedRangefinderPoint*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedRangefinderPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::TimedRangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::CompressedPointCloud*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::CompressedPointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::CompressedPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedPointCloudData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedPointCloudData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::TimedPointCloudData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangeData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::RangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::ImuData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::ImuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::OdometryData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::OdometryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::OdometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::FixedFramePoseData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::FixedFramePoseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::FixedFramePoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData_LandmarkObservation*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData*
Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::sensor::proto::LandmarkData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
