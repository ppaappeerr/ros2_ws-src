// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_limits.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/cell_limits_2d.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class MapLimits;
struct MapLimitsDefaultTypeInternal;
extern MapLimitsDefaultTypeInternal _MapLimits_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::MapLimits* Arena::CreateMaybeMessage<::cartographer::mapping::proto::MapLimits>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class MapLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.MapLimits) */ {
 public:
  inline MapLimits() : MapLimits(nullptr) {}
  ~MapLimits() override;
  explicit PROTOBUF_CONSTEXPR MapLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapLimits(const MapLimits& from);
  MapLimits(MapLimits&& from) noexcept
    : MapLimits() {
    *this = ::std::move(from);
  }

  inline MapLimits& operator=(const MapLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLimits& operator=(MapLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapLimits* internal_default_instance() {
    return reinterpret_cast<const MapLimits*>(
               &_MapLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapLimits& a, MapLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapLimits& from) {
    MapLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.MapLimits";
  }
  protected:
  explicit MapLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 2,
    kCellLimitsFieldNumber = 3,
    kResolutionFieldNumber = 1,
  };
  // .cartographer.transform.proto.Vector2d max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::cartographer::transform::proto::Vector2d& max() const;
  PROTOBUF_NODISCARD ::cartographer::transform::proto::Vector2d* release_max();
  ::cartographer::transform::proto::Vector2d* mutable_max();
  void set_allocated_max(::cartographer::transform::proto::Vector2d* max);
  private:
  const ::cartographer::transform::proto::Vector2d& _internal_max() const;
  ::cartographer::transform::proto::Vector2d* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::cartographer::transform::proto::Vector2d* max);
  ::cartographer::transform::proto::Vector2d* unsafe_arena_release_max();

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  bool has_cell_limits() const;
  private:
  bool _internal_has_cell_limits() const;
  public:
  void clear_cell_limits();
  const ::cartographer::mapping::proto::CellLimits& cell_limits() const;
  PROTOBUF_NODISCARD ::cartographer::mapping::proto::CellLimits* release_cell_limits();
  ::cartographer::mapping::proto::CellLimits* mutable_cell_limits();
  void set_allocated_cell_limits(::cartographer::mapping::proto::CellLimits* cell_limits);
  private:
  const ::cartographer::mapping::proto::CellLimits& _internal_cell_limits() const;
  ::cartographer::mapping::proto::CellLimits* _internal_mutable_cell_limits();
  public:
  void unsafe_arena_set_allocated_cell_limits(
      ::cartographer::mapping::proto::CellLimits* cell_limits);
  ::cartographer::mapping::proto::CellLimits* unsafe_arena_release_cell_limits();

  // double resolution = 1;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.MapLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cartographer::transform::proto::Vector2d* max_;
    ::cartographer::mapping::proto::CellLimits* cell_limits_;
    double resolution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapLimits

// double resolution = 1;
inline void MapLimits::clear_resolution() {
  _impl_.resolution_ = 0;
}
inline double MapLimits::_internal_resolution() const {
  return _impl_.resolution_;
}
inline double MapLimits::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.resolution)
  return _internal_resolution();
}
inline void MapLimits::_internal_set_resolution(double value) {
  
  _impl_.resolution_ = value;
}
inline void MapLimits::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapLimits.resolution)
}

// .cartographer.transform.proto.Vector2d max = 2;
inline bool MapLimits::_internal_has_max() const {
  return this != internal_default_instance() && _impl_.max_ != nullptr;
}
inline bool MapLimits::has_max() const {
  return _internal_has_max();
}
inline const ::cartographer::transform::proto::Vector2d& MapLimits::_internal_max() const {
  const ::cartographer::transform::proto::Vector2d* p = _impl_.max_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::transform::proto::Vector2d&>(
      ::cartographer::transform::proto::_Vector2d_default_instance_);
}
inline const ::cartographer::transform::proto::Vector2d& MapLimits::max() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.max)
  return _internal_max();
}
inline void MapLimits::unsafe_arena_set_allocated_max(
    ::cartographer::transform::proto::Vector2d* max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_);
  }
  _impl_.max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.MapLimits.max)
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::release_max() {
  
  ::cartographer::transform::proto::Vector2d* temp = _impl_.max_;
  _impl_.max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapLimits.max)
  
  ::cartographer::transform::proto::Vector2d* temp = _impl_.max_;
  _impl_.max_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::_internal_mutable_max() {
  
  if (_impl_.max_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector2d>(GetArenaForAllocation());
    _impl_.max_ = p;
  }
  return _impl_.max_;
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::mutable_max() {
  ::cartographer::transform::proto::Vector2d* _msg = _internal_mutable_max();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapLimits.max)
  return _msg;
}
inline void MapLimits::set_allocated_max(::cartographer::transform::proto::Vector2d* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_);
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max));
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_ = max;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapLimits.max)
}

// .cartographer.mapping.proto.CellLimits cell_limits = 3;
inline bool MapLimits::_internal_has_cell_limits() const {
  return this != internal_default_instance() && _impl_.cell_limits_ != nullptr;
}
inline bool MapLimits::has_cell_limits() const {
  return _internal_has_cell_limits();
}
inline const ::cartographer::mapping::proto::CellLimits& MapLimits::_internal_cell_limits() const {
  const ::cartographer::mapping::proto::CellLimits* p = _impl_.cell_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::cartographer::mapping::proto::CellLimits&>(
      ::cartographer::mapping::proto::_CellLimits_default_instance_);
}
inline const ::cartographer::mapping::proto::CellLimits& MapLimits::cell_limits() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.cell_limits)
  return _internal_cell_limits();
}
inline void MapLimits::unsafe_arena_set_allocated_cell_limits(
    ::cartographer::mapping::proto::CellLimits* cell_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_limits_);
  }
  _impl_.cell_limits_ = cell_limits;
  if (cell_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.proto.MapLimits.cell_limits)
}
inline ::cartographer::mapping::proto::CellLimits* MapLimits::release_cell_limits() {
  
  ::cartographer::mapping::proto::CellLimits* temp = _impl_.cell_limits_;
  _impl_.cell_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cartographer::mapping::proto::CellLimits* MapLimits::unsafe_arena_release_cell_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapLimits.cell_limits)
  
  ::cartographer::mapping::proto::CellLimits* temp = _impl_.cell_limits_;
  _impl_.cell_limits_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::CellLimits* MapLimits::_internal_mutable_cell_limits() {
  
  if (_impl_.cell_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::CellLimits>(GetArenaForAllocation());
    _impl_.cell_limits_ = p;
  }
  return _impl_.cell_limits_;
}
inline ::cartographer::mapping::proto::CellLimits* MapLimits::mutable_cell_limits() {
  ::cartographer::mapping::proto::CellLimits* _msg = _internal_mutable_cell_limits();
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapLimits.cell_limits)
  return _msg;
}
inline void MapLimits::set_allocated_cell_limits(::cartographer::mapping::proto::CellLimits* cell_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_limits_);
  }
  if (cell_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_limits));
    if (message_arena != submessage_arena) {
      cell_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_limits, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cell_limits_ = cell_limits;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapLimits.cell_limits)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto
